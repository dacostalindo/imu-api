# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import numpy as np





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_xsensdeviceapi_py35_64')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_xsensdeviceapi_py35_64')
    _xsensdeviceapi_py35_64 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_xsensdeviceapi_py35_64', [dirname(__file__)])
        except ImportError:
            import _xsensdeviceapi_py35_64
            return _xsensdeviceapi_py35_64
        if fp is not None:
            try:
                _mod = imp.load_module('_xsensdeviceapi_py35_64', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _xsensdeviceapi_py35_64 = swig_import_helper()
    del swig_import_helper
else:
    import _xsensdeviceapi_py35_64
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_SwigPyIterator
    __del__ = lambda self: None

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _xsensdeviceapi_py35_64.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _xsensdeviceapi_py35_64.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _xsensdeviceapi_py35_64.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _xsensdeviceapi_py35_64.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _xsensdeviceapi_py35_64.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _xsensdeviceapi_py35_64.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _xsensdeviceapi_py35_64.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _xsensdeviceapi_py35_64.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _xsensdeviceapi_py35_64.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _xsensdeviceapi_py35_64.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _xsensdeviceapi_py35_64.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _xsensdeviceapi_py35_64.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _xsensdeviceapi_py35_64.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _xsensdeviceapi_py35_64.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _xsensdeviceapi_py35_64.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _xsensdeviceapi_py35_64.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

THREAD_PRIORITY_IDLE = _xsensdeviceapi_py35_64.THREAD_PRIORITY_IDLE
THREAD_PRIORITY_LOWEST = _xsensdeviceapi_py35_64.THREAD_PRIORITY_LOWEST
THREAD_PRIORITY_BELOW_NORMAL = _xsensdeviceapi_py35_64.THREAD_PRIORITY_BELOW_NORMAL
THREAD_PRIORITY_NORMAL = _xsensdeviceapi_py35_64.THREAD_PRIORITY_NORMAL
THREAD_PRIORITY_ABOVE_NORMAL = _xsensdeviceapi_py35_64.THREAD_PRIORITY_ABOVE_NORMAL
THREAD_PRIORITY_HIGHEST = _xsensdeviceapi_py35_64.THREAD_PRIORITY_HIGHEST
THREAD_PRIORITY_TIME_CRITICAL = _xsensdeviceapi_py35_64.THREAD_PRIORITY_TIME_CRITICAL
import collections
__LOC__ = _xsensdeviceapi_py35_64.__LOC__
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = _xsensdeviceapi_py35_64._CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
XSENS_PFSHARED = _xsensdeviceapi_py35_64.XSENS_PFSHARED
XSENS_PFPRE = _xsensdeviceapi_py35_64.XSENS_PFPRE
XSENS_PFBITS = _xsensdeviceapi_py35_64.XSENS_PFBITS
QT_NO_DEBUG = _xsensdeviceapi_py35_64.QT_NO_DEBUG
XSENS_CONFIG = _xsensdeviceapi_py35_64.XSENS_CONFIG
XSENS_PFCONF = _xsensdeviceapi_py35_64.XSENS_PFCONF
XSENS_PFFULL = _xsensdeviceapi_py35_64.XSENS_PFFULL
XSREAL_ALLOWS_MEMCPY = _xsensdeviceapi_py35_64.XSREAL_ALLOWS_MEMCPY
XSDF_None = _xsensdeviceapi_py35_64.XSDF_None
XSDF_Managed = _xsensdeviceapi_py35_64.XSDF_Managed
XSDF_FixedSize = _xsensdeviceapi_py35_64.XSDF_FixedSize
XSDF_Empty = _xsensdeviceapi_py35_64.XSDF_Empty

def toXsString(s: 'XsDataFlags') -> "char const *":
    return _xsensdeviceapi_py35_64.toXsString(s)
toXsString = _xsensdeviceapi_py35_64.toXsString
class XsArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsArray, name)
    __repr__ = _swig_repr
    __swig_getmethods__["m_data"] = _xsensdeviceapi_py35_64.XsArray_m_data_get
    if _newclass:
        m_data = _swig_property(_xsensdeviceapi_py35_64.XsArray_m_data_get)
    __swig_getmethods__["m_size"] = _xsensdeviceapi_py35_64.XsArray_m_size_get
    if _newclass:
        m_size = _swig_property(_xsensdeviceapi_py35_64.XsArray_m_size_get)
    __swig_getmethods__["m_reserved"] = _xsensdeviceapi_py35_64.XsArray_m_reserved_get
    if _newclass:
        m_reserved = _swig_property(_xsensdeviceapi_py35_64.XsArray_m_reserved_get)
    __swig_getmethods__["m_flags"] = _xsensdeviceapi_py35_64.XsArray_m_flags_get
    if _newclass:
        m_flags = _swig_property(_xsensdeviceapi_py35_64.XsArray_m_flags_get)
    __swig_getmethods__["m_descriptor"] = _xsensdeviceapi_py35_64.XsArray_m_descriptor_get
    if _newclass:
        m_descriptor = _swig_property(_xsensdeviceapi_py35_64.XsArray_m_descriptor_get)

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsArray
    __del__ = lambda self: None

    def __assign__(self, src: 'XsArray') -> "XsArray const &":
        return _xsensdeviceapi_py35_64.XsArray___assign__(self, src)
XsArray_swigregister = _xsensdeviceapi_py35_64.XsArray_swigregister
XsArray_swigregister(XsArray)

class _XsStringImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsStringImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsStringImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsStringImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsStringImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_clear(self)

    def __eq__(self, other: '_XsStringImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsStringImpl___eq__(self, other)

    def __ne__(self, other: '_XsStringImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsStringImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsStringImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsStringImpl_descriptor(self)

    def first(self) -> "char":
        return _xsensdeviceapi_py35_64._XsStringImpl_first(self)

    def last(self) -> "char":
        return _xsensdeviceapi_py35_64._XsStringImpl_last(self)

    def insert(self, item: 'char const &', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_insert(self, item, index)

    def push_back(self, item: 'char const &') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_pop_back(self, count)

    def push_front(self, item: 'char const &') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsStringImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'char const *') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_setSize(self, count)

    def append(self, other: '_XsStringImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_append(self, other)

    def __assign__(self, other: '_XsStringImpl') -> "XsArrayImpl< char,g_xsStringDescriptor,XsString >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsStringImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsStringImpl_empty(self)

    def swap(self, other: '_XsStringImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_swap(self, other)

    def find(self, needle: 'char const &') -> "int":
        return _xsensdeviceapi_py35_64._XsStringImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "char":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsStringImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'char') -> "void":
        return _xsensdeviceapi_py35_64._XsStringImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'char') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsStringImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsStringImpl___len__(self)

    def __getitem__(self, *args) -> "XsString *":
        return _xsensdeviceapi_py35_64._XsStringImpl___getitem__(self, *args)

    def __add__(self, other: 'XsString') -> "XsString *":
        return _xsensdeviceapi_py35_64._XsStringImpl___add__(self, other)

    def __iadd__(self, other: 'XsString') -> "XsString *":
        return _xsensdeviceapi_py35_64._XsStringImpl___iadd__(self, other)

    def __radd__(self, other: 'XsString') -> "XsString *":
        return _xsensdeviceapi_py35_64._XsStringImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsString *":
        return _xsensdeviceapi_py35_64._XsStringImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsString *":
        return _xsensdeviceapi_py35_64._XsStringImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsString *":
        return _xsensdeviceapi_py35_64._XsStringImpl___rmul__(self, count)

    def __contains__(self, val: 'char') -> "bool":
        return _xsensdeviceapi_py35_64._XsStringImpl___contains__(self, val)

    def __reversed__(self) -> "XsString *":
        return _xsensdeviceapi_py35_64._XsStringImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsString *":
        return _xsensdeviceapi_py35_64._XsStringImpl___delitem__(self, index)
_XsStringImpl_swigregister = _xsensdeviceapi_py35_64._XsStringImpl_swigregister
_XsStringImpl_swigregister(_XsStringImpl)

class XsString(_XsStringImpl):
    __swig_setmethods__ = {}
    for _s in [_XsStringImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsString, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsStringImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def c_str(self, *args) -> "char const *":
        return _xsensdeviceapi_py35_64.XsString_c_str(self, *args)

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsString___str__(self)

    def __add__(self, other: 'XsString') -> "XsString":
        return _xsensdeviceapi_py35_64.XsString___add__(self, other)

    def toStdWString(self) -> "std::wstring":
        return _xsensdeviceapi_py35_64.XsString_toStdWString(self)

    def __eq__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsString___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsString___ne__(self, *args)

    def __lt__(self, str: 'XsString') -> "bool":
        return _xsensdeviceapi_py35_64.XsString___lt__(self, str)

    def __gt__(self, str: 'XsString') -> "bool":
        return _xsensdeviceapi_py35_64.XsString___gt__(self, str)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsString_empty(self)

    def utf8Len(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsString_utf8Len(self)

    def endsWith(self, other: 'XsString', caseSensitive: 'bool'=False) -> "bool":
        return _xsensdeviceapi_py35_64.XsString_endsWith(self, other, caseSensitive)

    def startsWith(self, other: 'XsString', caseSensitive: 'bool'=False) -> "bool":
        return _xsensdeviceapi_py35_64.XsString_startsWith(self, other, caseSensitive)

    def contains(self, other: 'XsString', caseSensitive: 'bool'=False, offset: 'XsSize *'=None) -> "bool":
        return _xsensdeviceapi_py35_64.XsString_contains(self, other, caseSensitive, offset)

    def utf8At(self, index: 'XsSize') -> "wchar_t":
        return _xsensdeviceapi_py35_64.XsString_utf8At(self, index)

    def push_back(self, *args) -> "XsString &":
        return _xsensdeviceapi_py35_64.XsString_push_back(self, *args)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64.XsString_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64.XsString_reverse(self)

    def findSubStr(self, needle: 'XsString') -> "int":
        return _xsensdeviceapi_py35_64.XsString_findSubStr(self, needle)

    def mid(self, start: 'XsSize', count: 'XsSize') -> "XsString":
        return _xsensdeviceapi_py35_64.XsString_mid(self, start, count)

    def append(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsString_append(self, *args)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsString
    __del__ = lambda self: None
XsString_swigregister = _xsensdeviceapi_py35_64.XsString_swigregister
XsString_swigregister(XsString)
cvar = _xsensdeviceapi_py35_64.cvar
g_xsStringDescriptor = cvar.g_xsStringDescriptor

XSDEVICEID_PRODUCT_CODE_LEN = _xsensdeviceapi_py35_64.XSDEVICEID_PRODUCT_CODE_LEN
XSDEVICEID_PRODUCT_CODE_INIT = _xsensdeviceapi_py35_64.XSDEVICEID_PRODUCT_CODE_INIT
class XsDeviceId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDeviceId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsDeviceId, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDeviceId(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsDeviceId') -> "XsDeviceId const &":
        return _xsensdeviceapi_py35_64.XsDeviceId___assign__(self, other)
    if _newclass:
        legacyBit = staticmethod(_xsensdeviceapi_py35_64.XsDeviceId_legacyBit)
    else:
        legacyBit = _xsensdeviceapi_py35_64.XsDeviceId_legacyBit

    def isLegacyDeviceId(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isLegacyDeviceId(self)

    def toInt(self) -> "uint64_t":
        return _xsensdeviceapi_py35_64.XsDeviceId_toInt(self)

    def productCode(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsDeviceId_productCode(self)

    def productVariant(self) -> "uint32_t":
        return _xsensdeviceapi_py35_64.XsDeviceId_productVariant(self)

    def hardwareVersion(self) -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsDeviceId_hardwareVersion(self)

    def legacyDeviceId(self) -> "uint32_t":
        return _xsensdeviceapi_py35_64.XsDeviceId_legacyDeviceId(self)

    def isMtiX(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtiX(self)

    def isMtiX0(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtiX0(self)

    def isMtiX00(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtiX00(self)

    def isMtigX00(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtigX00(self)

    def isMtigX10(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtigX10(self)

    def isMti6X0(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMti6X0(self)

    def isGlove(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isGlove(self)

    def isMtw(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtw(self)

    def isMtw2(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtw2(self)

    def isMtx(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtx(self)

    def isMtx2(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtx2(self)

    def isBodyPack(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isBodyPack(self)

    def isWirelessMaster(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isWirelessMaster(self)

    def isAwindaX(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isAwindaX(self)

    def isAwindaXStation(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isAwindaXStation(self)

    def isAwindaXDongle(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isAwindaXDongle(self)

    def isAwindaXOem(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isAwindaXOem(self)

    def isAwinda2(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isAwinda2(self)

    def isAwinda2Station(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isAwinda2Station(self)

    def isAwinda2Dongle(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isAwinda2Dongle(self)

    def isAwinda2Oem(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isAwinda2Oem(self)

    def isSyncStationX(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isSyncStationX(self)

    def isSyncStation2(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isSyncStation2(self)

    def isHilDevice(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isHilDevice(self)

    def isImu(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isImu(self)

    def isVru(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isVru(self)

    def isAhrs(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isAhrs(self)

    def isGnss(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isGnss(self)

    def isContainerDevice(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isContainerDevice(self)

    def isMt(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMt(self)

    def isMti(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMti(self)

    def isMtig(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtig(self)

    def isMtMark4(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMark4(self)

    def isMtMark5(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMark5(self)

    def toXsString(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsDeviceId_toXsString(self)

    def fromString(self, str: 'XsString') -> "void":
        return _xsensdeviceapi_py35_64.XsDeviceId_fromString(self, str)

    def toDeviceTypeString(self, makeType: 'bool'=True) -> "XsString":
        return _xsensdeviceapi_py35_64.XsDeviceId_toDeviceTypeString(self, makeType)

    def fromDeviceTypeString(self, str: 'XsString') -> "void":
        return _xsensdeviceapi_py35_64.XsDeviceId_fromDeviceTypeString(self, str)

    def isValid(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isValid(self)

    def contains(self, other: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_contains(self, other)

    def isType(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isType(self)

    def typeName(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsDeviceId_typeName(self)

    def type(self) -> "XsDeviceId":
        return _xsensdeviceapi_py35_64.XsDeviceId_type(self)

    def deviceType(self, detailed: 'bool'=True) -> "XsDeviceId":
        return _xsensdeviceapi_py35_64.XsDeviceId_deviceType(self, detailed)

    def deviceTypeMask(self, detailed: 'bool'=True) -> "XsDeviceId":
        return _xsensdeviceapi_py35_64.XsDeviceId_deviceTypeMask(self, detailed)

    def __eq__(self, other: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId___eq__(self, other)

    def __ne__(self, other: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId___ne__(self, other)

    def __lt__(self, other: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId___lt__(self, other)

    def __le__(self, other: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId___le__(self, other)

    def __gt__(self, other: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId___gt__(self, other)

    def __ge__(self, other: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId___ge__(self, other)

    def isMtMk4(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4(self)

    def isMtMk4_X(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_X(self)

    def isMtMk4_1(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_1(self)

    def isMtMk4_2(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_2(self)

    def isMtMk4_3(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_3(self)

    def isMtMk4_7(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_7(self)

    def isMtMk4_X0(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_X0(self)

    def isMtMk4_10(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_10(self)

    def isMtMk4_20(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_20(self)

    def isMtMk4_30(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_30(self)

    def isMtMk4_X00(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_X00(self)

    def isMtMk4_100(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_100(self)

    def isMtMk4_200(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_200(self)

    def isMtMk4_300(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_300(self)

    def isMtMk4_400(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_400(self)

    def isMtMk4_500(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_500(self)

    def isMtMk4_600(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_600(self)

    def isMtMk4_700(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_700(self)

    def isMtMk4_710(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_710(self)

    def isMtMk4_800(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_800(self)

    def isMtMk4_900(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk4_900(self)

    def isMtMk5(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk5(self)

    def isMtMk5_X0(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk5_X0(self)

    def isMtMk5_10(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk5_10(self)

    def isMtMk5_20(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk5_20(self)

    def isMtMk5_30(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk5_30(self)

    def isMtMk5_X00(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk5_X00(self)

    def isMtMk5_100(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk5_100(self)

    def isMtMk5_200(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk5_200(self)

    def isMtMk5_300(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk5_300(self)

    def isMtMk5_710(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceId_isMtMk5_710(self)

    def __index__(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDeviceId___index__(self)

    def __int__(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDeviceId___int__(self)

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsDeviceId___str__(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDeviceId
    __del__ = lambda self: None
XsDeviceId_swigregister = _xsensdeviceapi_py35_64.XsDeviceId_swigregister
XsDeviceId_swigregister(XsDeviceId)

def XsDeviceId_legacyBit() -> "uint64_t":
    return _xsensdeviceapi_py35_64.XsDeviceId_legacyBit()
XsDeviceId_legacyBit = _xsensdeviceapi_py35_64.XsDeviceId_legacyBit

class _XsIntArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsIntArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsIntArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsIntArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsIntArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_clear(self)

    def __eq__(self, other: '_XsIntArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsIntArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_descriptor(self)

    def first(self) -> "int":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_first(self)

    def last(self) -> "int":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_last(self)

    def insert(self, item: 'int const &', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_insert(self, item, index)

    def push_back(self, item: 'int const &') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_pop_back(self, count)

    def push_front(self, item: 'int const &') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'int const *') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_setSize(self, count)

    def append(self, other: '_XsIntArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_append(self, other)

    def __assign__(self, other: '_XsIntArrayImpl') -> "XsArrayImpl< int,g_xsIntArrayDescriptor,XsIntArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_empty(self)

    def swap(self, other: '_XsIntArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_swap(self, other)

    def find(self, needle: 'int const &') -> "int":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "int":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsIntArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'int') -> "void":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'int') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsIntArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsIntArray *":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsIntArray') -> "XsIntArray *":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsIntArray') -> "XsIntArray *":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsIntArray') -> "XsIntArray *":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsIntArray *":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsIntArray *":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsIntArray *":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'int') -> "bool":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsIntArray *":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsIntArray *":
        return _xsensdeviceapi_py35_64._XsIntArrayImpl___delitem__(self, index)
_XsIntArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsIntArrayImpl_swigregister
_XsIntArrayImpl_swigregister(_XsIntArrayImpl)

class _XsByteArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsByteArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsByteArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsByteArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsByteArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_clear(self)

    def __eq__(self, other: '_XsByteArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsByteArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_descriptor(self)

    def first(self) -> "unsigned char":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_first(self)

    def last(self) -> "unsigned char":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_last(self)

    def insert(self, item: 'unsigned char const &', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_insert(self, item, index)

    def push_back(self, item: 'unsigned char const &') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_pop_back(self, count)

    def push_front(self, item: 'unsigned char const &') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'unsigned char const *') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_setSize(self, count)

    def append(self, other: '_XsByteArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_append(self, other)

    def __assign__(self, other: '_XsByteArrayImpl') -> "XsArrayImpl< unsigned char,g_xsByteArrayDescriptor,XsByteArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_empty(self)

    def swap(self, other: '_XsByteArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_swap(self, other)

    def find(self, needle: 'unsigned char const &') -> "int":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "unsigned char":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsByteArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'unsigned char') -> "void":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'unsigned char') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsByteArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsByteArray *":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsByteArray') -> "XsByteArray *":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsByteArray') -> "XsByteArray *":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsByteArray') -> "XsByteArray *":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsByteArray *":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsByteArray *":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsByteArray *":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'unsigned char') -> "bool":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsByteArray *":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsByteArray *":
        return _xsensdeviceapi_py35_64._XsByteArrayImpl___delitem__(self, index)
_XsByteArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsByteArrayImpl_swigregister
_XsByteArrayImpl_swigregister(_XsByteArrayImpl)

class _XsInt64ArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsInt64ArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsInt64ArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsInt64ArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsInt64ArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_clear(self)

    def __eq__(self, other: '_XsInt64ArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsInt64ArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_descriptor(self)

    def first(self) -> "long long":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_first(self)

    def last(self) -> "long long":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_last(self)

    def insert(self, item: 'long long const &', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_insert(self, item, index)

    def push_back(self, item: 'long long const &') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_pop_back(self, count)

    def push_front(self, item: 'long long const &') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'long long const *') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_setSize(self, count)

    def append(self, other: '_XsInt64ArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_append(self, other)

    def __assign__(self, other: '_XsInt64ArrayImpl') -> "XsArrayImpl< long long,g_xsInt64ArrayDescriptor,XsInt64Array >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_empty(self)

    def swap(self, other: '_XsInt64ArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_swap(self, other)

    def find(self, needle: 'long long const &') -> "int":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "long long":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'long long') -> "void":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'long long') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsInt64Array *":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsInt64Array') -> "XsInt64Array *":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsInt64Array') -> "XsInt64Array *":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsInt64Array') -> "XsInt64Array *":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsInt64Array *":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsInt64Array *":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsInt64Array *":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'long long') -> "bool":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsInt64Array *":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsInt64Array *":
        return _xsensdeviceapi_py35_64._XsInt64ArrayImpl___delitem__(self, index)
_XsInt64ArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsInt64ArrayImpl_swigregister
_XsInt64ArrayImpl_swigregister(_XsInt64ArrayImpl)

class _XsDeviceIdArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsDeviceIdArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsDeviceIdArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsDeviceIdArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsDeviceIdArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_clear(self)

    def __eq__(self, other: '_XsDeviceIdArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsDeviceIdArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_descriptor(self)

    def first(self) -> "XsDeviceId":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_first(self)

    def last(self) -> "XsDeviceId":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_last(self)

    def insert(self, item: 'XsDeviceId', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsDeviceId') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsDeviceId') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsDeviceId') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_setSize(self, count)

    def append(self, other: '_XsDeviceIdArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_append(self, other)

    def __assign__(self, other: '_XsDeviceIdArrayImpl') -> "XsArrayImpl< XsDeviceId,g_xsDeviceIdArrayDescriptor,XsDeviceIdArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_empty(self)

    def swap(self, other: '_XsDeviceIdArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_swap(self, other)

    def find(self, needle: 'XsDeviceId') -> "int":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsDeviceId":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsDeviceId') -> "void":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsDeviceId') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsDeviceIdArray *":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsDeviceIdArray') -> "XsDeviceIdArray *":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsDeviceIdArray') -> "XsDeviceIdArray *":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsDeviceIdArray') -> "XsDeviceIdArray *":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsDeviceIdArray *":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsDeviceIdArray *":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsDeviceIdArray *":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsDeviceIdArray *":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsDeviceIdArray *":
        return _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl___delitem__(self, index)
_XsDeviceIdArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsDeviceIdArrayImpl_swigregister
_XsDeviceIdArrayImpl_swigregister(_XsDeviceIdArrayImpl)

class _XsStringArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsStringArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsStringArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsStringArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsStringArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_clear(self)

    def __eq__(self, other: '_XsStringArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsStringArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_descriptor(self)

    def first(self) -> "XsString":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_first(self)

    def last(self) -> "XsString":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_last(self)

    def insert(self, item: 'XsString', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsString') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsString') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsString') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_setSize(self, count)

    def append(self, other: '_XsStringArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_append(self, other)

    def __assign__(self, other: '_XsStringArrayImpl') -> "XsArrayImpl< XsString,g_xsStringArrayDescriptor,XsStringArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_empty(self)

    def swap(self, other: '_XsStringArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_swap(self, other)

    def find(self, needle: 'XsString') -> "int":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsString":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsStringArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsString') -> "void":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsString') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsStringArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsStringArray *":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsStringArray') -> "XsStringArray *":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsStringArray') -> "XsStringArray *":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsStringArray') -> "XsStringArray *":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsStringArray *":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsStringArray *":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsStringArray *":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsString') -> "bool":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsStringArray *":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsStringArray *":
        return _xsensdeviceapi_py35_64._XsStringArrayImpl___delitem__(self, index)
_XsStringArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsStringArrayImpl_swigregister
_XsStringArrayImpl_swigregister(_XsStringArrayImpl)

class _XsOutputConfigurationArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsOutputConfigurationArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsOutputConfigurationArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsOutputConfigurationArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsOutputConfigurationArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_clear(self)

    def __eq__(self, other: '_XsOutputConfigurationArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsOutputConfigurationArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_descriptor(self)

    def first(self) -> "XsOutputConfiguration":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_first(self)

    def last(self) -> "XsOutputConfiguration":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_last(self)

    def insert(self, item: 'XsOutputConfiguration', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsOutputConfiguration') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsOutputConfiguration') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsOutputConfiguration') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_setSize(self, count)

    def append(self, other: '_XsOutputConfigurationArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_append(self, other)

    def __assign__(self, other: '_XsOutputConfigurationArrayImpl') -> "XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_empty(self)

    def swap(self, other: '_XsOutputConfigurationArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_swap(self, other)

    def find(self, needle: 'XsOutputConfiguration') -> "int":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsOutputConfiguration":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsOutputConfiguration') -> "void":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsOutputConfiguration') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsOutputConfigurationArray') -> "XsOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsOutputConfigurationArray') -> "XsOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsOutputConfigurationArray') -> "XsOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsOutputConfiguration') -> "bool":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl___delitem__(self, index)
_XsOutputConfigurationArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsOutputConfigurationArrayImpl_swigregister
_XsOutputConfigurationArrayImpl_swigregister(_XsOutputConfigurationArrayImpl)

class _XsCanOutputConfigurationArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsCanOutputConfigurationArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsCanOutputConfigurationArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsCanOutputConfigurationArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsCanOutputConfigurationArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_clear(self)

    def __eq__(self, other: '_XsCanOutputConfigurationArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsCanOutputConfigurationArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_descriptor(self)

    def first(self) -> "XsCanOutputConfiguration":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_first(self)

    def last(self) -> "XsCanOutputConfiguration":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_last(self)

    def insert(self, item: 'XsCanOutputConfiguration', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsCanOutputConfiguration') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsCanOutputConfiguration') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsCanOutputConfiguration') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_setSize(self, count)

    def append(self, other: '_XsCanOutputConfigurationArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_append(self, other)

    def __assign__(self, other: '_XsCanOutputConfigurationArrayImpl') -> "XsArrayImpl< XsCanOutputConfiguration,g_xsCanOutputConfigurationArrayDescriptor,XsCanOutputConfigurationArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_empty(self)

    def swap(self, other: '_XsCanOutputConfigurationArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_swap(self, other)

    def find(self, needle: 'XsCanOutputConfiguration') -> "int":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsCanOutputConfiguration":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsCanOutputConfiguration') -> "void":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsCanOutputConfiguration') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsCanOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsCanOutputConfigurationArray') -> "XsCanOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsCanOutputConfigurationArray') -> "XsCanOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsCanOutputConfigurationArray') -> "XsCanOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsCanOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsCanOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsCanOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsCanOutputConfiguration') -> "bool":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsCanOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsCanOutputConfigurationArray *":
        return _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl___delitem__(self, index)
_XsCanOutputConfigurationArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsCanOutputConfigurationArrayImpl_swigregister
_XsCanOutputConfigurationArrayImpl_swigregister(_XsCanOutputConfigurationArrayImpl)

class _XsPortInfoArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsPortInfoArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsPortInfoArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsPortInfoArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsPortInfoArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_clear(self)

    def __eq__(self, other: '_XsPortInfoArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsPortInfoArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_descriptor(self)

    def first(self) -> "XsPortInfo":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_first(self)

    def last(self) -> "XsPortInfo":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_last(self)

    def insert(self, item: 'XsPortInfo', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsPortInfo') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsPortInfo') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsPortInfo') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_setSize(self, count)

    def append(self, other: '_XsPortInfoArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_append(self, other)

    def __assign__(self, other: '_XsPortInfoArrayImpl') -> "XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_empty(self)

    def swap(self, other: '_XsPortInfoArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_swap(self, other)

    def find(self, needle: 'XsPortInfo') -> "int":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsPortInfo":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsPortInfo') -> "void":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsPortInfo') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsPortInfoArray *":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsPortInfoArray') -> "XsPortInfoArray *":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsPortInfoArray') -> "XsPortInfoArray *":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsPortInfoArray') -> "XsPortInfoArray *":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsPortInfoArray *":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsPortInfoArray *":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsPortInfoArray *":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsPortInfo') -> "bool":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsPortInfoArray *":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsPortInfoArray *":
        return _xsensdeviceapi_py35_64._XsPortInfoArrayImpl___delitem__(self, index)
_XsPortInfoArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsPortInfoArrayImpl_swigregister
_XsPortInfoArrayImpl_swigregister(_XsPortInfoArrayImpl)

class _XsSyncSettingArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsSyncSettingArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsSyncSettingArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsSyncSettingArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsSyncSettingArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_clear(self)

    def __eq__(self, other: '_XsSyncSettingArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsSyncSettingArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_descriptor(self)

    def first(self) -> "XsSyncSetting":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_first(self)

    def last(self) -> "XsSyncSetting":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_last(self)

    def insert(self, item: 'XsSyncSetting', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsSyncSetting') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsSyncSetting') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsSyncSetting') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_setSize(self, count)

    def append(self, other: '_XsSyncSettingArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_append(self, other)

    def __assign__(self, other: '_XsSyncSettingArrayImpl') -> "XsArrayImpl< XsSyncSetting,g_xsSyncSettingArrayDescriptor,XsSyncSettingArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_empty(self)

    def swap(self, other: '_XsSyncSettingArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_swap(self, other)

    def find(self, needle: 'XsSyncSetting') -> "int":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsSyncSetting":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsSyncSetting') -> "void":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsSyncSetting') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsSyncSettingArray *":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsSyncSettingArray') -> "XsSyncSettingArray *":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsSyncSettingArray') -> "XsSyncSettingArray *":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsSyncSettingArray') -> "XsSyncSettingArray *":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsSyncSettingArray *":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsSyncSettingArray *":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsSyncSettingArray *":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsSyncSetting') -> "bool":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsSyncSettingArray *":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsSyncSettingArray *":
        return _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl___delitem__(self, index)
_XsSyncSettingArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsSyncSettingArrayImpl_swigregister
_XsSyncSettingArrayImpl_swigregister(_XsSyncSettingArrayImpl)

class _XsMessageArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsMessageArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsMessageArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsMessageArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsMessageArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_clear(self)

    def __eq__(self, other: '_XsMessageArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsMessageArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_descriptor(self)

    def first(self) -> "XsMessage":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_first(self)

    def last(self) -> "XsMessage":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_last(self)

    def insert(self, item: 'XsMessage', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsMessage') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsMessage') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsMessage') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_setSize(self, count)

    def append(self, other: '_XsMessageArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_append(self, other)

    def __assign__(self, other: '_XsMessageArrayImpl') -> "XsArrayImpl< XsMessage,g_xsMessageArrayDescriptor,XsMessageArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_empty(self)

    def swap(self, other: '_XsMessageArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_swap(self, other)

    def find(self, needle: 'XsMessage') -> "int":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsMessage":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsMessage') -> "void":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsMessage') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsMessageArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsMessageArray *":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsMessageArray') -> "XsMessageArray *":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsMessageArray') -> "XsMessageArray *":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsMessageArray') -> "XsMessageArray *":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsMessageArray *":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsMessageArray *":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsMessageArray *":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsMessage') -> "bool":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsMessageArray *":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsMessageArray *":
        return _xsensdeviceapi_py35_64._XsMessageArrayImpl___delitem__(self, index)
_XsMessageArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsMessageArrayImpl_swigregister
_XsMessageArrayImpl_swigregister(_XsMessageArrayImpl)

class _XsQuaternionArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsQuaternionArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsQuaternionArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsQuaternionArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsQuaternionArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_clear(self)

    def __eq__(self, other: '_XsQuaternionArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsQuaternionArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_descriptor(self)

    def first(self) -> "XsQuaternion":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_first(self)

    def last(self) -> "XsQuaternion":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_last(self)

    def insert(self, item: 'XsQuaternion', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsQuaternion') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsQuaternion') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsQuaternion') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_setSize(self, count)

    def append(self, other: '_XsQuaternionArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_append(self, other)

    def __assign__(self, other: '_XsQuaternionArrayImpl') -> "XsArrayImpl< XsQuaternion,g_xsQuaternionArrayDescriptor,XsQuaternionArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_empty(self)

    def swap(self, other: '_XsQuaternionArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_swap(self, other)

    def find(self, needle: 'XsQuaternion') -> "int":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsQuaternion":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsQuaternion') -> "void":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsQuaternion') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsQuaternionArray *":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsQuaternionArray') -> "XsQuaternionArray *":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsQuaternionArray') -> "XsQuaternionArray *":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsQuaternionArray') -> "XsQuaternionArray *":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsQuaternionArray *":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsQuaternionArray *":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsQuaternionArray *":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsQuaternion') -> "bool":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsQuaternionArray *":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsQuaternionArray *":
        return _xsensdeviceapi_py35_64._XsQuaternionArrayImpl___delitem__(self, index)
_XsQuaternionArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsQuaternionArrayImpl_swigregister
_XsQuaternionArrayImpl_swigregister(_XsQuaternionArrayImpl)

class _XsDataPacketPtrArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsDataPacketPtrArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsDataPacketPtrArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsDataPacketPtrArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsDataPacketPtrArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_clear(self)

    def __eq__(self, other: 'XsDataPacketPtrArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___eq__(self, other)

    def __ne__(self, other: 'XsDataPacketPtrArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_descriptor(self)

    def first(self) -> "XsDataPacketPtr":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_first(self)

    def last(self) -> "XsDataPacketPtr":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_last(self)

    def insert(self, item: 'XsDataPacket', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsDataPacketPtr const *') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_setSize(self, count)

    def append(self, other: 'XsDataPacketPtrArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_append(self, other)

    def __assign__(self, other: 'XsDataPacketPtrArrayImpl') -> "XsArrayImpl< XsDataPacketPtr,g_xsDataPacketPtrArrayDescriptor,XsDataPacketPtrArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_empty(self)

    def swap(self, other: 'XsDataPacketPtrArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_swap(self, other)

    def find(self, needle: 'XsDataPacket') -> "int":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsDataPacketPtr":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsDataPacket') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsDataPacketPtrArray') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsDataPacketPtrArray') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsDataPacketPtrArray') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsDataPacket') -> "bool":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl___delitem__(self, index)
_XsDataPacketPtrArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsDataPacketPtrArrayImpl_swigregister
_XsDataPacketPtrArrayImpl_swigregister(_XsDataPacketPtrArrayImpl)

class _XsFilterProfileArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsFilterProfileArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsFilterProfileArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsFilterProfileArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsFilterProfileArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_clear(self)

    def __eq__(self, other: '_XsFilterProfileArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___eq__(self, other)

    def __ne__(self, other: '_XsFilterProfileArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_descriptor(self)

    def first(self) -> "XsFilterProfile":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_first(self)

    def last(self) -> "XsFilterProfile":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_last(self)

    def insert(self, item: 'XsFilterProfile', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsFilterProfile') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsFilterProfile') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsFilterProfile') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_setSize(self, count)

    def append(self, other: '_XsFilterProfileArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_append(self, other)

    def __assign__(self, other: '_XsFilterProfileArrayImpl') -> "XsArrayImpl< XsFilterProfile,g_xsFilterProfileArrayDescriptor,XsFilterProfileArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_empty(self)

    def swap(self, other: '_XsFilterProfileArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_swap(self, other)

    def find(self, needle: 'XsFilterProfile') -> "int":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsFilterProfile":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsFilterProfile') -> "void":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsFilterProfile') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsFilterProfileArray *":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsFilterProfileArray') -> "XsFilterProfileArray *":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsFilterProfileArray') -> "XsFilterProfileArray *":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsFilterProfileArray') -> "XsFilterProfileArray *":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsFilterProfileArray *":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsFilterProfileArray *":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsFilterProfileArray *":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsFilterProfile') -> "bool":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsFilterProfileArray *":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsFilterProfileArray *":
        return _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl___delitem__(self, index)
_XsFilterProfileArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsFilterProfileArrayImpl_swigregister
_XsFilterProfileArrayImpl_swigregister(_XsFilterProfileArrayImpl)

class _XsStringOutputTypeArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _XsStringOutputTypeArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _XsStringOutputTypeArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new__XsStringOutputTypeArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete__XsStringOutputTypeArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_clear(self)

    def __eq__(self, other: 'XsArrayImpl< XsStringOutputType,g_xsStringOutputTypeArrayDescriptor,XsStringOutputTypeArray >::ArrayImpl const &') -> "bool":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___eq__(self, other)

    def __ne__(self, other: 'XsArrayImpl< XsStringOutputType,g_xsStringOutputTypeArrayDescriptor,XsStringOutputTypeArray >::ArrayImpl const &') -> "bool":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_descriptor(self)

    def first(self) -> "XsStringOutputType":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_first(self)

    def last(self) -> "XsStringOutputType":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_last(self)

    def insert(self, item: 'XsStringOutputType const &', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsStringOutputType const &') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsStringOutputType const &') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsStringOutputType const *') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_setSize(self, count)

    def append(self, other: 'XsArrayImpl< XsStringOutputType,g_xsStringOutputTypeArrayDescriptor,XsStringOutputTypeArray >::ArrayImpl const &') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_append(self, other)

    def __assign__(self, other: 'XsArrayImpl< XsStringOutputType,g_xsStringOutputTypeArrayDescriptor,XsStringOutputTypeArray >::ArrayImpl const &') -> "XsArrayImpl< XsStringOutputType,g_xsStringOutputTypeArrayDescriptor,XsStringOutputTypeArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_empty(self)

    def swap(self, other: 'XsArrayImpl< XsStringOutputType,g_xsStringOutputTypeArrayDescriptor,XsStringOutputTypeArray >::ArrayImpl &') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_swap(self, other)

    def find(self, needle: 'XsStringOutputType const &') -> "int":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsStringOutputType":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsStringOutputType') -> "void":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsStringOutputType') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsStringOutputTypeArray *":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsStringOutputTypeArray') -> "XsStringOutputTypeArray *":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsStringOutputTypeArray') -> "XsStringOutputTypeArray *":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsStringOutputTypeArray') -> "XsStringOutputTypeArray *":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsStringOutputTypeArray *":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsStringOutputTypeArray *":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsStringOutputTypeArray *":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsStringOutputType') -> "bool":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsStringOutputTypeArray *":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsStringOutputTypeArray *":
        return _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl___delitem__(self, index)
_XsStringOutputTypeArrayImpl_swigregister = _xsensdeviceapi_py35_64._XsStringOutputTypeArrayImpl_swigregister
_XsStringOutputTypeArrayImpl_swigregister(_XsStringOutputTypeArrayImpl)

class XsIntArray(_XsIntArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsIntArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsIntArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsIntArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsIntArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsIntArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsIntArray___str__(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsIntArray
    __del__ = lambda self: None
XsIntArray_swigregister = _xsensdeviceapi_py35_64.XsIntArray_swigregister
XsIntArray_swigregister(XsIntArray)
g_xsIntArrayDescriptor = cvar.g_xsIntArrayDescriptor

XS_RSSI_MAX = _xsensdeviceapi_py35_64.XS_RSSI_MAX
XS_RSSI_UNKNOWN = _xsensdeviceapi_py35_64.XS_RSSI_UNKNOWN

def unbiased(raw: 'int') -> "int":
    return _xsensdeviceapi_py35_64.unbiased(raw)
unbiased = _xsensdeviceapi_py35_64.unbiased
XS_BID_MASTER = _xsensdeviceapi_py35_64.XS_BID_MASTER
XS_BID_BROADCAST = _xsensdeviceapi_py35_64.XS_BID_BROADCAST
XS_BID_MT = _xsensdeviceapi_py35_64.XS_BID_MT
XS_BID_INVALID = _xsensdeviceapi_py35_64.XS_BID_INVALID
XS_BID_DYNAMIC = _xsensdeviceapi_py35_64.XS_BID_DYNAMIC
XRM_StoreAlignmentMatrix = _xsensdeviceapi_py35_64.XRM_StoreAlignmentMatrix
XRM_Heading = _xsensdeviceapi_py35_64.XRM_Heading
XRM_Object = _xsensdeviceapi_py35_64.XRM_Object
XRM_Inclination = _xsensdeviceapi_py35_64.XRM_Inclination
XRM_Alignment = _xsensdeviceapi_py35_64.XRM_Alignment
XRM_Global = _xsensdeviceapi_py35_64.XRM_Global
XRM_DefaultHeading = _xsensdeviceapi_py35_64.XRM_DefaultHeading
XRM_DefaultInclination = _xsensdeviceapi_py35_64.XRM_DefaultInclination
XRM_DefaultAlignment = _xsensdeviceapi_py35_64.XRM_DefaultAlignment
XRM_None = _xsensdeviceapi_py35_64.XRM_None
class XsByteArray(_XsByteArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsByteArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsByteArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsByteArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsByteArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsByteArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def data(self, *args) -> "uint8_t const *":
        return _xsensdeviceapi_py35_64.XsByteArray_data(self, *args)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsByteArray
    __del__ = lambda self: None
XsByteArray_swigregister = _xsensdeviceapi_py35_64.XsByteArray_swigregister
XsByteArray_swigregister(XsByteArray)
bias = cvar.bias
max = cvar.max
unknown = cvar.unknown
maxUnbiased = cvar.maxUnbiased
unknownUnbiased = cvar.unknownUnbiased
g_xsByteArrayDescriptor = cvar.g_xsByteArrayDescriptor

XDI_None = _xsensdeviceapi_py35_64.XDI_None
XDI_TypeMask = _xsensdeviceapi_py35_64.XDI_TypeMask
XDI_FullTypeMask = _xsensdeviceapi_py35_64.XDI_FullTypeMask
XDI_FullMask = _xsensdeviceapi_py35_64.XDI_FullMask
XDI_FormatMask = _xsensdeviceapi_py35_64.XDI_FormatMask
XDI_DataFormatMask = _xsensdeviceapi_py35_64.XDI_DataFormatMask
XDI_SubFormatMask = _xsensdeviceapi_py35_64.XDI_SubFormatMask
XDI_SubFormatFloat = _xsensdeviceapi_py35_64.XDI_SubFormatFloat
XDI_SubFormatFp1220 = _xsensdeviceapi_py35_64.XDI_SubFormatFp1220
XDI_SubFormatFp1632 = _xsensdeviceapi_py35_64.XDI_SubFormatFp1632
XDI_SubFormatDouble = _xsensdeviceapi_py35_64.XDI_SubFormatDouble
XDI_TemperatureGroup = _xsensdeviceapi_py35_64.XDI_TemperatureGroup
XDI_Temperature = _xsensdeviceapi_py35_64.XDI_Temperature
XDI_TimestampGroup = _xsensdeviceapi_py35_64.XDI_TimestampGroup
XDI_UtcTime = _xsensdeviceapi_py35_64.XDI_UtcTime
XDI_PacketCounter = _xsensdeviceapi_py35_64.XDI_PacketCounter
XDI_Itow = _xsensdeviceapi_py35_64.XDI_Itow
XDI_GnssAge = _xsensdeviceapi_py35_64.XDI_GnssAge
XDI_PressureAge = _xsensdeviceapi_py35_64.XDI_PressureAge
XDI_SampleTimeFine = _xsensdeviceapi_py35_64.XDI_SampleTimeFine
XDI_SampleTimeCoarse = _xsensdeviceapi_py35_64.XDI_SampleTimeCoarse
XDI_FrameRange = _xsensdeviceapi_py35_64.XDI_FrameRange
XDI_PacketCounter8 = _xsensdeviceapi_py35_64.XDI_PacketCounter8
XDI_SampleTime64 = _xsensdeviceapi_py35_64.XDI_SampleTime64
XDI_OrientationGroup = _xsensdeviceapi_py35_64.XDI_OrientationGroup
XDI_CoordSysMask = _xsensdeviceapi_py35_64.XDI_CoordSysMask
XDI_CoordSysEnu = _xsensdeviceapi_py35_64.XDI_CoordSysEnu
XDI_CoordSysNed = _xsensdeviceapi_py35_64.XDI_CoordSysNed
XDI_CoordSysNwu = _xsensdeviceapi_py35_64.XDI_CoordSysNwu
XDI_Quaternion = _xsensdeviceapi_py35_64.XDI_Quaternion
XDI_RotationMatrix = _xsensdeviceapi_py35_64.XDI_RotationMatrix
XDI_EulerAngles = _xsensdeviceapi_py35_64.XDI_EulerAngles
XDI_PressureGroup = _xsensdeviceapi_py35_64.XDI_PressureGroup
XDI_BaroPressure = _xsensdeviceapi_py35_64.XDI_BaroPressure
XDI_AccelerationGroup = _xsensdeviceapi_py35_64.XDI_AccelerationGroup
XDI_DeltaV = _xsensdeviceapi_py35_64.XDI_DeltaV
XDI_Acceleration = _xsensdeviceapi_py35_64.XDI_Acceleration
XDI_FreeAcceleration = _xsensdeviceapi_py35_64.XDI_FreeAcceleration
XDI_AccelerationHR = _xsensdeviceapi_py35_64.XDI_AccelerationHR
XDI_PositionGroup = _xsensdeviceapi_py35_64.XDI_PositionGroup
XDI_AltitudeMsl = _xsensdeviceapi_py35_64.XDI_AltitudeMsl
XDI_AltitudeEllipsoid = _xsensdeviceapi_py35_64.XDI_AltitudeEllipsoid
XDI_PositionEcef = _xsensdeviceapi_py35_64.XDI_PositionEcef
XDI_LatLon = _xsensdeviceapi_py35_64.XDI_LatLon
XDI_SnapshotGroup = _xsensdeviceapi_py35_64.XDI_SnapshotGroup
XDI_RetransmissionMask = _xsensdeviceapi_py35_64.XDI_RetransmissionMask
XDI_RetransmissionFlag = _xsensdeviceapi_py35_64.XDI_RetransmissionFlag
XDI_AwindaSnapshot = _xsensdeviceapi_py35_64.XDI_AwindaSnapshot
XDI_FullSnapshot = _xsensdeviceapi_py35_64.XDI_FullSnapshot
XDI_GloveSnapshot = _xsensdeviceapi_py35_64.XDI_GloveSnapshot
XDI_GloveData = _xsensdeviceapi_py35_64.XDI_GloveData
XDI_GnssGroup = _xsensdeviceapi_py35_64.XDI_GnssGroup
XDI_GnssPvtData = _xsensdeviceapi_py35_64.XDI_GnssPvtData
XDI_GnssSatInfo = _xsensdeviceapi_py35_64.XDI_GnssSatInfo
XDI_AngularVelocityGroup = _xsensdeviceapi_py35_64.XDI_AngularVelocityGroup
XDI_RateOfTurn = _xsensdeviceapi_py35_64.XDI_RateOfTurn
XDI_DeltaQ = _xsensdeviceapi_py35_64.XDI_DeltaQ
XDI_RateOfTurnHR = _xsensdeviceapi_py35_64.XDI_RateOfTurnHR
XDI_RawSensorGroup = _xsensdeviceapi_py35_64.XDI_RawSensorGroup
XDI_RawUnsigned = _xsensdeviceapi_py35_64.XDI_RawUnsigned
XDI_RawSigned = _xsensdeviceapi_py35_64.XDI_RawSigned
XDI_RawAccGyrMagTemp = _xsensdeviceapi_py35_64.XDI_RawAccGyrMagTemp
XDI_RawGyroTemp = _xsensdeviceapi_py35_64.XDI_RawGyroTemp
XDI_RawAcc = _xsensdeviceapi_py35_64.XDI_RawAcc
XDI_RawGyr = _xsensdeviceapi_py35_64.XDI_RawGyr
XDI_RawMag = _xsensdeviceapi_py35_64.XDI_RawMag
XDI_RawDeltaQ = _xsensdeviceapi_py35_64.XDI_RawDeltaQ
XDI_RawDeltaV = _xsensdeviceapi_py35_64.XDI_RawDeltaV
XDI_RawBlob = _xsensdeviceapi_py35_64.XDI_RawBlob
XDI_AnalogInGroup = _xsensdeviceapi_py35_64.XDI_AnalogInGroup
XDI_AnalogIn1 = _xsensdeviceapi_py35_64.XDI_AnalogIn1
XDI_AnalogIn2 = _xsensdeviceapi_py35_64.XDI_AnalogIn2
XDI_MagneticGroup = _xsensdeviceapi_py35_64.XDI_MagneticGroup
XDI_MagneticField = _xsensdeviceapi_py35_64.XDI_MagneticField
XDI_MagneticFieldCorrected = _xsensdeviceapi_py35_64.XDI_MagneticFieldCorrected
XDI_VelocityGroup = _xsensdeviceapi_py35_64.XDI_VelocityGroup
XDI_VelocityXYZ = _xsensdeviceapi_py35_64.XDI_VelocityXYZ
XDI_StatusGroup = _xsensdeviceapi_py35_64.XDI_StatusGroup
XDI_StatusByte = _xsensdeviceapi_py35_64.XDI_StatusByte
XDI_StatusWord = _xsensdeviceapi_py35_64.XDI_StatusWord
XDI_Rssi = _xsensdeviceapi_py35_64.XDI_Rssi
XDI_DeviceId = _xsensdeviceapi_py35_64.XDI_DeviceId
XDI_LocationId = _xsensdeviceapi_py35_64.XDI_LocationId
XDI_IndicationGroup = _xsensdeviceapi_py35_64.XDI_IndicationGroup
XDI_TriggerIn1 = _xsensdeviceapi_py35_64.XDI_TriggerIn1
XDI_TriggerIn2 = _xsensdeviceapi_py35_64.XDI_TriggerIn2
XDI_MAX_FREQUENCY_VAL = _xsensdeviceapi_py35_64.XDI_MAX_FREQUENCY_VAL
XDIV_MaxFrequency = _xsensdeviceapi_py35_64.XDIV_MaxFrequency
XMID_InvalidMessage = _xsensdeviceapi_py35_64.XMID_InvalidMessage
XMID_ReqDid = _xsensdeviceapi_py35_64.XMID_ReqDid
XMID_DeviceId = _xsensdeviceapi_py35_64.XMID_DeviceId
XMID_Initbus = _xsensdeviceapi_py35_64.XMID_Initbus
XMID_InitBusResults = _xsensdeviceapi_py35_64.XMID_InitBusResults
XMID_ReqPeriod = _xsensdeviceapi_py35_64.XMID_ReqPeriod
XMID_ReqPeriodAck = _xsensdeviceapi_py35_64.XMID_ReqPeriodAck
XMID_SetPeriod = _xsensdeviceapi_py35_64.XMID_SetPeriod
XMID_SetPeriodAck = _xsensdeviceapi_py35_64.XMID_SetPeriodAck
XMID_SetBid = _xsensdeviceapi_py35_64.XMID_SetBid
XMID_SetBidAck = _xsensdeviceapi_py35_64.XMID_SetBidAck
XMID_AutoStart = _xsensdeviceapi_py35_64.XMID_AutoStart
XMID_AutoStartAck = _xsensdeviceapi_py35_64.XMID_AutoStartAck
XMID_BusPower = _xsensdeviceapi_py35_64.XMID_BusPower
XMID_BusPowerAck = _xsensdeviceapi_py35_64.XMID_BusPowerAck
XMID_ReqDataLength = _xsensdeviceapi_py35_64.XMID_ReqDataLength
XMID_DataLength = _xsensdeviceapi_py35_64.XMID_DataLength
XMID_ReqConfiguration = _xsensdeviceapi_py35_64.XMID_ReqConfiguration
XMID_Configuration = _xsensdeviceapi_py35_64.XMID_Configuration
XMID_RestoreFactoryDef = _xsensdeviceapi_py35_64.XMID_RestoreFactoryDef
XMID_RestoreFactoryDefAck = _xsensdeviceapi_py35_64.XMID_RestoreFactoryDefAck
XMID_GotoMeasurement = _xsensdeviceapi_py35_64.XMID_GotoMeasurement
XMID_GotoMeasurementAck = _xsensdeviceapi_py35_64.XMID_GotoMeasurementAck
XMID_ReqFirmwareRevision = _xsensdeviceapi_py35_64.XMID_ReqFirmwareRevision
XMID_FirmwareRevision = _xsensdeviceapi_py35_64.XMID_FirmwareRevision
XMID_ReqUniqueId = _xsensdeviceapi_py35_64.XMID_ReqUniqueId
XMID_UniqueId = _xsensdeviceapi_py35_64.XMID_UniqueId
XMID_ReqBodypackMode = _xsensdeviceapi_py35_64.XMID_ReqBodypackMode
XMID_ReqBodypackAck = _xsensdeviceapi_py35_64.XMID_ReqBodypackAck
XMID_SetBodypackMode = _xsensdeviceapi_py35_64.XMID_SetBodypackMode
XMID_SetBodypackModeAck = _xsensdeviceapi_py35_64.XMID_SetBodypackModeAck
XMID_ReqBaudrate = _xsensdeviceapi_py35_64.XMID_ReqBaudrate
XMID_ReqBaudrateAck = _xsensdeviceapi_py35_64.XMID_ReqBaudrateAck
XMID_SetBaudrate = _xsensdeviceapi_py35_64.XMID_SetBaudrate
XMID_SetBaudrateAck = _xsensdeviceapi_py35_64.XMID_SetBaudrateAck
XMID_ReqProductVariant = _xsensdeviceapi_py35_64.XMID_ReqProductVariant
XMID_ProductVariant = _xsensdeviceapi_py35_64.XMID_ProductVariant
XMID_ReqProductCode = _xsensdeviceapi_py35_64.XMID_ReqProductCode
XMID_ProductCode = _xsensdeviceapi_py35_64.XMID_ProductCode
XMID_ReqHardwareVersion = _xsensdeviceapi_py35_64.XMID_ReqHardwareVersion
XMID_HardwareVersion = _xsensdeviceapi_py35_64.XMID_HardwareVersion
XMID_ReqProcessingFlags = _xsensdeviceapi_py35_64.XMID_ReqProcessingFlags
XMID_ReqProcessingFlagsAck = _xsensdeviceapi_py35_64.XMID_ReqProcessingFlagsAck
XMID_SetProcessingFlags = _xsensdeviceapi_py35_64.XMID_SetProcessingFlags
XMID_SetProcessingFlagsAck = _xsensdeviceapi_py35_64.XMID_SetProcessingFlagsAck
XMID_SetNoRotation = _xsensdeviceapi_py35_64.XMID_SetNoRotation
XMID_SetNoRotationAck = _xsensdeviceapi_py35_64.XMID_SetNoRotationAck
XMID_RunSelfTest = _xsensdeviceapi_py35_64.XMID_RunSelfTest
XMID_SelfTestResults = _xsensdeviceapi_py35_64.XMID_SelfTestResults
XMID_ReqInputTrigger = _xsensdeviceapi_py35_64.XMID_ReqInputTrigger
XMID_ReqInputTriggerAck = _xsensdeviceapi_py35_64.XMID_ReqInputTriggerAck
XMID_SetInputTrigger = _xsensdeviceapi_py35_64.XMID_SetInputTrigger
XMID_SetInputTriggerAck = _xsensdeviceapi_py35_64.XMID_SetInputTriggerAck
XMID_ReqOutputTrigger = _xsensdeviceapi_py35_64.XMID_ReqOutputTrigger
XMID_ReqOutputTriggerAck = _xsensdeviceapi_py35_64.XMID_ReqOutputTriggerAck
XMID_SetOutputTrigger = _xsensdeviceapi_py35_64.XMID_SetOutputTrigger
XMID_SetOutputTriggerAck = _xsensdeviceapi_py35_64.XMID_SetOutputTriggerAck
XMID_SetSyncStationMode = _xsensdeviceapi_py35_64.XMID_SetSyncStationMode
XMID_SetSyncStationModeAck = _xsensdeviceapi_py35_64.XMID_SetSyncStationModeAck
XMID_ReqSyncStationMode = _xsensdeviceapi_py35_64.XMID_ReqSyncStationMode
XMID_ReqSyncStationModeAck = _xsensdeviceapi_py35_64.XMID_ReqSyncStationModeAck
XMID_SetSyncConfiguration = _xsensdeviceapi_py35_64.XMID_SetSyncConfiguration
XMID_SetSyncConfigurationAck = _xsensdeviceapi_py35_64.XMID_SetSyncConfigurationAck
XMID_ReqSyncConfiguration = _xsensdeviceapi_py35_64.XMID_ReqSyncConfiguration
XMID_SyncConfiguration = _xsensdeviceapi_py35_64.XMID_SyncConfiguration
XMID_DriverDisconnect = _xsensdeviceapi_py35_64.XMID_DriverDisconnect
XMID_DriverDisconnectAck = _xsensdeviceapi_py35_64.XMID_DriverDisconnectAck
XMID_GotoConfig = _xsensdeviceapi_py35_64.XMID_GotoConfig
XMID_GotoConfigAck = _xsensdeviceapi_py35_64.XMID_GotoConfigAck
XMID_MtData = _xsensdeviceapi_py35_64.XMID_MtData
XMID_BusData = _xsensdeviceapi_py35_64.XMID_BusData
XMID_PrepareData = _xsensdeviceapi_py35_64.XMID_PrepareData
XMID_ReqData = _xsensdeviceapi_py35_64.XMID_ReqData
XMID_ReqDataAck = _xsensdeviceapi_py35_64.XMID_ReqDataAck
XMID_MtData2 = _xsensdeviceapi_py35_64.XMID_MtData2
XMID_MtData2Ack = _xsensdeviceapi_py35_64.XMID_MtData2Ack
XMID_RequestControl = _xsensdeviceapi_py35_64.XMID_RequestControl
XMID_RequestControlAck = _xsensdeviceapi_py35_64.XMID_RequestControlAck
XMID_SetDataPort = _xsensdeviceapi_py35_64.XMID_SetDataPort
XMID_SetDataPortAck = _xsensdeviceapi_py35_64.XMID_SetDataPortAck
XMID_ReqRetransmission = _xsensdeviceapi_py35_64.XMID_ReqRetransmission
XMID_ReqRetransmissionAck = _xsensdeviceapi_py35_64.XMID_ReqRetransmissionAck
XMID_Wakeup = _xsensdeviceapi_py35_64.XMID_Wakeup
XMID_WakeupAck = _xsensdeviceapi_py35_64.XMID_WakeupAck
XMID_Reset = _xsensdeviceapi_py35_64.XMID_Reset
XMID_ResetAck = _xsensdeviceapi_py35_64.XMID_ResetAck
XMID_Error = _xsensdeviceapi_py35_64.XMID_Error
XMID_Warning = _xsensdeviceapi_py35_64.XMID_Warning
XMID_XmPowerOff = _xsensdeviceapi_py35_64.XMID_XmPowerOff
XMID_MasterIndication = _xsensdeviceapi_py35_64.XMID_MasterIndication
XMID_ReqOptionFlags = _xsensdeviceapi_py35_64.XMID_ReqOptionFlags
XMID_ReqOptionFlagsAck = _xsensdeviceapi_py35_64.XMID_ReqOptionFlagsAck
XMID_SetOptionFlags = _xsensdeviceapi_py35_64.XMID_SetOptionFlags
XMID_SetOptionFlagsAck = _xsensdeviceapi_py35_64.XMID_SetOptionFlagsAck
XMID_ReqStealthMode = _xsensdeviceapi_py35_64.XMID_ReqStealthMode
XMID_StealthMode = _xsensdeviceapi_py35_64.XMID_StealthMode
XMID_SetStealthMode = _xsensdeviceapi_py35_64.XMID_SetStealthMode
XMID_SetStealthModeAck = _xsensdeviceapi_py35_64.XMID_SetStealthModeAck
XMID_UserInterface = _xsensdeviceapi_py35_64.XMID_UserInterface
XMID_UserInterfaceAck = _xsensdeviceapi_py35_64.XMID_UserInterfaceAck
XMID_EndOfRecording = _xsensdeviceapi_py35_64.XMID_EndOfRecording
XMID_EndOfRecordingAck = _xsensdeviceapi_py35_64.XMID_EndOfRecordingAck
XMID_GotoTransparentMode = _xsensdeviceapi_py35_64.XMID_GotoTransparentMode
XMID_GotoTransparentModeAck = _xsensdeviceapi_py35_64.XMID_GotoTransparentModeAck
XMID_ReqDeviceCapabilities = _xsensdeviceapi_py35_64.XMID_ReqDeviceCapabilities
XMID_DeviceCapabilities = _xsensdeviceapi_py35_64.XMID_DeviceCapabilities
XMID_DiscardRetransmissions = _xsensdeviceapi_py35_64.XMID_DiscardRetransmissions
XMID_DiscardRetransmissionsAck = _xsensdeviceapi_py35_64.XMID_DiscardRetransmissionsAck
XMID_RunFactoryTest = _xsensdeviceapi_py35_64.XMID_RunFactoryTest
XMID_FactoryTestResults = _xsensdeviceapi_py35_64.XMID_FactoryTestResults
XMID_FactoryTestConnect = _xsensdeviceapi_py35_64.XMID_FactoryTestConnect
XMID_FactoryTestConnectAck = _xsensdeviceapi_py35_64.XMID_FactoryTestConnectAck
XMID_SetDataOutputDelay = _xsensdeviceapi_py35_64.XMID_SetDataOutputDelay
XMID_SetDataOutputDelayAck = _xsensdeviceapi_py35_64.XMID_SetDataOutputDelayAck
XMID_SetBodypackConfigFile = _xsensdeviceapi_py35_64.XMID_SetBodypackConfigFile
XMID_SetBodypackConfigFileAck = _xsensdeviceapi_py35_64.XMID_SetBodypackConfigFileAck
XMID_ReqObrStatus = _xsensdeviceapi_py35_64.XMID_ReqObrStatus
XMID_ObrStatus = _xsensdeviceapi_py35_64.XMID_ObrStatus
XMID_SetUtcTime = _xsensdeviceapi_py35_64.XMID_SetUtcTime
XMID_ReqUtcTime = _xsensdeviceapi_py35_64.XMID_ReqUtcTime
XMID_SetUtcTimeAck = _xsensdeviceapi_py35_64.XMID_SetUtcTimeAck
XMID_UtcTime = _xsensdeviceapi_py35_64.XMID_UtcTime
XMID_FactoryTestSensorTiming = _xsensdeviceapi_py35_64.XMID_FactoryTestSensorTiming
XMID_FactoryTestSensorTimingResults = _xsensdeviceapi_py35_64.XMID_FactoryTestSensorTimingResults
XMID_ReqAvailableFilterProfiles = _xsensdeviceapi_py35_64.XMID_ReqAvailableFilterProfiles
XMID_AvailableFilterProfiles = _xsensdeviceapi_py35_64.XMID_AvailableFilterProfiles
XMID_ReqFilterProfile = _xsensdeviceapi_py35_64.XMID_ReqFilterProfile
XMID_ReqFilterProfileAck = _xsensdeviceapi_py35_64.XMID_ReqFilterProfileAck
XMID_SetFilterProfile = _xsensdeviceapi_py35_64.XMID_SetFilterProfile
XMID_SetFilterProfileAck = _xsensdeviceapi_py35_64.XMID_SetFilterProfileAck
XMID_ReqGravityMagnitude = _xsensdeviceapi_py35_64.XMID_ReqGravityMagnitude
XMID_ReqGravityMagnitudeAck = _xsensdeviceapi_py35_64.XMID_ReqGravityMagnitudeAck
XMID_SetGravityMagnitude = _xsensdeviceapi_py35_64.XMID_SetGravityMagnitude
XMID_SetGravityMagnitudeAck = _xsensdeviceapi_py35_64.XMID_SetGravityMagnitudeAck
XMID_ReqGnssLeverArm = _xsensdeviceapi_py35_64.XMID_ReqGnssLeverArm
XMID_ReqGnssLeverArmAck = _xsensdeviceapi_py35_64.XMID_ReqGnssLeverArmAck
XMID_SetGnssLeverArm = _xsensdeviceapi_py35_64.XMID_SetGnssLeverArm
XMID_SetGnssLeverArmAck = _xsensdeviceapi_py35_64.XMID_SetGnssLeverArmAck
XMID_ReqMagneticField = _xsensdeviceapi_py35_64.XMID_ReqMagneticField
XMID_ReqMagneticFieldAck = _xsensdeviceapi_py35_64.XMID_ReqMagneticFieldAck
XMID_SetMagneticField = _xsensdeviceapi_py35_64.XMID_SetMagneticField
XMID_SetMagneticFieldAck = _xsensdeviceapi_py35_64.XMID_SetMagneticFieldAck
XMID_ReqReplayMode = _xsensdeviceapi_py35_64.XMID_ReqReplayMode
XMID_ReqReplayModeAck = _xsensdeviceapi_py35_64.XMID_ReqReplayModeAck
XMID_SetReplayMode = _xsensdeviceapi_py35_64.XMID_SetReplayMode
XMID_SetReplayModeAck = _xsensdeviceapi_py35_64.XMID_SetReplayModeAck
XMID_ReqLatLonAlt = _xsensdeviceapi_py35_64.XMID_ReqLatLonAlt
XMID_ReqLatLonAltAck = _xsensdeviceapi_py35_64.XMID_ReqLatLonAltAck
XMID_SetLatLonAlt = _xsensdeviceapi_py35_64.XMID_SetLatLonAlt
XMID_SetLatLonAltAck = _xsensdeviceapi_py35_64.XMID_SetLatLonAltAck
XMID_KeepAlive = _xsensdeviceapi_py35_64.XMID_KeepAlive
XMID_KeepAliveAck = _xsensdeviceapi_py35_64.XMID_KeepAliveAck
XMID_CloseConnection = _xsensdeviceapi_py35_64.XMID_CloseConnection
XMID_CloseConnectionAck = _xsensdeviceapi_py35_64.XMID_CloseConnectionAck
XMID_IccCommand = _xsensdeviceapi_py35_64.XMID_IccCommand
XMID_IccCommandAck = _xsensdeviceapi_py35_64.XMID_IccCommandAck
XMID_ReqGnssPlatform = _xsensdeviceapi_py35_64.XMID_ReqGnssPlatform
XMID_ReqGnssPlatformAck = _xsensdeviceapi_py35_64.XMID_ReqGnssPlatformAck
XMID_SetGnssPlatform = _xsensdeviceapi_py35_64.XMID_SetGnssPlatform
XMID_SetGnssPlatformAck = _xsensdeviceapi_py35_64.XMID_SetGnssPlatformAck
XMID_ReqConnectionSettings = _xsensdeviceapi_py35_64.XMID_ReqConnectionSettings
XMID_ReqConnectionSettingsAck = _xsensdeviceapi_py35_64.XMID_ReqConnectionSettingsAck
XMID_SetConnectionSettings = _xsensdeviceapi_py35_64.XMID_SetConnectionSettings
XMID_SetConnectionSettingsAck = _xsensdeviceapi_py35_64.XMID_SetConnectionSettingsAck
XMID_BodyPackBundle = _xsensdeviceapi_py35_64.XMID_BodyPackBundle
XMID_BodyPackBundleAck = _xsensdeviceapi_py35_64.XMID_BodyPackBundleAck
XMID_ReqStationOptions = _xsensdeviceapi_py35_64.XMID_ReqStationOptions
XMID_ReqStationOptionsAck = _xsensdeviceapi_py35_64.XMID_ReqStationOptionsAck
XMID_ReqErrorReport = _xsensdeviceapi_py35_64.XMID_ReqErrorReport
XMID_ErrorReport = _xsensdeviceapi_py35_64.XMID_ErrorReport
XMID_ReqXmErrorMode = _xsensdeviceapi_py35_64.XMID_ReqXmErrorMode
XMID_ReqXmErrorModeAck = _xsensdeviceapi_py35_64.XMID_ReqXmErrorModeAck
XMID_SetXmErrorMode = _xsensdeviceapi_py35_64.XMID_SetXmErrorMode
XMID_SetXmErrorModeAck = _xsensdeviceapi_py35_64.XMID_SetXmErrorModeAck
XMID_ReqBufferSize = _xsensdeviceapi_py35_64.XMID_ReqBufferSize
XMID_ReqBufferSizeAck = _xsensdeviceapi_py35_64.XMID_ReqBufferSizeAck
XMID_SetBufferSize = _xsensdeviceapi_py35_64.XMID_SetBufferSize
XMID_SetBufferSizeAck = _xsensdeviceapi_py35_64.XMID_SetBufferSizeAck
XMID_ReqHeading = _xsensdeviceapi_py35_64.XMID_ReqHeading
XMID_ReqHeadingAck = _xsensdeviceapi_py35_64.XMID_ReqHeadingAck
XMID_SetHeading = _xsensdeviceapi_py35_64.XMID_SetHeading
XMID_SetHeadingAck = _xsensdeviceapi_py35_64.XMID_SetHeadingAck
XMID_ReqLocationId = _xsensdeviceapi_py35_64.XMID_ReqLocationId
XMID_ReqLocationIdAck = _xsensdeviceapi_py35_64.XMID_ReqLocationIdAck
XMID_SetLocationId = _xsensdeviceapi_py35_64.XMID_SetLocationId
XMID_SetLocationIdAck = _xsensdeviceapi_py35_64.XMID_SetLocationIdAck
XMID_ReqExtOutputMode = _xsensdeviceapi_py35_64.XMID_ReqExtOutputMode
XMID_ReqExtOutputModeAck = _xsensdeviceapi_py35_64.XMID_ReqExtOutputModeAck
XMID_SetExtOutputMode = _xsensdeviceapi_py35_64.XMID_SetExtOutputMode
XMID_SetExtOutputModeAck = _xsensdeviceapi_py35_64.XMID_SetExtOutputModeAck
XMID_ReqBatteryLevel = _xsensdeviceapi_py35_64.XMID_ReqBatteryLevel
XMID_Batterylevel = _xsensdeviceapi_py35_64.XMID_Batterylevel
XMID_ReqInitTrackMode = _xsensdeviceapi_py35_64.XMID_ReqInitTrackMode
XMID_ReqInitTrackModeAck = _xsensdeviceapi_py35_64.XMID_ReqInitTrackModeAck
XMID_SetInitTrackMode = _xsensdeviceapi_py35_64.XMID_SetInitTrackMode
XMID_SetInitTrackModeAck = _xsensdeviceapi_py35_64.XMID_SetInitTrackModeAck
XMID_ReqMasterSettings = _xsensdeviceapi_py35_64.XMID_ReqMasterSettings
XMID_MasterSettings = _xsensdeviceapi_py35_64.XMID_MasterSettings
XMID_StoreFilterState = _xsensdeviceapi_py35_64.XMID_StoreFilterState
XMID_StoreFilterStateAck = _xsensdeviceapi_py35_64.XMID_StoreFilterStateAck
XMID_ReqPortConfig = _xsensdeviceapi_py35_64.XMID_ReqPortConfig
XMID_SetPortConfig = _xsensdeviceapi_py35_64.XMID_SetPortConfig
XMID_PortConfig = _xsensdeviceapi_py35_64.XMID_PortConfig
XMID_SetPortConfigAck = _xsensdeviceapi_py35_64.XMID_SetPortConfigAck
XMID_ReqStringOutputType = _xsensdeviceapi_py35_64.XMID_ReqStringOutputType
XMID_ReqStringOutputTypeAck = _xsensdeviceapi_py35_64.XMID_ReqStringOutputTypeAck
XMID_SetStringOutputType = _xsensdeviceapi_py35_64.XMID_SetStringOutputType
XMID_SetStringOutputTypeAck = _xsensdeviceapi_py35_64.XMID_SetStringOutputTypeAck
XMID_ReqStringOutputConfig = _xsensdeviceapi_py35_64.XMID_ReqStringOutputConfig
XMID_ReqStringOutputConfigAck = _xsensdeviceapi_py35_64.XMID_ReqStringOutputConfigAck
XMID_SetStringOutputConfig = _xsensdeviceapi_py35_64.XMID_SetStringOutputConfig
XMID_SetStringOutputConfigAck = _xsensdeviceapi_py35_64.XMID_SetStringOutputConfigAck
XMID_ReqEmts = _xsensdeviceapi_py35_64.XMID_ReqEmts
XMID_EmtsData = _xsensdeviceapi_py35_64.XMID_EmtsData
XMID_UpdateFilterProfile = _xsensdeviceapi_py35_64.XMID_UpdateFilterProfile
XMID_UpdateFilterProfileAck = _xsensdeviceapi_py35_64.XMID_UpdateFilterProfileAck
XMID_RestoreEmts = _xsensdeviceapi_py35_64.XMID_RestoreEmts
XMID_RestoreEmtsAck = _xsensdeviceapi_py35_64.XMID_RestoreEmtsAck
XMID_StoreEmts = _xsensdeviceapi_py35_64.XMID_StoreEmts
XMID_StoreEmtsAck = _xsensdeviceapi_py35_64.XMID_StoreEmtsAck
XMID_ClockSyncCommand = _xsensdeviceapi_py35_64.XMID_ClockSyncCommand
XMID_ClockSyncCommandAck = _xsensdeviceapi_py35_64.XMID_ClockSyncCommandAck
XMID_ReqActiveClockCorrection = _xsensdeviceapi_py35_64.XMID_ReqActiveClockCorrection
XMID_ActiveClockCorrection = _xsensdeviceapi_py35_64.XMID_ActiveClockCorrection
XMID_StoreActiveClockCorrection = _xsensdeviceapi_py35_64.XMID_StoreActiveClockCorrection
XMID_StoreActiveClockCorrectionAck = _xsensdeviceapi_py35_64.XMID_StoreActiveClockCorrectionAck
XMID_ReqFilterSettings = _xsensdeviceapi_py35_64.XMID_ReqFilterSettings
XMID_ReqFilterSettingsAck = _xsensdeviceapi_py35_64.XMID_ReqFilterSettingsAck
XMID_SetFilterSettings = _xsensdeviceapi_py35_64.XMID_SetFilterSettings
XMID_SetFilterSettingsAck = _xsensdeviceapi_py35_64.XMID_SetFilterSettingsAck
XMID_ReqAmd = _xsensdeviceapi_py35_64.XMID_ReqAmd
XMID_ReqAmdAck = _xsensdeviceapi_py35_64.XMID_ReqAmdAck
XMID_SetAmd = _xsensdeviceapi_py35_64.XMID_SetAmd
XMID_SetAmdAck = _xsensdeviceapi_py35_64.XMID_SetAmdAck
XMID_ResetOrientation = _xsensdeviceapi_py35_64.XMID_ResetOrientation
XMID_ResetOrientationAck = _xsensdeviceapi_py35_64.XMID_ResetOrientationAck
XMID_ReqGnssStatus = _xsensdeviceapi_py35_64.XMID_ReqGnssStatus
XMID_GnssStatus = _xsensdeviceapi_py35_64.XMID_GnssStatus
XMID_AdjustUtcTime = _xsensdeviceapi_py35_64.XMID_AdjustUtcTime
XMID_AdjustUtcTimeAck = _xsensdeviceapi_py35_64.XMID_AdjustUtcTimeAck
XMID_ReqManufacturerId = _xsensdeviceapi_py35_64.XMID_ReqManufacturerId
XMID_SetManufacturerId = _xsensdeviceapi_py35_64.XMID_SetManufacturerId
XMID_ManufacturerId = _xsensdeviceapi_py35_64.XMID_ManufacturerId
XMID_SetManufacturerIdAck = _xsensdeviceapi_py35_64.XMID_SetManufacturerIdAck
XMID_ReqGnssReceiverSettings = _xsensdeviceapi_py35_64.XMID_ReqGnssReceiverSettings
XMID_ReqGnssReceiverSettingsAck = _xsensdeviceapi_py35_64.XMID_ReqGnssReceiverSettingsAck
XMID_SetGnssReceiverSettings = _xsensdeviceapi_py35_64.XMID_SetGnssReceiverSettings
XMID_SetGnssReceiverSettingsAck = _xsensdeviceapi_py35_64.XMID_SetGnssReceiverSettingsAck
XMID_ReqAccessControlList = _xsensdeviceapi_py35_64.XMID_ReqAccessControlList
XMID_AccessControlList = _xsensdeviceapi_py35_64.XMID_AccessControlList
XMID_SetAccessControlList = _xsensdeviceapi_py35_64.XMID_SetAccessControlList
XMID_SetAccessControlListAck = _xsensdeviceapi_py35_64.XMID_SetAccessControlListAck
XMID_ScanChannels = _xsensdeviceapi_py35_64.XMID_ScanChannels
XMID_ScanChannelsAck = _xsensdeviceapi_py35_64.XMID_ScanChannelsAck
XMID_EnableMaster = _xsensdeviceapi_py35_64.XMID_EnableMaster
XMID_EnableMasterAck = _xsensdeviceapi_py35_64.XMID_EnableMasterAck
XMID_DisableMaster = _xsensdeviceapi_py35_64.XMID_DisableMaster
XMID_DisableMasterAck = _xsensdeviceapi_py35_64.XMID_DisableMasterAck
XMID_ReqRadioChannel = _xsensdeviceapi_py35_64.XMID_ReqRadioChannel
XMID_ReqRadioChannelAck = _xsensdeviceapi_py35_64.XMID_ReqRadioChannelAck
XMID_SetClientPriority = _xsensdeviceapi_py35_64.XMID_SetClientPriority
XMID_SetClientPriorityAck = _xsensdeviceapi_py35_64.XMID_SetClientPriorityAck
XMID_ReqClientPriority = _xsensdeviceapi_py35_64.XMID_ReqClientPriority
XMID_ReqClientPriorityAck = _xsensdeviceapi_py35_64.XMID_ReqClientPriorityAck
XMID_SetWirelessConfig = _xsensdeviceapi_py35_64.XMID_SetWirelessConfig
XMID_SetWirelessConfigAck = _xsensdeviceapi_py35_64.XMID_SetWirelessConfigAck
XMID_ReqWirelessConfig = _xsensdeviceapi_py35_64.XMID_ReqWirelessConfig
XMID_ReqWirelessConfigAck = _xsensdeviceapi_py35_64.XMID_ReqWirelessConfigAck
XMID_UpdateBias = _xsensdeviceapi_py35_64.XMID_UpdateBias
XMID_UpdateBiasAck = _xsensdeviceapi_py35_64.XMID_UpdateBiasAck
XMID_ToggleIoPins = _xsensdeviceapi_py35_64.XMID_ToggleIoPins
XMID_ToggleIoPinsAck = _xsensdeviceapi_py35_64.XMID_ToggleIoPinsAck
XMID_GotoOperational = _xsensdeviceapi_py35_64.XMID_GotoOperational
XMID_GotoOperationalAck = _xsensdeviceapi_py35_64.XMID_GotoOperationalAck
XMID_SetTransportMode = _xsensdeviceapi_py35_64.XMID_SetTransportMode
XMID_SetTransportModeAck = _xsensdeviceapi_py35_64.XMID_SetTransportModeAck
XMID_ReqTransportMode = _xsensdeviceapi_py35_64.XMID_ReqTransportMode
XMID_ReqTransportModeAck = _xsensdeviceapi_py35_64.XMID_ReqTransportModeAck
XMID_AcceptMtw = _xsensdeviceapi_py35_64.XMID_AcceptMtw
XMID_AcceptMtwAck = _xsensdeviceapi_py35_64.XMID_AcceptMtwAck
XMID_RejectMtw = _xsensdeviceapi_py35_64.XMID_RejectMtw
XMID_RejectMtwAck = _xsensdeviceapi_py35_64.XMID_RejectMtwAck
XMID_InfoRequest = _xsensdeviceapi_py35_64.XMID_InfoRequest
XMID_InfoRequestAck = _xsensdeviceapi_py35_64.XMID_InfoRequestAck
XMID_ReqFrameRates = _xsensdeviceapi_py35_64.XMID_ReqFrameRates
XMID_ReqFrameRatesAck = _xsensdeviceapi_py35_64.XMID_ReqFrameRatesAck
XMID_StartRecording = _xsensdeviceapi_py35_64.XMID_StartRecording
XMID_StartRecordingAck = _xsensdeviceapi_py35_64.XMID_StartRecordingAck
XMID_StopRecording = _xsensdeviceapi_py35_64.XMID_StopRecording
XMID_StopRecordingAck = _xsensdeviceapi_py35_64.XMID_StopRecordingAck
XMID_ReqOutputConfiguration = _xsensdeviceapi_py35_64.XMID_ReqOutputConfiguration
XMID_ReqOutputConfigurationAck = _xsensdeviceapi_py35_64.XMID_ReqOutputConfigurationAck
XMID_SetOutputConfiguration = _xsensdeviceapi_py35_64.XMID_SetOutputConfiguration
XMID_SetOutputConfigurationAck = _xsensdeviceapi_py35_64.XMID_SetOutputConfigurationAck
XMID_ReqOutputMode = _xsensdeviceapi_py35_64.XMID_ReqOutputMode
XMID_ReqOutputModeAck = _xsensdeviceapi_py35_64.XMID_ReqOutputModeAck
XMID_SetOutputMode = _xsensdeviceapi_py35_64.XMID_SetOutputMode
XMID_SetOutputModeAck = _xsensdeviceapi_py35_64.XMID_SetOutputModeAck
XMID_ReqOutputSettings = _xsensdeviceapi_py35_64.XMID_ReqOutputSettings
XMID_ReqOutputSettingsAck = _xsensdeviceapi_py35_64.XMID_ReqOutputSettingsAck
XMID_SetOutputSettings = _xsensdeviceapi_py35_64.XMID_SetOutputSettings
XMID_SetOutputSettingsAck = _xsensdeviceapi_py35_64.XMID_SetOutputSettingsAck
XMID_ReqOutputSkipFactor = _xsensdeviceapi_py35_64.XMID_ReqOutputSkipFactor
XMID_ReqOutputSkipFactorAck = _xsensdeviceapi_py35_64.XMID_ReqOutputSkipFactorAck
XMID_SetOutputSkipFactor = _xsensdeviceapi_py35_64.XMID_SetOutputSkipFactor
XMID_SetOutputSkipFactorAck = _xsensdeviceapi_py35_64.XMID_SetOutputSkipFactorAck
XMID_ReqErrorMode = _xsensdeviceapi_py35_64.XMID_ReqErrorMode
XMID_ReqErrorModeAck = _xsensdeviceapi_py35_64.XMID_ReqErrorModeAck
XMID_SetErrorMode = _xsensdeviceapi_py35_64.XMID_SetErrorMode
XMID_SetErrorModeAck = _xsensdeviceapi_py35_64.XMID_SetErrorModeAck
XMID_ReqTransmitDelay = _xsensdeviceapi_py35_64.XMID_ReqTransmitDelay
XMID_ReqTransmitDelayAck = _xsensdeviceapi_py35_64.XMID_ReqTransmitDelayAck
XMID_SetTransmitDelay = _xsensdeviceapi_py35_64.XMID_SetTransmitDelay
XMID_SetTransmitDelayAck = _xsensdeviceapi_py35_64.XMID_SetTransmitDelayAck
XMID_SetMfmResults = _xsensdeviceapi_py35_64.XMID_SetMfmResults
XMID_SetMfmResultsAck = _xsensdeviceapi_py35_64.XMID_SetMfmResultsAck
XMID_ReqObjectAlignment = _xsensdeviceapi_py35_64.XMID_ReqObjectAlignment
XMID_ReqObjectAlignmentAck = _xsensdeviceapi_py35_64.XMID_ReqObjectAlignmentAck
XMID_SetObjectAlignment = _xsensdeviceapi_py35_64.XMID_SetObjectAlignment
XMID_SetObjectAlignmentAck = _xsensdeviceapi_py35_64.XMID_SetObjectAlignmentAck
XMID_ForwardGnssData = _xsensdeviceapi_py35_64.XMID_ForwardGnssData
XMID_ForwardGnssDataAck = _xsensdeviceapi_py35_64.XMID_ForwardGnssDataAck
XMID_ReqCanConfig = _xsensdeviceapi_py35_64.XMID_ReqCanConfig
XMID_SetCanConfig = _xsensdeviceapi_py35_64.XMID_SetCanConfig
XMID_CanConfig = _xsensdeviceapi_py35_64.XMID_CanConfig
XMID_SetCanConfigAck = _xsensdeviceapi_py35_64.XMID_SetCanConfigAck
XMID_ReqCanOutputConfig = _xsensdeviceapi_py35_64.XMID_ReqCanOutputConfig
XMID_SetCanOutputConfig = _xsensdeviceapi_py35_64.XMID_SetCanOutputConfig
XMID_CanOutputConfig = _xsensdeviceapi_py35_64.XMID_CanOutputConfig
XMID_SetCanOutputConfigAck = _xsensdeviceapi_py35_64.XMID_SetCanOutputConfigAck
XMID_ReqAlignmentRotation = _xsensdeviceapi_py35_64.XMID_ReqAlignmentRotation
XMID_ReqAlignmentRotationAck = _xsensdeviceapi_py35_64.XMID_ReqAlignmentRotationAck
XMID_SetAlignmentRotation = _xsensdeviceapi_py35_64.XMID_SetAlignmentRotation
XMID_SetAlignmentRotationAck = _xsensdeviceapi_py35_64.XMID_SetAlignmentRotationAck
XMID_ExtensionReserved1 = _xsensdeviceapi_py35_64.XMID_ExtensionReserved1
XMID_ExtensionReserved2 = _xsensdeviceapi_py35_64.XMID_ExtensionReserved2
XMID_SetDeviceIdContext = _xsensdeviceapi_py35_64.XMID_SetDeviceIdContext
XMID_SetDeviceIdContextAck = _xsensdeviceapi_py35_64.XMID_SetDeviceIdContextAck
XRV_OK = _xsensdeviceapi_py35_64.XRV_OK
XRV_NOBUS = _xsensdeviceapi_py35_64.XRV_NOBUS
XRV_BUSNOTREADY = _xsensdeviceapi_py35_64.XRV_BUSNOTREADY
XRV_INVALIDPERIOD = _xsensdeviceapi_py35_64.XRV_INVALIDPERIOD
XRV_INVALIDMSG = _xsensdeviceapi_py35_64.XRV_INVALIDMSG
XRV_INITBUSFAIL1 = _xsensdeviceapi_py35_64.XRV_INITBUSFAIL1
XRV_INITBUSFAIL2 = _xsensdeviceapi_py35_64.XRV_INITBUSFAIL2
XRV_INITBUSFAIL3 = _xsensdeviceapi_py35_64.XRV_INITBUSFAIL3
XRV_SETBIDFAIL1 = _xsensdeviceapi_py35_64.XRV_SETBIDFAIL1
XRV_SETBIDFAIL2 = _xsensdeviceapi_py35_64.XRV_SETBIDFAIL2
XRV_MEASUREMENTFAIL1 = _xsensdeviceapi_py35_64.XRV_MEASUREMENTFAIL1
XRV_MEASUREMENTFAIL2 = _xsensdeviceapi_py35_64.XRV_MEASUREMENTFAIL2
XRV_MEASUREMENTFAIL3 = _xsensdeviceapi_py35_64.XRV_MEASUREMENTFAIL3
XRV_MEASUREMENTFAIL4 = _xsensdeviceapi_py35_64.XRV_MEASUREMENTFAIL4
XRV_MEASUREMENTFAIL5 = _xsensdeviceapi_py35_64.XRV_MEASUREMENTFAIL5
XRV_MEASUREMENTFAIL6 = _xsensdeviceapi_py35_64.XRV_MEASUREMENTFAIL6
XRV_TIMEROVERFLOW = _xsensdeviceapi_py35_64.XRV_TIMEROVERFLOW
XRV_BAUDRATEINVALID = _xsensdeviceapi_py35_64.XRV_BAUDRATEINVALID
XRV_INVALIDPARAM = _xsensdeviceapi_py35_64.XRV_INVALIDPARAM
XRV_MEASUREMENTFAIL7 = _xsensdeviceapi_py35_64.XRV_MEASUREMENTFAIL7
XRV_MEASUREMENTFAIL8 = _xsensdeviceapi_py35_64.XRV_MEASUREMENTFAIL8
XRV_WIRELESSFAIL = _xsensdeviceapi_py35_64.XRV_WIRELESSFAIL
XRV_DEVICEERROR = _xsensdeviceapi_py35_64.XRV_DEVICEERROR
XRV_DATAOVERFLOW = _xsensdeviceapi_py35_64.XRV_DATAOVERFLOW
XRV_BUFFEROVERFLOW = _xsensdeviceapi_py35_64.XRV_BUFFEROVERFLOW
XRV_EXTTRIGGERERROR = _xsensdeviceapi_py35_64.XRV_EXTTRIGGERERROR
XRV_SAMPLESTREAMERROR = _xsensdeviceapi_py35_64.XRV_SAMPLESTREAMERROR
XRV_POWER_DIP = _xsensdeviceapi_py35_64.XRV_POWER_DIP
XRV_POWER_OVERCURRENT = _xsensdeviceapi_py35_64.XRV_POWER_OVERCURRENT
XRV_OVERHEATING = _xsensdeviceapi_py35_64.XRV_OVERHEATING
XRV_BATTERYLOW = _xsensdeviceapi_py35_64.XRV_BATTERYLOW
XRV_INVALIDFILTERPROFILE = _xsensdeviceapi_py35_64.XRV_INVALIDFILTERPROFILE
XRV_INVALIDSTOREDSETTINGS = _xsensdeviceapi_py35_64.XRV_INVALIDSTOREDSETTINGS
XRV_ACCESSDENIED = _xsensdeviceapi_py35_64.XRV_ACCESSDENIED
XRV_FILEERROR = _xsensdeviceapi_py35_64.XRV_FILEERROR
XRV_OUTPUTCONFIGERROR = _xsensdeviceapi_py35_64.XRV_OUTPUTCONFIGERROR
XRV_ERROR = _xsensdeviceapi_py35_64.XRV_ERROR
XRV_NOTIMPLEMENTED = _xsensdeviceapi_py35_64.XRV_NOTIMPLEMENTED
XRV_TIMEOUT = _xsensdeviceapi_py35_64.XRV_TIMEOUT
XRV_TIMEOUTNODATA = _xsensdeviceapi_py35_64.XRV_TIMEOUTNODATA
XRV_CHECKSUMFAULT = _xsensdeviceapi_py35_64.XRV_CHECKSUMFAULT
XRV_OUTOFMEMORY = _xsensdeviceapi_py35_64.XRV_OUTOFMEMORY
XRV_NOTFOUND = _xsensdeviceapi_py35_64.XRV_NOTFOUND
XRV_UNEXPECTEDMSG = _xsensdeviceapi_py35_64.XRV_UNEXPECTEDMSG
XRV_INVALIDID = _xsensdeviceapi_py35_64.XRV_INVALIDID
XRV_INVALIDOPERATION = _xsensdeviceapi_py35_64.XRV_INVALIDOPERATION
XRV_INSUFFICIENTSPACE = _xsensdeviceapi_py35_64.XRV_INSUFFICIENTSPACE
XRV_INPUTCANNOTBEOPENED = _xsensdeviceapi_py35_64.XRV_INPUTCANNOTBEOPENED
XRV_OUTPUTCANNOTBEOPENED = _xsensdeviceapi_py35_64.XRV_OUTPUTCANNOTBEOPENED
XRV_ALREADYOPEN = _xsensdeviceapi_py35_64.XRV_ALREADYOPEN
XRV_ENDOFFILE = _xsensdeviceapi_py35_64.XRV_ENDOFFILE
XRV_COULDNOTREADSETTINGS = _xsensdeviceapi_py35_64.XRV_COULDNOTREADSETTINGS
XRV_NODATA = _xsensdeviceapi_py35_64.XRV_NODATA
XRV_READONLY = _xsensdeviceapi_py35_64.XRV_READONLY
XRV_NULLPTR = _xsensdeviceapi_py35_64.XRV_NULLPTR
XRV_INSUFFICIENTDATA = _xsensdeviceapi_py35_64.XRV_INSUFFICIENTDATA
XRV_BUSY = _xsensdeviceapi_py35_64.XRV_BUSY
XRV_INVALIDINSTANCE = _xsensdeviceapi_py35_64.XRV_INVALIDINSTANCE
XRV_DATACORRUPT = _xsensdeviceapi_py35_64.XRV_DATACORRUPT
XRV_READINITFAILED = _xsensdeviceapi_py35_64.XRV_READINITFAILED
XRV_NOXMFOUND = _xsensdeviceapi_py35_64.XRV_NOXMFOUND
XRV_DEVICECOUNTZERO = _xsensdeviceapi_py35_64.XRV_DEVICECOUNTZERO
XRV_MTLOCATIONINVALID = _xsensdeviceapi_py35_64.XRV_MTLOCATIONINVALID
XRV_INSUFFICIENTMTS = _xsensdeviceapi_py35_64.XRV_INSUFFICIENTMTS
XRV_INITFUSIONFAILED = _xsensdeviceapi_py35_64.XRV_INITFUSIONFAILED
XRV_OTHER = _xsensdeviceapi_py35_64.XRV_OTHER
XRV_NOFILEOPEN = _xsensdeviceapi_py35_64.XRV_NOFILEOPEN
XRV_NOPORTOPEN = _xsensdeviceapi_py35_64.XRV_NOPORTOPEN
XRV_NOFILEORPORTOPEN = _xsensdeviceapi_py35_64.XRV_NOFILEORPORTOPEN
XRV_PORTNOTFOUND = _xsensdeviceapi_py35_64.XRV_PORTNOTFOUND
XRV_INITPORTFAILED = _xsensdeviceapi_py35_64.XRV_INITPORTFAILED
XRV_CALIBRATIONFAILED = _xsensdeviceapi_py35_64.XRV_CALIBRATIONFAILED
XRV_CONFIGCHECKFAIL = _xsensdeviceapi_py35_64.XRV_CONFIGCHECKFAIL
XRV_ALREADYDONE = _xsensdeviceapi_py35_64.XRV_ALREADYDONE
XRV_SYNC_SINGLE_SLAVE = _xsensdeviceapi_py35_64.XRV_SYNC_SINGLE_SLAVE
XRV_SYNC_SECOND_MASTER = _xsensdeviceapi_py35_64.XRV_SYNC_SECOND_MASTER
XRV_SYNC_NO_SYNC = _xsensdeviceapi_py35_64.XRV_SYNC_NO_SYNC
XRV_SYNC_NO_MASTER = _xsensdeviceapi_py35_64.XRV_SYNC_NO_MASTER
XRV_SYNC_DATA_MISSING = _xsensdeviceapi_py35_64.XRV_SYNC_DATA_MISSING
XRV_VERSION_TOO_LOW = _xsensdeviceapi_py35_64.XRV_VERSION_TOO_LOW
XRV_VERSION_PROBLEM = _xsensdeviceapi_py35_64.XRV_VERSION_PROBLEM
XRV_ABORTED = _xsensdeviceapi_py35_64.XRV_ABORTED
XRV_UNSUPPORTED = _xsensdeviceapi_py35_64.XRV_UNSUPPORTED
XRV_PACKETCOUNTERMISSED = _xsensdeviceapi_py35_64.XRV_PACKETCOUNTERMISSED
XRV_MEASUREMENTFAILED = _xsensdeviceapi_py35_64.XRV_MEASUREMENTFAILED
XRV_STARTRECORDINGFAILED = _xsensdeviceapi_py35_64.XRV_STARTRECORDINGFAILED
XRV_STOPRECORDINGFAILED = _xsensdeviceapi_py35_64.XRV_STOPRECORDINGFAILED
XRV_RADIO_CHANNEL_IN_USE = _xsensdeviceapi_py35_64.XRV_RADIO_CHANNEL_IN_USE
XRV_UNEXPECTED_DISCONNECT = _xsensdeviceapi_py35_64.XRV_UNEXPECTED_DISCONNECT
XRV_TOO_MANY_CONNECTED_TRACKERS = _xsensdeviceapi_py35_64.XRV_TOO_MANY_CONNECTED_TRACKERS
XRV_GOTOCONFIGFAILED = _xsensdeviceapi_py35_64.XRV_GOTOCONFIGFAILED
XRV_OUTOFRANGE = _xsensdeviceapi_py35_64.XRV_OUTOFRANGE
XRV_BACKINRANGE = _xsensdeviceapi_py35_64.XRV_BACKINRANGE
XRV_EXPECTED_DISCONNECT = _xsensdeviceapi_py35_64.XRV_EXPECTED_DISCONNECT
XRV_RESTORE_COMMUNICATION_FAILED = _xsensdeviceapi_py35_64.XRV_RESTORE_COMMUNICATION_FAILED
XRV_RESTORE_COMMUNICATION_STOPPED = _xsensdeviceapi_py35_64.XRV_RESTORE_COMMUNICATION_STOPPED
XRV_EXPECTED_CONNECT = _xsensdeviceapi_py35_64.XRV_EXPECTED_CONNECT
XRV_SHUTTINGDOWN = _xsensdeviceapi_py35_64.XRV_SHUTTINGDOWN
XRV_GNSSCONFIGURATIONERROR = _xsensdeviceapi_py35_64.XRV_GNSSCONFIGURATIONERROR
XRV_GNSSCOMMTIMEOUT = _xsensdeviceapi_py35_64.XRV_GNSSCOMMTIMEOUT
XRV_GNSSERROR = _xsensdeviceapi_py35_64.XRV_GNSSERROR
XRV_DEVICE_NOT_CALIBRATED = _xsensdeviceapi_py35_64.XRV_DEVICE_NOT_CALIBRATED
XERR_Unknown = _xsensdeviceapi_py35_64.XERR_Unknown
XERR_ImcuTimeout = _xsensdeviceapi_py35_64.XERR_ImcuTimeout
XERR_ImcuSettingsInvalid = _xsensdeviceapi_py35_64.XERR_ImcuSettingsInvalid
XERR_ImcuSettingsFailure = _xsensdeviceapi_py35_64.XERR_ImcuSettingsFailure
XERR_ImcuEmtsWriteFailure = _xsensdeviceapi_py35_64.XERR_ImcuEmtsWriteFailure
XERR_ImcuEmtsReadFailure = _xsensdeviceapi_py35_64.XERR_ImcuEmtsReadFailure
XERR_DspCrashed = _xsensdeviceapi_py35_64.XERR_DspCrashed
XERR_DspBootingTimeout = _xsensdeviceapi_py35_64.XERR_DspBootingTimeout
XERR_DspSettingsInvalid = _xsensdeviceapi_py35_64.XERR_DspSettingsInvalid

def XsResultValueToString(result: 'XsResultValue') -> "char const *":
    return _xsensdeviceapi_py35_64.XsResultValueToString(result)
XsResultValueToString = _xsensdeviceapi_py35_64.XsResultValueToString
XS_PREAMBLE = _xsensdeviceapi_py35_64.XS_PREAMBLE
XS_EXTLENCODE = _xsensdeviceapi_py35_64.XS_EXTLENCODE
XS_LEN_MSGHEADER = _xsensdeviceapi_py35_64.XS_LEN_MSGHEADER
XS_LEN_MSGEXTHEADER = _xsensdeviceapi_py35_64.XS_LEN_MSGEXTHEADER
XS_LEN_MSGHEADERCS = _xsensdeviceapi_py35_64.XS_LEN_MSGHEADERCS
XS_LEN_MSGEXTHEADERCS = _xsensdeviceapi_py35_64.XS_LEN_MSGEXTHEADERCS
XS_LEN_CHECKSUM = _xsensdeviceapi_py35_64.XS_LEN_CHECKSUM
XS_LEN_UNSIGSHORT = _xsensdeviceapi_py35_64.XS_LEN_UNSIGSHORT
XS_LEN_UNSIGINT = _xsensdeviceapi_py35_64.XS_LEN_UNSIGINT
XS_LEN_FLOAT = _xsensdeviceapi_py35_64.XS_LEN_FLOAT
XS_MAXDATALEN = _xsensdeviceapi_py35_64.XS_MAXDATALEN
XS_MAXSHORTDATALEN = _xsensdeviceapi_py35_64.XS_MAXSHORTDATALEN
XS_MAXMSGLEN = _xsensdeviceapi_py35_64.XS_MAXMSGLEN
XS_MAXSHORTMSGLEN = _xsensdeviceapi_py35_64.XS_MAXSHORTMSGLEN
XS_MAXGARBAGE = _xsensdeviceapi_py35_64.XS_MAXGARBAGE
class XsMessageHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsMessageHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsMessageHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_preamble"] = _xsensdeviceapi_py35_64.XsMessageHeader_m_preamble_set
    __swig_getmethods__["m_preamble"] = _xsensdeviceapi_py35_64.XsMessageHeader_m_preamble_get
    if _newclass:
        m_preamble = _swig_property(_xsensdeviceapi_py35_64.XsMessageHeader_m_preamble_get, _xsensdeviceapi_py35_64.XsMessageHeader_m_preamble_set)
    __swig_setmethods__["m_busId"] = _xsensdeviceapi_py35_64.XsMessageHeader_m_busId_set
    __swig_getmethods__["m_busId"] = _xsensdeviceapi_py35_64.XsMessageHeader_m_busId_get
    if _newclass:
        m_busId = _swig_property(_xsensdeviceapi_py35_64.XsMessageHeader_m_busId_get, _xsensdeviceapi_py35_64.XsMessageHeader_m_busId_set)
    __swig_setmethods__["m_messageId"] = _xsensdeviceapi_py35_64.XsMessageHeader_m_messageId_set
    __swig_getmethods__["m_messageId"] = _xsensdeviceapi_py35_64.XsMessageHeader_m_messageId_get
    if _newclass:
        m_messageId = _swig_property(_xsensdeviceapi_py35_64.XsMessageHeader_m_messageId_get, _xsensdeviceapi_py35_64.XsMessageHeader_m_messageId_set)
    __swig_setmethods__["m_length"] = _xsensdeviceapi_py35_64.XsMessageHeader_m_length_set
    __swig_getmethods__["m_length"] = _xsensdeviceapi_py35_64.XsMessageHeader_m_length_get
    if _newclass:
        m_length = _swig_property(_xsensdeviceapi_py35_64.XsMessageHeader_m_length_get, _xsensdeviceapi_py35_64.XsMessageHeader_m_length_set)
    __swig_setmethods__["m_datlen"] = _xsensdeviceapi_py35_64.XsMessageHeader_m_datlen_set
    __swig_getmethods__["m_datlen"] = _xsensdeviceapi_py35_64.XsMessageHeader_m_datlen_get
    if _newclass:
        m_datlen = _swig_property(_xsensdeviceapi_py35_64.XsMessageHeader_m_datlen_get, _xsensdeviceapi_py35_64.XsMessageHeader_m_datlen_set)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsMessageHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsMessageHeader
    __del__ = lambda self: None
XsMessageHeader_swigregister = _xsensdeviceapi_py35_64.XsMessageHeader_swigregister
XsMessageHeader_swigregister(XsMessageHeader)

class XsMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsMessage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsMessage
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_clear(self)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsMessage_empty(self)

    def getBusId(self) -> "uint8_t":
        return _xsensdeviceapi_py35_64.XsMessage_getBusId(self)

    def getDataBuffer(self, offset: 'XsSize'=0) -> "uint8_t const *":
        return _xsensdeviceapi_py35_64.XsMessage_getDataBuffer(self, offset)

    def getDataByte(self, offset: 'XsSize'=0) -> "uint8_t":
        return _xsensdeviceapi_py35_64.XsMessage_getDataByte(self, offset)

    def getDataDouble(self, offset: 'XsSize'=0) -> "double":
        return _xsensdeviceapi_py35_64.XsMessage_getDataDouble(self, offset)

    def getDataFloat(self, offset: 'XsSize'=0) -> "float":
        return _xsensdeviceapi_py35_64.XsMessage_getDataFloat(self, offset)

    def getDataF1220(self, offset: 'XsSize'=0) -> "double":
        return _xsensdeviceapi_py35_64.XsMessage_getDataF1220(self, offset)

    def getDataFP1632(self, offset: 'XsSize'=0) -> "double":
        return _xsensdeviceapi_py35_64.XsMessage_getDataFP1632(self, offset)

    def getDataLong(self, offset: 'XsSize'=0) -> "uint32_t":
        return _xsensdeviceapi_py35_64.XsMessage_getDataLong(self, offset)

    def getDataLongLong(self, offset: 'XsSize'=0) -> "uint64_t":
        return _xsensdeviceapi_py35_64.XsMessage_getDataLongLong(self, offset)

    def getDataShort(self, offset: 'XsSize'=0) -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsMessage_getDataShort(self, offset)

    def getDataSize(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsMessage_getDataSize(self)

    def getMessageId(self) -> "XsXbusMessageId":
        return _xsensdeviceapi_py35_64.XsMessage_getMessageId(self)

    def toResultValue(self) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsMessage_toResultValue(self)

    def getMessageStart(self) -> "uint8_t const *":
        return _xsensdeviceapi_py35_64.XsMessage_getMessageStart(self)

    def getTotalMessageSize(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsMessage_getTotalMessageSize(self)

    def isChecksumOk(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsMessage_isChecksumOk(self)

    def loadFromString(self, src: 'uint8_t const *', msgSize: 'XsSize') -> "bool":
        return _xsensdeviceapi_py35_64.XsMessage_loadFromString(self, src, msgSize)

    def recomputeChecksum(self) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_recomputeChecksum(self)

    def resizeData(self, newSize: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_resizeData(self, newSize)

    def setBusId(self, busId: 'uint8_t') -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setBusId(self, busId)

    def setDataBuffer(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setDataBuffer(self, *args)

    def setDataByte(self, value: 'uint8_t const', offset: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setDataByte(self, value, offset)

    def setDataDouble(self, value: 'double const', offset: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setDataDouble(self, value, offset)

    def setDataFloat(self, value: 'float const', offset: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setDataFloat(self, value, offset)

    def setDataF1220(self, value: 'double const', offset: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setDataF1220(self, value, offset)

    def setDataFP1632(self, value: 'double const', offset: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setDataFP1632(self, value, offset)

    def setDataLong(self, value: 'uint32_t const', offset: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setDataLong(self, value, offset)

    def setDataLongLong(self, value: 'uint64_t const', offset: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setDataLongLong(self, value, offset)

    def setDataShort(self, value: 'uint16_t const', offset: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setDataShort(self, value, offset)

    def setMessageId(self, msgId: 'XsXbusMessageId const') -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setMessageId(self, msgId)

    def __assign__(self, src: 'XsMessage') -> "XsMessage &":
        return _xsensdeviceapi_py35_64.XsMessage___assign__(self, src)

    def deleteData(self, count: 'XsSize', offset: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_deleteData(self, count, offset)

    def insertData(self, count: 'XsSize', offset: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_insertData(self, count, offset)
    if _newclass:
        getFPValueSize = staticmethod(_xsensdeviceapi_py35_64.XsMessage_getFPValueSize)
    else:
        getFPValueSize = _xsensdeviceapi_py35_64.XsMessage_getFPValueSize

    def getDataFPValue(self, *args) -> "double":
        return _xsensdeviceapi_py35_64.XsMessage_getDataFPValue(self, *args)

    def setDataFPValue(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsMessage_setDataFPValue(self, *args)

    def __eq__(self, other: 'XsMessage') -> "bool":
        return _xsensdeviceapi_py35_64.XsMessage___eq__(self, other)

    def rawMessage(self) -> "XsByteArray const &":
        return _xsensdeviceapi_py35_64.XsMessage_rawMessage(self)

    def toHexString(self, maxBytes: 'XsSize'=0) -> "XsString":
        return _xsensdeviceapi_py35_64.XsMessage_toHexString(self, maxBytes)
XsMessage_swigregister = _xsensdeviceapi_py35_64.XsMessage_swigregister
XsMessage_swigregister(XsMessage)

def XsMessage_getFPValueSize(id: 'XsDataIdentifier') -> "uint8_t":
    return _xsensdeviceapi_py35_64.XsMessage_getFPValueSize(id)
XsMessage_getFPValueSize = _xsensdeviceapi_py35_64.XsMessage_getFPValueSize

class XsMessageArray(_XsMessageArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsMessageArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsMessageArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsMessageArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsMessageArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsMessageArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsMessageArray
    __del__ = lambda self: None
XsMessageArray_swigregister = _xsensdeviceapi_py35_64.XsMessageArray_swigregister
XsMessageArray_swigregister(XsMessageArray)
g_xsMessageArrayDescriptor = cvar.g_xsMessageArrayDescriptor

XS_MAX_OUTPUTCONFIGURATIONS = _xsensdeviceapi_py35_64.XS_MAX_OUTPUTCONFIGURATIONS
class XsOutputConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsOutputConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsOutputConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_dataIdentifier"] = _xsensdeviceapi_py35_64.XsOutputConfiguration_m_dataIdentifier_set
    __swig_getmethods__["m_dataIdentifier"] = _xsensdeviceapi_py35_64.XsOutputConfiguration_m_dataIdentifier_get
    if _newclass:
        m_dataIdentifier = _swig_property(_xsensdeviceapi_py35_64.XsOutputConfiguration_m_dataIdentifier_get, _xsensdeviceapi_py35_64.XsOutputConfiguration_m_dataIdentifier_set)
    __swig_setmethods__["m_frequency"] = _xsensdeviceapi_py35_64.XsOutputConfiguration_m_frequency_set
    __swig_getmethods__["m_frequency"] = _xsensdeviceapi_py35_64.XsOutputConfiguration_m_frequency_get
    if _newclass:
        m_frequency = _swig_property(_xsensdeviceapi_py35_64.XsOutputConfiguration_m_frequency_get, _xsensdeviceapi_py35_64.XsOutputConfiguration_m_frequency_set)

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsOutputConfiguration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'XsOutputConfiguration') -> "bool":
        return _xsensdeviceapi_py35_64.XsOutputConfiguration___eq__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsOutputConfiguration
    __del__ = lambda self: None
XsOutputConfiguration_swigregister = _xsensdeviceapi_py35_64.XsOutputConfiguration_swigregister
XsOutputConfiguration_swigregister(XsOutputConfiguration)

XFPK_Unknown = _xsensdeviceapi_py35_64.XFPK_Unknown
XFPK_Base = _xsensdeviceapi_py35_64.XFPK_Base
XFPK_Additional = _xsensdeviceapi_py35_64.XFPK_Additional
XFPK_Heading = _xsensdeviceapi_py35_64.XFPK_Heading
XCL_DCD = _xsensdeviceapi_py35_64.XCL_DCD
XCL_RD = _xsensdeviceapi_py35_64.XCL_RD
XCL_TD = _xsensdeviceapi_py35_64.XCL_TD
XCL_DTR = _xsensdeviceapi_py35_64.XCL_DTR
XCL_GND = _xsensdeviceapi_py35_64.XCL_GND
XCL_DSR = _xsensdeviceapi_py35_64.XCL_DSR
XCL_RTS = _xsensdeviceapi_py35_64.XCL_RTS
XCL_CTS = _xsensdeviceapi_py35_64.XCL_CTS
XCL_RI = _xsensdeviceapi_py35_64.XCL_RI

def asinClamped(x: 'XsReal') -> "XsReal":
    return _xsensdeviceapi_py35_64.asinClamped(x)
asinClamped = _xsensdeviceapi_py35_64.asinClamped

def rad2deg(radians: 'XsReal') -> "XsReal":
    return _xsensdeviceapi_py35_64.rad2deg(radians)
rad2deg = _xsensdeviceapi_py35_64.rad2deg

def deg2rad(degrees: 'XsReal') -> "XsReal":
    return _xsensdeviceapi_py35_64.deg2rad(degrees)
deg2rad = _xsensdeviceapi_py35_64.deg2rad

def pow2(a: 'XsReal') -> "XsReal":
    return _xsensdeviceapi_py35_64.pow2(a)
pow2 = _xsensdeviceapi_py35_64.pow2

def pow3(a: 'XsReal') -> "XsReal":
    return _xsensdeviceapi_py35_64.pow3(a)
pow3 = _xsensdeviceapi_py35_64.pow3

def doubleToLong(d: 'double') -> "int32_t":
    return _xsensdeviceapi_py35_64.doubleToLong(d)
doubleToLong = _xsensdeviceapi_py35_64.doubleToLong

def doubleToInt64(d: 'double') -> "int64_t":
    return _xsensdeviceapi_py35_64.doubleToInt64(d)
doubleToInt64 = _xsensdeviceapi_py35_64.doubleToInt64
class XsVector(collections.Sequence):
    __swig_setmethods__ = {}
    for _s in [collections.Sequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsVector, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.Sequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __assign__(self, other: 'XsVector') -> "XsVector &":
        return _xsensdeviceapi_py35_64.XsVector___assign__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsVector
    __del__ = lambda self: None

    def assign(self, sz: 'XsSize', src: 'XsReal const *') -> "void":
        return _xsensdeviceapi_py35_64.XsVector_assign(self, sz, src)

    def setSize(self, sz: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsVector_setSize(self, sz)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsVector_size(self)

    def data(self) -> "XsReal const *":
        return _xsensdeviceapi_py35_64.XsVector_data(self)

    def __mul__(self, scalar: 'XsReal') -> "XsVector":
        return _xsensdeviceapi_py35_64.XsVector___mul__(self, scalar)

    def __imul__(self, scalar: 'XsReal') -> "void":
        return _xsensdeviceapi_py35_64.XsVector___imul__(self, scalar)

    def dotProduct(self, v: 'XsVector') -> "XsReal":
        return _xsensdeviceapi_py35_64.XsVector_dotProduct(self, v)

    def cartesianLength(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsVector_cartesianLength(self)

    def normalize(self) -> "void":
        return _xsensdeviceapi_py35_64.XsVector_normalize(self)

    def setZero(self) -> "void":
        return _xsensdeviceapi_py35_64.XsVector_setZero(self)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsVector_empty(self)

    def angularVelocityFromQuaternion(self, quat: 'XsQuaternion', deltaT: 'XsReal') -> "XsVector &":
        return _xsensdeviceapi_py35_64.XsVector_angularVelocityFromQuaternion(self, quat, deltaT)

    def __sub__(self, sub: 'XsVector') -> "XsVector":
        return _xsensdeviceapi_py35_64.XsVector___sub__(self, sub)

    def __add__(self, sub: 'XsVector') -> "XsVector":
        return _xsensdeviceapi_py35_64.XsVector___add__(self, sub)

    def __isub__(self, sub: 'XsVector') -> "XsVector":
        return _xsensdeviceapi_py35_64.XsVector___isub__(self, sub)

    def __iadd__(self, sub: 'XsVector') -> "XsVector":
        return _xsensdeviceapi_py35_64.XsVector___iadd__(self, sub)

    def __eq__(self, other: 'XsVector') -> "bool":
        return _xsensdeviceapi_py35_64.XsVector___eq__(self, other)

    def isEqual(self, other: 'XsVector', epsilon: 'XsReal') -> "bool":
        return _xsensdeviceapi_py35_64.XsVector_isEqual(self, other, epsilon)

    def toVector(self) -> "std::vector< XsReal,std::allocator< XsReal > >":
        return _xsensdeviceapi_py35_64.XsVector_toVector(self)

    def zero(self) -> "void":
        return _xsensdeviceapi_py35_64.XsVector_zero(self)

    def fill(self, val: 'XsReal') -> "void":
        return _xsensdeviceapi_py35_64.XsVector_fill(self, val)

    def swap(self, b: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsVector_swap(self, b)

    def append(self, other: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsVector_append(self, other)

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64.XsVector_clear(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64.XsVector_reverse(self)

    def __getitem__(self, index: 'XsSize') -> "XsReal":
        return _xsensdeviceapi_py35_64.XsVector___getitem__(self, index)

    def getItem(self, index: 'XsSize') -> "XsReal":

        index = int(index)


        return _xsensdeviceapi_py35_64.XsVector_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsReal') -> "void":
        return _xsensdeviceapi_py35_64.XsVector___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsReal') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64.XsVector_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsVector___len__(self)

    def toNdArray(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsVector_toNdArray(self)

    def toNdArrayRef(self) -> "XsVector *":
        return _xsensdeviceapi_py35_64.XsVector_toNdArrayRef(self)

    def __init__(self, *args):
    	self.this = _swigLib.xsVector(*args)


    def __repr__(self):
    	return np.array_str(self.toNdArray())

XsVector_swigregister = _xsensdeviceapi_py35_64.XsVector_swigregister
XsVector_swigregister(XsVector)
XsMath_e = cvar.XsMath_e
XsMath_pi = cvar.XsMath_pi
XsMath_tinyValue = cvar.XsMath_tinyValue
XsMath_hugeValue = cvar.XsMath_hugeValue
XsMath_epsilon = cvar.XsMath_epsilon
XsMath_sqrtEpsilon = cvar.XsMath_sqrtEpsilon
XsMath_denormalized = cvar.XsMath_denormalized
XsMath_sqrtDenormalized = cvar.XsMath_sqrtDenormalized
XsMath_rad2degValue = cvar.XsMath_rad2degValue
XsMath_deg2radValue = cvar.XsMath_deg2radValue
XsMath_zero = cvar.XsMath_zero
XsMath_pt25 = cvar.XsMath_pt25
XsMath_pt5 = cvar.XsMath_pt5
XsMath_minusPt5 = cvar.XsMath_minusPt5
XsMath_one = cvar.XsMath_one
XsMath_minusOne = cvar.XsMath_minusOne
XsMath_two = cvar.XsMath_two
XsMath_four = cvar.XsMath_four
XsMath_minusTwo = cvar.XsMath_minusTwo
XsMath_minusHalfPi = cvar.XsMath_minusHalfPi
XsMath_halfPi = cvar.XsMath_halfPi
XsMath_twoPi = cvar.XsMath_twoPi
XsMath_sqrt2 = cvar.XsMath_sqrt2
XsMath_sqrtHalf = cvar.XsMath_sqrtHalf
XsMath_infinity = cvar.XsMath_infinity
e = cvar.e
pi = cvar.pi
tinyValue = cvar.tinyValue
hugeValue = cvar.hugeValue
epsilon = cvar.epsilon
sqrtEpsilon = cvar.sqrtEpsilon
denormalized = cvar.denormalized
sqrtDenormalized = cvar.sqrtDenormalized
rad2degValue = cvar.rad2degValue
deg2radValue = cvar.deg2radValue
zero = cvar.zero
pt25 = cvar.pt25
pt5 = cvar.pt5
minusPt5 = cvar.minusPt5
one = cvar.one
minusOne = cvar.minusOne
two = cvar.two
four = cvar.four
minusTwo = cvar.minusTwo
minusHalfPi = cvar.minusHalfPi
halfPi = cvar.halfPi
twoPi = cvar.twoPi
sqrt2 = cvar.sqrt2
sqrtHalf = cvar.sqrtHalf
infinity = cvar.infinity

class XsVector3(XsVector):
    __swig_setmethods__ = {}
    for _s in [XsVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsVector3, name, value)
    __swig_getmethods__ = {}
    for _s in [XsVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsVector3, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        zero3 = staticmethod(_xsensdeviceapi_py35_64.XsVector3_zero3)
    else:
        zero3 = _xsensdeviceapi_py35_64.XsVector3_zero3

    def __assign__(self, *args) -> "XsVector3 &":
        return _xsensdeviceapi_py35_64.XsVector3___assign__(self, *args)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsVector3
    __del__ = lambda self: None
XsVector3_swigregister = _xsensdeviceapi_py35_64.XsVector3_swigregister
XsVector3_swigregister(XsVector3)

def XsVector3_zero3() -> "XsVector3 const &":
    return _xsensdeviceapi_py35_64.XsVector3_zero3()
XsVector3_zero3 = _xsensdeviceapi_py35_64.XsVector3_zero3

class XsQuaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsQuaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsQuaternion, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsQuaternion
    __del__ = lambda self: None

    def __assign__(self, other: 'XsQuaternion') -> "XsQuaternion &":
        return _xsensdeviceapi_py35_64.XsQuaternion___assign__(self, other)

    def assign(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsQuaternion_assign(self, *args)

    def data(self) -> "XsReal const *":
        return _xsensdeviceapi_py35_64.XsQuaternion_data(self)

    def inverse(self) -> "XsQuaternion":
        return _xsensdeviceapi_py35_64.XsQuaternion_inverse(self)

    def conjugate(self) -> "XsQuaternion":
        return _xsensdeviceapi_py35_64.XsQuaternion_conjugate(self)

    def normalized(self) -> "XsQuaternion":
        return _xsensdeviceapi_py35_64.XsQuaternion_normalized(self)

    def normalize(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsQuaternion_normalize(self)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsQuaternion_empty(self)

    def fromEulerAngles(self, src: 'XsEuler') -> "XsQuaternion &":
        return _xsensdeviceapi_py35_64.XsQuaternion_fromEulerAngles(self, src)

    def fromRotationMatrix(self, ori: 'XsMatrix') -> "XsQuaternion &":
        return _xsensdeviceapi_py35_64.XsQuaternion_fromRotationMatrix(self, ori)
    if _newclass:
        identity = staticmethod(_xsensdeviceapi_py35_64.XsQuaternion_identity)
    else:
        identity = _xsensdeviceapi_py35_64.XsQuaternion_identity

    def __imul__(self, other: 'XsQuaternion') -> "void":
        return _xsensdeviceapi_py35_64.XsQuaternion___imul__(self, other)

    def w(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsQuaternion_w(self)

    def x(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsQuaternion_x(self)

    def y(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsQuaternion_y(self)

    def z(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsQuaternion_z(self)

    def swap(self, other: 'XsQuaternion') -> "void":
        return _xsensdeviceapi_py35_64.XsQuaternion_swap(self, other)

    def __eq__(self, other: 'XsQuaternion') -> "bool":
        return _xsensdeviceapi_py35_64.XsQuaternion___eq__(self, other)

    def isEqual(self, other: 'XsQuaternion', tolerance: 'XsReal') -> "bool":
        return _xsensdeviceapi_py35_64.XsQuaternion_isEqual(self, other, tolerance)

    def dotProduct(self, other: 'XsQuaternion') -> "XsReal":
        return _xsensdeviceapi_py35_64.XsQuaternion_dotProduct(self, other)

    def __getitem__(self, index: 'XsSize') -> "XsReal":
        return _xsensdeviceapi_py35_64.XsQuaternion___getitem__(self, index)

    def __setitem__(self, index: 'XsSize', val: 'XsReal') -> "void":
        return _xsensdeviceapi_py35_64.XsQuaternion___setitem__(self, index, val)

    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsQuaternion___len__(self)

    def toNdArray(self) -> "XsQuaternion":
        return _xsensdeviceapi_py35_64.XsQuaternion_toNdArray(self)

    def toNdArrayRef(self) -> "XsQuaternion *":
        return _xsensdeviceapi_py35_64.XsQuaternion_toNdArrayRef(self)

    def __init__(self, *args):
    	self.this = _swigLib.xsQuaternion(*args)


    def __repr__(self):
    	return np.array_str(self.toNdArray())

XsQuaternion_swigregister = _xsensdeviceapi_py35_64.XsQuaternion_swigregister
XsQuaternion_swigregister(XsQuaternion)

def XsQuaternion_identity() -> "XsQuaternion const &":
    return _xsensdeviceapi_py35_64.XsQuaternion_identity()
XsQuaternion_identity = _xsensdeviceapi_py35_64.XsQuaternion_identity

class XsFingerData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsFingerData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsFingerData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsFingerData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsFingerData') -> "XsFingerData const &":
        return _xsensdeviceapi_py35_64.XsFingerData___assign__(self, other)

    def zero(self) -> "void":
        return _xsensdeviceapi_py35_64.XsFingerData_zero(self)

    def orientationIncrement(self) -> "XsQuaternion const &":
        return _xsensdeviceapi_py35_64.XsFingerData_orientationIncrement(self)

    def setOrientationIncrement(self, dq: 'XsQuaternion') -> "void":
        return _xsensdeviceapi_py35_64.XsFingerData_setOrientationIncrement(self, dq)

    def velocityIncrement(self) -> "XsVector3 const &":
        return _xsensdeviceapi_py35_64.XsFingerData_velocityIncrement(self)

    def setVelocityIncrement(self, dv: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsFingerData_setVelocityIncrement(self, dv)

    def mag(self) -> "XsVector3 const &":
        return _xsensdeviceapi_py35_64.XsFingerData_mag(self)

    def setMag(self, mag: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsFingerData_setMag(self, mag)

    def flags(self) -> "uint16_t const &":
        return _xsensdeviceapi_py35_64.XsFingerData_flags(self)

    def setFlags(self, flags: 'uint16_t const &') -> "void":
        return _xsensdeviceapi_py35_64.XsFingerData_setFlags(self, flags)

    def ccAcc(self) -> "uint8_t const &":
        return _xsensdeviceapi_py35_64.XsFingerData_ccAcc(self)

    def setCcAcc(self, ccAcc: 'uint8_t const &') -> "void":
        return _xsensdeviceapi_py35_64.XsFingerData_setCcAcc(self, ccAcc)

    def ccGyr(self) -> "uint8_t const &":
        return _xsensdeviceapi_py35_64.XsFingerData_ccGyr(self)

    def setCcGyr(self, ccGyr: 'uint8_t const &') -> "void":
        return _xsensdeviceapi_py35_64.XsFingerData_setCcGyr(self, ccGyr)

    def __eq__(self, other: 'XsFingerData') -> "bool":
        return _xsensdeviceapi_py35_64.XsFingerData___eq__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsFingerData
    __del__ = lambda self: None
XsFingerData_swigregister = _xsensdeviceapi_py35_64.XsFingerData_swigregister
XsFingerData_swigregister(XsFingerData)

class XsGloveData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsGloveData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsGloveData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsGloveData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def snapshotCounter(self) -> "uint16_t const &":
        return _xsensdeviceapi_py35_64.XsGloveData_snapshotCounter(self)

    def setSnapshotCounter(self, snapshotCounter: 'uint16_t const &') -> "void":
        return _xsensdeviceapi_py35_64.XsGloveData_setSnapshotCounter(self, snapshotCounter)

    def validSampleFlags(self) -> "uint16_t const &":
        return _xsensdeviceapi_py35_64.XsGloveData_validSampleFlags(self)

    def setValidSampleFlags(self, validSampleFlags: 'uint16_t const &') -> "void":
        return _xsensdeviceapi_py35_64.XsGloveData_setValidSampleFlags(self, validSampleFlags)

    def timestamp(self) -> "uint16_t const &":
        return _xsensdeviceapi_py35_64.XsGloveData_timestamp(self)

    def setTimestamp(self, timestamp: 'uint16_t const &') -> "void":
        return _xsensdeviceapi_py35_64.XsGloveData_setTimestamp(self, timestamp)

    def carpusOffset(self) -> "uint8_t const &":
        return _xsensdeviceapi_py35_64.XsGloveData_carpusOffset(self)

    def setCarpusOffset(self, carpusOffset: 'uint8_t const &') -> "void":
        return _xsensdeviceapi_py35_64.XsGloveData_setCarpusOffset(self, carpusOffset)

    def fingerData(self, fingerData: 'XsFingerData') -> "void":
        return _xsensdeviceapi_py35_64.XsGloveData_fingerData(self, fingerData)

    def setFingerData(self, fingerData: 'XsFingerData') -> "void":
        return _xsensdeviceapi_py35_64.XsGloveData_setFingerData(self, fingerData)

    def __eq__(self, other: 'XsGloveData') -> "bool":
        return _xsensdeviceapi_py35_64.XsGloveData___eq__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsGloveData
    __del__ = lambda self: None
XsGloveData_swigregister = _xsensdeviceapi_py35_64.XsGloveData_swigregister
XsGloveData_swigregister(XsGloveData)

XS_DID_TYPEL_MASK = _xsensdeviceapi_py35_64.XS_DID_TYPEL_MASK
XS_DID_TYPEH_MASK = _xsensdeviceapi_py35_64.XS_DID_TYPEH_MASK
XS_DID_GPL_MASK = _xsensdeviceapi_py35_64.XS_DID_GPL_MASK
XS_DID_GPH_MASK = _xsensdeviceapi_py35_64.XS_DID_GPH_MASK
XS_DID_TYPE_MASK = _xsensdeviceapi_py35_64.XS_DID_TYPE_MASK
XS_DID_GP_MASK = _xsensdeviceapi_py35_64.XS_DID_GP_MASK
XS_DID_MK4TYPE_MASK = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MASK
XS_DID_ID_MASK = _xsensdeviceapi_py35_64.XS_DID_ID_MASK
XS_DID_FULLTYPE_MASK = _xsensdeviceapi_py35_64.XS_DID_FULLTYPE_MASK
XS_DID_TYPEL_SHIFT = _xsensdeviceapi_py35_64.XS_DID_TYPEL_SHIFT
XS_DID_TYPEH_SHIFT = _xsensdeviceapi_py35_64.XS_DID_TYPEH_SHIFT
XS_DID_GPL_SHIFT = _xsensdeviceapi_py35_64.XS_DID_GPL_SHIFT
XS_DID_GPH_SHIFT = _xsensdeviceapi_py35_64.XS_DID_GPH_SHIFT
XS_DID_TYPEH_INTERNAL = _xsensdeviceapi_py35_64.XS_DID_TYPEH_INTERNAL
XS_DID_TYPEH_AWINDAMASTER = _xsensdeviceapi_py35_64.XS_DID_TYPEH_AWINDAMASTER
XS_DID_TYPEH_MT_X0 = _xsensdeviceapi_py35_64.XS_DID_TYPEH_MT_X0
XS_DID_TYPEH_MT_X00 = _xsensdeviceapi_py35_64.XS_DID_TYPEH_MT_X00
XS_DID_TYPEH_MTX2_MTW2 = _xsensdeviceapi_py35_64.XS_DID_TYPEH_MTX2_MTW2
XS_DID_TYPEH_BODYPACK = _xsensdeviceapi_py35_64.XS_DID_TYPEH_BODYPACK
XS_DID_TYPEH_MT_X_MPU = _xsensdeviceapi_py35_64.XS_DID_TYPEH_MT_X_MPU
XS_DID_TYPEL_STATION = _xsensdeviceapi_py35_64.XS_DID_TYPEL_STATION
XS_DID_TYPEL_DONGLE = _xsensdeviceapi_py35_64.XS_DID_TYPEL_DONGLE
XS_DID_TYPEL_OEM = _xsensdeviceapi_py35_64.XS_DID_TYPEL_OEM
XS_DID_TYPEL_SYNCSTATION = _xsensdeviceapi_py35_64.XS_DID_TYPEL_SYNCSTATION
XS_DID_TYPEL_BUS_MASTER = _xsensdeviceapi_py35_64.XS_DID_TYPEL_BUS_MASTER
XS_DID_TYPEL_RS232 = _xsensdeviceapi_py35_64.XS_DID_TYPEL_RS232
XS_DID_TYPEL_RS422 = _xsensdeviceapi_py35_64.XS_DID_TYPEL_RS422
XS_DID_TYPEL_RS485XM = _xsensdeviceapi_py35_64.XS_DID_TYPEL_RS485XM
XS_DID_TYPEL_RS485 = _xsensdeviceapi_py35_64.XS_DID_TYPEL_RS485
XS_DID_TYPEL_WIRELESS = _xsensdeviceapi_py35_64.XS_DID_TYPEL_WIRELESS
XS_DID_TYPEL_COMM_MASK = _xsensdeviceapi_py35_64.XS_DID_TYPEL_COMM_MASK
XS_DID_TYPEL_MULTI = _xsensdeviceapi_py35_64.XS_DID_TYPEL_MULTI
XS_DID_TYPEL_MK5 = _xsensdeviceapi_py35_64.XS_DID_TYPEL_MK5
XS_DID_GPL_1 = _xsensdeviceapi_py35_64.XS_DID_GPL_1
XS_DID_GPL_2 = _xsensdeviceapi_py35_64.XS_DID_GPL_2
XS_DID_GPL_3 = _xsensdeviceapi_py35_64.XS_DID_GPL_3
XS_DID_GPL_7 = _xsensdeviceapi_py35_64.XS_DID_GPL_7
XS_DID_GPL_10 = _xsensdeviceapi_py35_64.XS_DID_GPL_10
XS_DID_GPL_20 = _xsensdeviceapi_py35_64.XS_DID_GPL_20
XS_DID_GPL_30 = _xsensdeviceapi_py35_64.XS_DID_GPL_30
XS_DID_GPL_100 = _xsensdeviceapi_py35_64.XS_DID_GPL_100
XS_DID_GPL_200 = _xsensdeviceapi_py35_64.XS_DID_GPL_200
XS_DID_GPL_300 = _xsensdeviceapi_py35_64.XS_DID_GPL_300
XS_DID_GPL_400 = _xsensdeviceapi_py35_64.XS_DID_GPL_400
XS_DID_GPL_500 = _xsensdeviceapi_py35_64.XS_DID_GPL_500
XS_DID_GPL_600 = _xsensdeviceapi_py35_64.XS_DID_GPL_600
XS_DID_GPL_700 = _xsensdeviceapi_py35_64.XS_DID_GPL_700
XS_DID_GPL_800 = _xsensdeviceapi_py35_64.XS_DID_GPL_800
XS_DID_GPL_900 = _xsensdeviceapi_py35_64.XS_DID_GPL_900
XS_DID_GPL_IMU = _xsensdeviceapi_py35_64.XS_DID_GPL_IMU
XS_DID_GPL_VRU = _xsensdeviceapi_py35_64.XS_DID_GPL_VRU
XS_DID_GPL_AHRS = _xsensdeviceapi_py35_64.XS_DID_GPL_AHRS
XS_DID_GPL_AWINDA2 = _xsensdeviceapi_py35_64.XS_DID_GPL_AWINDA2
XS_DID_GPL_AHRSGNSS = _xsensdeviceapi_py35_64.XS_DID_GPL_AHRSGNSS
XS_DID_GPL_AHRSGNSSG = _xsensdeviceapi_py35_64.XS_DID_GPL_AHRSGNSSG
XS_DID_GPL_GNSSINS = _xsensdeviceapi_py35_64.XS_DID_GPL_GNSSINS
XS_DID_GPL_GNSSINSG = _xsensdeviceapi_py35_64.XS_DID_GPL_GNSSINSG
XS_DID_TYPE_AWINDA = _xsensdeviceapi_py35_64.XS_DID_TYPE_AWINDA
XS_DID_TYPE_AWINDA_STATION = _xsensdeviceapi_py35_64.XS_DID_TYPE_AWINDA_STATION
XS_DID_TYPE_AWINDA_DONGLE = _xsensdeviceapi_py35_64.XS_DID_TYPE_AWINDA_DONGLE
XS_DID_TYPE_AWINDA_OEM = _xsensdeviceapi_py35_64.XS_DID_TYPE_AWINDA_OEM
XS_DID_TYPE_SYNCSTATION = _xsensdeviceapi_py35_64.XS_DID_TYPE_SYNCSTATION
XS_DID_FULLTYPE_AWINDA2_STATION = _xsensdeviceapi_py35_64.XS_DID_FULLTYPE_AWINDA2_STATION
XS_DID_FULLTYPE_AWINDA2_DONGLE = _xsensdeviceapi_py35_64.XS_DID_FULLTYPE_AWINDA2_DONGLE
XS_DID_FULLTYPE_AWINDA2_OEM = _xsensdeviceapi_py35_64.XS_DID_FULLTYPE_AWINDA2_OEM
XS_DID_FULLTYPE_SYNCSTATION2 = _xsensdeviceapi_py35_64.XS_DID_FULLTYPE_SYNCSTATION2
XS_DID_TYPE_MTX2 = _xsensdeviceapi_py35_64.XS_DID_TYPE_MTX2
XS_DID_TYPE_MTW2 = _xsensdeviceapi_py35_64.XS_DID_TYPE_MTW2
XS_DID_MK4TYPE_MT_1_MPU = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_1_MPU
XS_DID_MK4TYPE_MT_2_MPU = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_2_MPU
XS_DID_MK4TYPE_MT_3_MPU = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_3_MPU
XS_DID_MK4TYPE_MT_7_MPU = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_7_MPU
XS_DID_MK4TYPE_MT_10 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_10
XS_DID_MK4TYPE_MT_20 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_20
XS_DID_MK4TYPE_MT_30 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_30
XS_DID_MK4TYPE_MT_100 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_100
XS_DID_MK4TYPE_MT_200 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_200
XS_DID_MK4TYPE_MT_300 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_300
XS_DID_MK4TYPE_MT_400 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_400
XS_DID_MK4TYPE_MT_500 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_500
XS_DID_MK4TYPE_MT_600 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_600
XS_DID_MK4TYPE_MT_700 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_700
XS_DID_MK4TYPE_MT_800 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_800
XS_DID_MK4TYPE_MT_900 = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_900
XS_DID_MK5TYPE_MT_10 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_10
XS_DID_MK5TYPE_MT_20 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_20
XS_DID_MK5TYPE_MT_30 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_30
XS_DID_MK5TYPE_MT_100 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_100
XS_DID_MK5TYPE_MT_200 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_200
XS_DID_MK5TYPE_MT_300 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_300
XS_DID_MK5TYPE_MT_400 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_400
XS_DID_MK5TYPE_MT_500 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_500
XS_DID_MK5TYPE_MT_600 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_600
XS_DID_MK5TYPE_MT_700 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_700
XS_DID_MK5TYPE_MT_800 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_800
XS_DID_MK5TYPE_MT_900 = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_MT_900
XS_DID_MASTER = _xsensdeviceapi_py35_64.XS_DID_MASTER
XS_DID_ABMCLOCKMASTER = _xsensdeviceapi_py35_64.XS_DID_ABMCLOCKMASTER
XS_DID_MK4TYPE_MT_710_RANGE_START = _xsensdeviceapi_py35_64.XS_DID_MK4TYPE_MT_710_RANGE_START
XS_DID_MK5TYPE_RANGE_START = _xsensdeviceapi_py35_64.XS_DID_MK5TYPE_RANGE_START
XS_DID64_BIT = _xsensdeviceapi_py35_64.XS_DID64_BIT
XSR_Slave = _xsensdeviceapi_py35_64.XSR_Slave
XSR_None = _xsensdeviceapi_py35_64.XSR_None
XSR_MasterSlave = _xsensdeviceapi_py35_64.XSR_MasterSlave
XSR_Master = _xsensdeviceapi_py35_64.XSR_Master
class XsDeviceIdArray(_XsDeviceIdArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsDeviceIdArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDeviceIdArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsDeviceIdArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsDeviceIdArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDeviceIdArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsDeviceIdArray___str__(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDeviceIdArray
    __del__ = lambda self: None
XsDeviceIdArray_swigregister = _xsensdeviceapi_py35_64.XsDeviceIdArray_swigregister
XsDeviceIdArray_swigregister(XsDeviceIdArray)
g_xsDeviceIdArrayDescriptor = cvar.g_xsDeviceIdArrayDescriptor

XCDI_MAX_FREQUENCY_VAL = _xsensdeviceapi_py35_64.XCDI_MAX_FREQUENCY_VAL
XCDI_Invalid = _xsensdeviceapi_py35_64.XCDI_Invalid
XCDI_Error = _xsensdeviceapi_py35_64.XCDI_Error
XCDI_Warning = _xsensdeviceapi_py35_64.XCDI_Warning
XCDI_SampleTime = _xsensdeviceapi_py35_64.XCDI_SampleTime
XCDI_GroupCounter = _xsensdeviceapi_py35_64.XCDI_GroupCounter
XCDI_UtcTime = _xsensdeviceapi_py35_64.XCDI_UtcTime
XCDI_StatusWord = _xsensdeviceapi_py35_64.XCDI_StatusWord
XCDI_Quaternion = _xsensdeviceapi_py35_64.XCDI_Quaternion
XCDI_EulerAngles = _xsensdeviceapi_py35_64.XCDI_EulerAngles
XCDI_RotationMatrix = _xsensdeviceapi_py35_64.XCDI_RotationMatrix
XCDI_DeltaV = _xsensdeviceapi_py35_64.XCDI_DeltaV
XCDI_RateOfTurn = _xsensdeviceapi_py35_64.XCDI_RateOfTurn
XCDI_DeltaQ = _xsensdeviceapi_py35_64.XCDI_DeltaQ
XCDI_Acceleration = _xsensdeviceapi_py35_64.XCDI_Acceleration
XCDI_FreeAcceleration = _xsensdeviceapi_py35_64.XCDI_FreeAcceleration
XCDI_MagneticField = _xsensdeviceapi_py35_64.XCDI_MagneticField
XCDI_Temperature = _xsensdeviceapi_py35_64.XCDI_Temperature
XCDI_BaroPressure = _xsensdeviceapi_py35_64.XCDI_BaroPressure
XCDI_RateOfTurnHR = _xsensdeviceapi_py35_64.XCDI_RateOfTurnHR
XCDI_AccelerationHR = _xsensdeviceapi_py35_64.XCDI_AccelerationHR
XCDI_LatLong = _xsensdeviceapi_py35_64.XCDI_LatLong
XCDI_AltitudeEllipsoid = _xsensdeviceapi_py35_64.XCDI_AltitudeEllipsoid
XCDI_PositionEcef_X = _xsensdeviceapi_py35_64.XCDI_PositionEcef_X
XCDI_PositionEcef_Y = _xsensdeviceapi_py35_64.XCDI_PositionEcef_Y
XCDI_PositionEcef_Z = _xsensdeviceapi_py35_64.XCDI_PositionEcef_Z
XCDI_Velocity = _xsensdeviceapi_py35_64.XCDI_Velocity
XCDI_Latitude = _xsensdeviceapi_py35_64.XCDI_Latitude
XCDI_Longitude = _xsensdeviceapi_py35_64.XCDI_Longitude
XCDI_GnssSatInfo = _xsensdeviceapi_py35_64.XCDI_GnssSatInfo
XCDI_EndOfGroup = _xsensdeviceapi_py35_64.XCDI_EndOfGroup
XCDI_HighestIdentifier = _xsensdeviceapi_py35_64.XCDI_HighestIdentifier

def xsMalloc(sz: 'size_t') -> "void *":
    return _xsensdeviceapi_py35_64.xsMalloc(sz)
xsMalloc = _xsensdeviceapi_py35_64.xsMalloc

def xsRealloc(ptr: 'void *', sz: 'size_t') -> "void *":
    return _xsensdeviceapi_py35_64.xsRealloc(ptr, sz)
xsRealloc = _xsensdeviceapi_py35_64.xsRealloc

def xsFree(ptr: 'void *') -> "void":
    return _xsensdeviceapi_py35_64.xsFree(ptr)
xsFree = _xsensdeviceapi_py35_64.xsFree

def xsAlignedMalloc(sz: 'size_t') -> "void *":
    return _xsensdeviceapi_py35_64.xsAlignedMalloc(sz)
xsAlignedMalloc = _xsensdeviceapi_py35_64.xsAlignedMalloc

def xsAlignedRealloc(ptr: 'void *', sz: 'size_t') -> "void *":
    return _xsensdeviceapi_py35_64.xsAlignedRealloc(ptr, sz)
xsAlignedRealloc = _xsensdeviceapi_py35_64.xsAlignedRealloc

def xsAlignedFree(ptr: 'void *') -> "void":
    return _xsensdeviceapi_py35_64.xsAlignedFree(ptr)
xsAlignedFree = _xsensdeviceapi_py35_64.xsAlignedFree
XSP_None = _xsensdeviceapi_py35_64.XSP_None
XSP_RisingEdge = _xsensdeviceapi_py35_64.XSP_RisingEdge
XSP_PositivePulse = _xsensdeviceapi_py35_64.XSP_PositivePulse
XSP_FallingEdge = _xsensdeviceapi_py35_64.XSP_FallingEdge
XSP_NegativePulse = _xsensdeviceapi_py35_64.XSP_NegativePulse
XSP_Both = _xsensdeviceapi_py35_64.XSP_Both
class XsTimeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsTimeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsTimeInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_nano"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_nano_set
    __swig_getmethods__["m_nano"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_nano_get
    if _newclass:
        m_nano = _swig_property(_xsensdeviceapi_py35_64.XsTimeInfo_m_nano_get, _xsensdeviceapi_py35_64.XsTimeInfo_m_nano_set)
    __swig_setmethods__["m_year"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_year_set
    __swig_getmethods__["m_year"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_year_get
    if _newclass:
        m_year = _swig_property(_xsensdeviceapi_py35_64.XsTimeInfo_m_year_get, _xsensdeviceapi_py35_64.XsTimeInfo_m_year_set)
    __swig_setmethods__["m_month"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_month_set
    __swig_getmethods__["m_month"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_month_get
    if _newclass:
        m_month = _swig_property(_xsensdeviceapi_py35_64.XsTimeInfo_m_month_get, _xsensdeviceapi_py35_64.XsTimeInfo_m_month_set)
    __swig_setmethods__["m_day"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_day_set
    __swig_getmethods__["m_day"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_day_get
    if _newclass:
        m_day = _swig_property(_xsensdeviceapi_py35_64.XsTimeInfo_m_day_get, _xsensdeviceapi_py35_64.XsTimeInfo_m_day_set)
    __swig_setmethods__["m_hour"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_hour_set
    __swig_getmethods__["m_hour"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_hour_get
    if _newclass:
        m_hour = _swig_property(_xsensdeviceapi_py35_64.XsTimeInfo_m_hour_get, _xsensdeviceapi_py35_64.XsTimeInfo_m_hour_set)
    __swig_setmethods__["m_minute"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_minute_set
    __swig_getmethods__["m_minute"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_minute_get
    if _newclass:
        m_minute = _swig_property(_xsensdeviceapi_py35_64.XsTimeInfo_m_minute_get, _xsensdeviceapi_py35_64.XsTimeInfo_m_minute_set)
    __swig_setmethods__["m_second"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_second_set
    __swig_getmethods__["m_second"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_second_get
    if _newclass:
        m_second = _swig_property(_xsensdeviceapi_py35_64.XsTimeInfo_m_second_get, _xsensdeviceapi_py35_64.XsTimeInfo_m_second_set)
    __swig_setmethods__["m_valid"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_valid_set
    __swig_getmethods__["m_valid"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_valid_get
    if _newclass:
        m_valid = _swig_property(_xsensdeviceapi_py35_64.XsTimeInfo_m_valid_get, _xsensdeviceapi_py35_64.XsTimeInfo_m_valid_set)
    __swig_setmethods__["m_utcOffset"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_utcOffset_set
    __swig_getmethods__["m_utcOffset"] = _xsensdeviceapi_py35_64.XsTimeInfo_m_utcOffset_get
    if _newclass:
        m_utcOffset = _swig_property(_xsensdeviceapi_py35_64.XsTimeInfo_m_utcOffset_get, _xsensdeviceapi_py35_64.XsTimeInfo_m_utcOffset_set)

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64.XsTimeInfo_clear(self)
    if _newclass:
        currentTime = staticmethod(_xsensdeviceapi_py35_64.XsTimeInfo_currentTime)
    else:
        currentTime = _xsensdeviceapi_py35_64.XsTimeInfo_currentTime
    if _newclass:
        currentLocalTime = staticmethod(_xsensdeviceapi_py35_64.XsTimeInfo_currentLocalTime)
    else:
        currentLocalTime = _xsensdeviceapi_py35_64.XsTimeInfo_currentLocalTime

    def __eq__(self, other: 'XsTimeInfo') -> "bool":
        return _xsensdeviceapi_py35_64.XsTimeInfo___eq__(self, other)

    def makeUtc(self) -> "void":
        return _xsensdeviceapi_py35_64.XsTimeInfo_makeUtc(self)

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsTimeInfo___str__(self)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsTimeInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsTimeInfo
    __del__ = lambda self: None
XsTimeInfo_swigregister = _xsensdeviceapi_py35_64.XsTimeInfo_swigregister
XsTimeInfo_swigregister(XsTimeInfo)

def XsTimeInfo_currentTime() -> "XsTimeInfo":
    return _xsensdeviceapi_py35_64.XsTimeInfo_currentTime()
XsTimeInfo_currentTime = _xsensdeviceapi_py35_64.XsTimeInfo_currentTime

def XsTimeInfo_currentLocalTime() -> "XsTimeInfo":
    return _xsensdeviceapi_py35_64.XsTimeInfo_currentLocalTime()
XsTimeInfo_currentLocalTime = _xsensdeviceapi_py35_64.XsTimeInfo_currentLocalTime

class XsTimeStamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsTimeStamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsTimeStamp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsTimeStamp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toTimeInfo(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsTimeStamp_toTimeInfo(self, *args)

    def toXsString(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsTimeStamp_toXsString(self)

    def __assign__(self, other: 'XsTimeStamp') -> "XsTimeStamp &":
        return _xsensdeviceapi_py35_64.XsTimeStamp___assign__(self, other)

    def msTime(self) -> "int64_t":
        return _xsensdeviceapi_py35_64.XsTimeStamp_msTime(self)

    def setMsTime(self, t: 'int64_t') -> "void":
        return _xsensdeviceapi_py35_64.XsTimeStamp_setMsTime(self, t)

    def timeOfDay(self) -> "double":
        return _xsensdeviceapi_py35_64.XsTimeStamp_timeOfDay(self)

    def msTimeOfDay(self) -> "int64_t":
        return _xsensdeviceapi_py35_64.XsTimeStamp_msTimeOfDay(self)

    def secTime(self) -> "double":
        return _xsensdeviceapi_py35_64.XsTimeStamp_secTime(self)

    def setSecTime(self, t: 'double') -> "void":
        return _xsensdeviceapi_py35_64.XsTimeStamp_setSecTime(self, t)

    def __add__(self, other: 'XsTimeStamp') -> "XsTimeStamp":
        return _xsensdeviceapi_py35_64.XsTimeStamp___add__(self, other)

    def __sub__(self, other: 'XsTimeStamp') -> "XsTimeStamp":
        return _xsensdeviceapi_py35_64.XsTimeStamp___sub__(self, other)

    def __iadd__(self, other: 'XsTimeStamp') -> "XsTimeStamp &":
        return _xsensdeviceapi_py35_64.XsTimeStamp___iadd__(self, other)

    def __isub__(self, d: 'XsTimeStamp') -> "XsTimeStamp &":
        return _xsensdeviceapi_py35_64.XsTimeStamp___isub__(self, d)

    def __lt__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsTimeStamp___lt__(self, *args)

    def __le__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsTimeStamp___le__(self, *args)

    def __eq__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsTimeStamp___eq__(self, *args)

    def __gt__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsTimeStamp___gt__(self, *args)

    def __ge__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsTimeStamp___ge__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsTimeStamp___ne__(self, *args)

    def secondTime(self) -> "int64_t":
        return _xsensdeviceapi_py35_64.XsTimeStamp_secondTime(self)

    def milliSecondPart(self) -> "int32_t":
        return _xsensdeviceapi_py35_64.XsTimeStamp_milliSecondPart(self)

    def secondPart(self) -> "int32_t":
        return _xsensdeviceapi_py35_64.XsTimeStamp_secondPart(self)

    def minutePart(self) -> "int32_t":
        return _xsensdeviceapi_py35_64.XsTimeStamp_minutePart(self)

    def hourPart(self) -> "int32_t":
        return _xsensdeviceapi_py35_64.XsTimeStamp_hourPart(self)
    if _newclass:
        now = staticmethod(_xsensdeviceapi_py35_64.XsTimeStamp_now)
    else:
        now = _xsensdeviceapi_py35_64.XsTimeStamp_now
    if _newclass:
        nowMs = staticmethod(_xsensdeviceapi_py35_64.XsTimeStamp_nowMs)
    else:
        nowMs = _xsensdeviceapi_py35_64.XsTimeStamp_nowMs
    if _newclass:
        maxValue = staticmethod(_xsensdeviceapi_py35_64.XsTimeStamp_maxValue)
    else:
        maxValue = _xsensdeviceapi_py35_64.XsTimeStamp_maxValue

    def __preincr__(self) -> "XsTimeStamp &":
        return _xsensdeviceapi_py35_64.XsTimeStamp___preincr__(self)

    def __postincr__(self, arg2: 'int') -> "XsTimeStamp":
        return _xsensdeviceapi_py35_64.XsTimeStamp___postincr__(self, arg2)

    def __predecr__(self) -> "XsTimeStamp &":
        return _xsensdeviceapi_py35_64.XsTimeStamp___predecr__(self)

    def __postdecr__(self, arg2: 'int') -> "XsTimeStamp":
        return _xsensdeviceapi_py35_64.XsTimeStamp___postdecr__(self, arg2)

    def utcToLocalTime(self, *args) -> "XsTimeStamp":
        return _xsensdeviceapi_py35_64.XsTimeStamp_utcToLocalTime(self, *args)

    def localToUtcTime(self, *args) -> "XsTimeStamp":
        return _xsensdeviceapi_py35_64.XsTimeStamp_localToUtcTime(self, *args)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsTimeStamp
    __del__ = lambda self: None
XsTimeStamp_swigregister = _xsensdeviceapi_py35_64.XsTimeStamp_swigregister
XsTimeStamp_swigregister(XsTimeStamp)

def XsTimeStamp_now() -> "XsTimeStamp":
    return _xsensdeviceapi_py35_64.XsTimeStamp_now()
XsTimeStamp_now = _xsensdeviceapi_py35_64.XsTimeStamp_now

def XsTimeStamp_nowMs() -> "int64_t":
    return _xsensdeviceapi_py35_64.XsTimeStamp_nowMs()
XsTimeStamp_nowMs = _xsensdeviceapi_py35_64.XsTimeStamp_nowMs

def XsTimeStamp_maxValue() -> "XsTimeStamp":
    return _xsensdeviceapi_py35_64.XsTimeStamp_maxValue()
XsTimeStamp_maxValue = _xsensdeviceapi_py35_64.XsTimeStamp_maxValue

class XsMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsMatrix, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsMatrix
    __del__ = lambda self: None

    def setSize(self, rows: 'XsSize', cols: 'XsSize', stride: 'XsSize'=0) -> "void":
        return _xsensdeviceapi_py35_64.XsMatrix_setSize(self, rows, cols, stride)

    def __assign__(self, other: 'XsMatrix') -> "XsMatrix &":
        return _xsensdeviceapi_py35_64.XsMatrix___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsMatrix_empty(self)

    def setZero(self) -> "void":
        return _xsensdeviceapi_py35_64.XsMatrix_setZero(self)

    def offset(self, row: 'XsSize', column: 'XsSize') -> "XsSize":
        return _xsensdeviceapi_py35_64.XsMatrix_offset(self, row, column)

    def __mul__(self, scalar: 'XsReal') -> "XsMatrix":
        return _xsensdeviceapi_py35_64.XsMatrix___mul__(self, scalar)

    def fromQuaternion(self, quat: 'XsQuaternion') -> "XsMatrix &":
        return _xsensdeviceapi_py35_64.XsMatrix_fromQuaternion(self, quat)

    def zero(self) -> "void":
        return _xsensdeviceapi_py35_64.XsMatrix_zero(self)

    def rows(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsMatrix_rows(self)

    def cols(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsMatrix_cols(self)

    def stride(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsMatrix_stride(self)

    def data(self) -> "XsReal const *":
        return _xsensdeviceapi_py35_64.XsMatrix_data(self)

    def __eq__(self, other: 'XsMatrix') -> "bool":
        return _xsensdeviceapi_py35_64.XsMatrix___eq__(self, other)

    def isEqual(self, other: 'XsMatrix', tolerance: 'XsReal') -> "bool":
        return _xsensdeviceapi_py35_64.XsMatrix_isEqual(self, other, tolerance)

    def swap(self, b: 'XsMatrix') -> "void":
        return _xsensdeviceapi_py35_64.XsMatrix_swap(self, b)

    def toNdArray(self) -> "XsMatrix":
        return _xsensdeviceapi_py35_64.XsMatrix_toNdArray(self)

    def toNdArrayRef(self) -> "XsMatrix *":
        return _xsensdeviceapi_py35_64.XsMatrix_toNdArrayRef(self)

    def __init__(self, *args):
    	self.this = _swigLib.xsMatrix(*args)


    def __repr__(self):
    	return np.array_str(self.toNdArray())

XsMatrix_swigregister = _xsensdeviceapi_py35_64.XsMatrix_swigregister
XsMatrix_swigregister(XsMatrix)

MRV_Failed = _xsensdeviceapi_py35_64.MRV_Failed
MRV_Bad = _xsensdeviceapi_py35_64.MRV_Bad
MRV_Acceptable = _xsensdeviceapi_py35_64.MRV_Acceptable
MRV_Good = _xsensdeviceapi_py35_64.MRV_Good
MRV_Processing = _xsensdeviceapi_py35_64.MRV_Processing
XSF_SelfTestOk = _xsensdeviceapi_py35_64.XSF_SelfTestOk
XSF_OrientationValid = _xsensdeviceapi_py35_64.XSF_OrientationValid
XSF_GpsValid = _xsensdeviceapi_py35_64.XSF_GpsValid
XSF_NoRotationMask = _xsensdeviceapi_py35_64.XSF_NoRotationMask
XSF_NoRotationAborted = _xsensdeviceapi_py35_64.XSF_NoRotationAborted
XSF_NoRotationSamplesRejected = _xsensdeviceapi_py35_64.XSF_NoRotationSamplesRejected
XSF_NoRotationRunningNormally = _xsensdeviceapi_py35_64.XSF_NoRotationRunningNormally
XSF_RepresentativeMotion = _xsensdeviceapi_py35_64.XSF_RepresentativeMotion
XSF_ExternalClockSynced = _xsensdeviceapi_py35_64.XSF_ExternalClockSynced
XSF_ClipAccX = _xsensdeviceapi_py35_64.XSF_ClipAccX
XSF_ClipAccY = _xsensdeviceapi_py35_64.XSF_ClipAccY
XSF_ClipAccZ = _xsensdeviceapi_py35_64.XSF_ClipAccZ
XSF_ClipGyrX = _xsensdeviceapi_py35_64.XSF_ClipGyrX
XSF_ClipGyrY = _xsensdeviceapi_py35_64.XSF_ClipGyrY
XSF_ClipGyrZ = _xsensdeviceapi_py35_64.XSF_ClipGyrZ
XSF_ClipMagX = _xsensdeviceapi_py35_64.XSF_ClipMagX
XSF_ClipMagY = _xsensdeviceapi_py35_64.XSF_ClipMagY
XSF_ClipMagZ = _xsensdeviceapi_py35_64.XSF_ClipMagZ
XSF_Retransmitted = _xsensdeviceapi_py35_64.XSF_Retransmitted
XSF_ClippingDetected = _xsensdeviceapi_py35_64.XSF_ClippingDetected
XSF_Interpolated = _xsensdeviceapi_py35_64.XSF_Interpolated
XSF_SyncIn = _xsensdeviceapi_py35_64.XSF_SyncIn
XSF_SyncOut = _xsensdeviceapi_py35_64.XSF_SyncOut
XSF_FilterMode = _xsensdeviceapi_py35_64.XSF_FilterMode
XSF_HaveGnssTimePulse = _xsensdeviceapi_py35_64.XSF_HaveGnssTimePulse
XSFO_OffsetSelfTestOk = _xsensdeviceapi_py35_64.XSFO_OffsetSelfTestOk
XSFO_OffsetOrientationValid = _xsensdeviceapi_py35_64.XSFO_OffsetOrientationValid
XSFO_OffsetGpsValid = _xsensdeviceapi_py35_64.XSFO_OffsetGpsValid
XSFO_OffsetNoRotation = _xsensdeviceapi_py35_64.XSFO_OffsetNoRotation
XSFO_OffsetClipAccX = _xsensdeviceapi_py35_64.XSFO_OffsetClipAccX
XSFO_OffsetClipAccY = _xsensdeviceapi_py35_64.XSFO_OffsetClipAccY
XSFO_OffsetClipAccZ = _xsensdeviceapi_py35_64.XSFO_OffsetClipAccZ
XSFO_OffsetClipGyrX = _xsensdeviceapi_py35_64.XSFO_OffsetClipGyrX
XSFO_OffsetClipGyrY = _xsensdeviceapi_py35_64.XSFO_OffsetClipGyrY
XSFO_OffsetClipGyrZ = _xsensdeviceapi_py35_64.XSFO_OffsetClipGyrZ
XSFO_OffsetClipMagX = _xsensdeviceapi_py35_64.XSFO_OffsetClipMagX
XSFO_OffsetClipMagY = _xsensdeviceapi_py35_64.XSFO_OffsetClipMagY
XSFO_OffsetClipMagZ = _xsensdeviceapi_py35_64.XSFO_OffsetClipMagZ
XSFO_Retransmitted = _xsensdeviceapi_py35_64.XSFO_Retransmitted
XSFO_Interpolated = _xsensdeviceapi_py35_64.XSFO_Interpolated
XSFO_SyncIn = _xsensdeviceapi_py35_64.XSFO_SyncIn
XSFO_SyncOut = _xsensdeviceapi_py35_64.XSFO_SyncOut
XSFO_FilterMode = _xsensdeviceapi_py35_64.XSFO_FilterMode
XSFO_FilterModeNrOfBits = _xsensdeviceapi_py35_64.XSFO_FilterModeNrOfBits

def anyAccClipped(status: 'int') -> "bool":
    return _xsensdeviceapi_py35_64.anyAccClipped(status)
anyAccClipped = _xsensdeviceapi_py35_64.anyAccClipped

def anyGyrClipped(status: 'int') -> "bool":
    return _xsensdeviceapi_py35_64.anyGyrClipped(status)
anyGyrClipped = _xsensdeviceapi_py35_64.anyGyrClipped

def anyMagClipped(status: 'int') -> "bool":
    return _xsensdeviceapi_py35_64.anyMagClipped(status)
anyMagClipped = _xsensdeviceapi_py35_64.anyMagClipped
class XsStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self) -> "XsStatusFlag":
        return _xsensdeviceapi_py35_64.XsStatus_get(self)

    def set(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsStatus_set(self, *args)

    def __assign__(self, *args) -> "XsStatus const &":
        return _xsensdeviceapi_py35_64.XsStatus___assign__(self, *args)

    def __logior_assign__(self, *args) -> "XsStatus const &":
        return _xsensdeviceapi_py35_64.XsStatus___logior_assign__(self, *args)

    def __logand_assign__(self, *args) -> "XsStatus const &":
        return _xsensdeviceapi_py35_64.XsStatus___logand_assign__(self, *args)

    def anyAccClipped(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsStatus_anyAccClipped(self)

    def anyGyrClipped(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsStatus_anyGyrClipped(self)

    def anyMagClipped(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsStatus_anyMagClipped(self)

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64.XsStatus_clear(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsStatus
    __del__ = lambda self: None
XsStatus_swigregister = _xsensdeviceapi_py35_64.XsStatus_swigregister
XsStatus_swigregister(XsStatus)

class XsSimpleVersion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsSimpleVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsSimpleVersion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsSimpleVersion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsSimpleVersion const &') -> "XsSimpleVersion &":
        return _xsensdeviceapi_py35_64.XsSimpleVersion___assign__(self, other)

    def __eq__(self, other: 'XsSimpleVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsSimpleVersion___eq__(self, other)

    def __ne__(self, other: 'XsSimpleVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsSimpleVersion___ne__(self, other)

    def __lt__(self, other: 'XsSimpleVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsSimpleVersion___lt__(self, other)

    def __le__(self, other: 'XsSimpleVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsSimpleVersion___le__(self, other)

    def __gt__(self, other: 'XsSimpleVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsSimpleVersion___gt__(self, other)

    def __ge__(self, other: 'XsSimpleVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsSimpleVersion___ge__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSimpleVersion_empty(self)

    def major(self) -> "int":
        return _xsensdeviceapi_py35_64.XsSimpleVersion_major(self)

    def minor(self) -> "int":
        return _xsensdeviceapi_py35_64.XsSimpleVersion_minor(self)

    def revision(self) -> "int":
        return _xsensdeviceapi_py35_64.XsSimpleVersion_revision(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsSimpleVersion
    __del__ = lambda self: None
XsSimpleVersion_swigregister = _xsensdeviceapi_py35_64.XsSimpleVersion_swigregister
XsSimpleVersion_swigregister(XsSimpleVersion)

XSOT_None = _xsensdeviceapi_py35_64.XSOT_None
XSOT_HCHDM = _xsensdeviceapi_py35_64.XSOT_HCHDM
XSOT_HCHDG = _xsensdeviceapi_py35_64.XSOT_HCHDG
XSOT_TSS2 = _xsensdeviceapi_py35_64.XSOT_TSS2
XSOT_PHTRO = _xsensdeviceapi_py35_64.XSOT_PHTRO
XSOT_PRDID = _xsensdeviceapi_py35_64.XSOT_PRDID
XSOT_EM1000 = _xsensdeviceapi_py35_64.XSOT_EM1000
XSOT_PSONCMS = _xsensdeviceapi_py35_64.XSOT_PSONCMS
XSOT_HCMTW = _xsensdeviceapi_py35_64.XSOT_HCMTW
XSOT_HEHDT = _xsensdeviceapi_py35_64.XSOT_HEHDT
XSOT_HEROT = _xsensdeviceapi_py35_64.XSOT_HEROT
XSOT_GPGGA = _xsensdeviceapi_py35_64.XSOT_GPGGA
XSOT_PTCF = _xsensdeviceapi_py35_64.XSOT_PTCF
XSOT_XSVEL = _xsensdeviceapi_py35_64.XSOT_XSVEL
XSOT_GPZDA = _xsensdeviceapi_py35_64.XSOT_GPZDA
XSOT_GPRMC = _xsensdeviceapi_py35_64.XSOT_GPRMC
class XsPressure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsPressure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsPressure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsPressure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsPressure') -> "XsPressure const &":
        return _xsensdeviceapi_py35_64.XsPressure___assign__(self, other)

    def __eq__(self, other: 'XsPressure') -> "bool":
        return _xsensdeviceapi_py35_64.XsPressure___eq__(self, other)
    __swig_setmethods__["m_pressure"] = _xsensdeviceapi_py35_64.XsPressure_m_pressure_set
    __swig_getmethods__["m_pressure"] = _xsensdeviceapi_py35_64.XsPressure_m_pressure_get
    if _newclass:
        m_pressure = _swig_property(_xsensdeviceapi_py35_64.XsPressure_m_pressure_get, _xsensdeviceapi_py35_64.XsPressure_m_pressure_set)
    __swig_setmethods__["m_pressureAge"] = _xsensdeviceapi_py35_64.XsPressure_m_pressureAge_set
    __swig_getmethods__["m_pressureAge"] = _xsensdeviceapi_py35_64.XsPressure_m_pressureAge_get
    if _newclass:
        m_pressureAge = _swig_property(_xsensdeviceapi_py35_64.XsPressure_m_pressureAge_get, _xsensdeviceapi_py35_64.XsPressure_m_pressureAge_set)

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsPressure___str__(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsPressure
    __del__ = lambda self: None
XsPressure_swigregister = _xsensdeviceapi_py35_64.XsPressure_swigregister
XsPressure_swigregister(XsPressure)

XS_MAX_FILTERPROFILES = _xsensdeviceapi_py35_64.XS_MAX_FILTERPROFILES
XS_LEN_FILTERPROFILELABEL_TERM = _xsensdeviceapi_py35_64.XS_LEN_FILTERPROFILELABEL_TERM
XS_LEN_FILTERPROFILEKIND_TERM = _xsensdeviceapi_py35_64.XS_LEN_FILTERPROFILEKIND_TERM
XS_MAX_FILTERPROFILES_IN_MT = _xsensdeviceapi_py35_64.XS_MAX_FILTERPROFILES_IN_MT
class XsFilterProfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsFilterProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsFilterProfile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsFilterProfile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsFilterProfile
    __del__ = lambda self: None

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsFilterProfile_empty(self)

    def toXsString(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsFilterProfile_toXsString(self)

    def type(self) -> "uint8_t":
        return _xsensdeviceapi_py35_64.XsFilterProfile_type(self)

    def version(self) -> "uint8_t":
        return _xsensdeviceapi_py35_64.XsFilterProfile_version(self)

    def label(self) -> "char const *":
        return _xsensdeviceapi_py35_64.XsFilterProfile_label(self)

    def kind(self) -> "char const *":
        return _xsensdeviceapi_py35_64.XsFilterProfile_kind(self)

    def filterType(self) -> "char":
        return _xsensdeviceapi_py35_64.XsFilterProfile_filterType(self)

    def filterMajor(self) -> "uint8_t":
        return _xsensdeviceapi_py35_64.XsFilterProfile_filterMajor(self)

    def filterMinor(self) -> "uint8_t":
        return _xsensdeviceapi_py35_64.XsFilterProfile_filterMinor(self)

    def setType(self, type_: 'uint8_t') -> "void":
        return _xsensdeviceapi_py35_64.XsFilterProfile_setType(self, type_)

    def setVersion(self, version_: 'uint8_t') -> "void":
        return _xsensdeviceapi_py35_64.XsFilterProfile_setVersion(self, version_)

    def setLabel(self, label_: 'char const *') -> "void":
        return _xsensdeviceapi_py35_64.XsFilterProfile_setLabel(self, label_)

    def setKind(self, kind_: 'char const *') -> "void":
        return _xsensdeviceapi_py35_64.XsFilterProfile_setKind(self, kind_)

    def setFilterType(self, filterType_: 'char') -> "void":
        return _xsensdeviceapi_py35_64.XsFilterProfile_setFilterType(self, filterType_)

    def setFilterVersion(self, major_: 'uint8_t', minor_: 'uint8_t') -> "void":
        return _xsensdeviceapi_py35_64.XsFilterProfile_setFilterVersion(self, major_, minor_)

    def swap(self, other: 'XsFilterProfile') -> "void":
        return _xsensdeviceapi_py35_64.XsFilterProfile_swap(self, other)

    def __eq__(self, other: 'XsFilterProfile') -> "bool":
        return _xsensdeviceapi_py35_64.XsFilterProfile___eq__(self, other)
XsFilterProfile_swigregister = _xsensdeviceapi_py35_64.XsFilterProfile_swigregister
XsFilterProfile_swigregister(XsFilterProfile)

class XsFilterProfileArray(_XsFilterProfileArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsFilterProfileArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsFilterProfileArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsFilterProfileArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsFilterProfileArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsFilterProfileArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsFilterProfileArray
    __del__ = lambda self: None
XsFilterProfileArray_swigregister = _xsensdeviceapi_py35_64.XsFilterProfileArray_swigregister
XsFilterProfileArray_swigregister(XsFilterProfileArray)
g_xsFilterProfileArrayDescriptor = cvar.g_xsFilterProfileArrayDescriptor

XP_None = _xsensdeviceapi_py35_64.XP_None
XP_Xbus = _xsensdeviceapi_py35_64.XP_Xbus
XP_Nmea = _xsensdeviceapi_py35_64.XP_Nmea
class XsVersion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsVersion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsVersion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsVersion const &') -> "XsVersion &":
        return _xsensdeviceapi_py35_64.XsVersion___assign__(self, other)

    def isEqual(self, other: 'XsVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsVersion_isEqual(self, other)

    def __eq__(self, other: 'XsVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsVersion___eq__(self, other)

    def __ne__(self, other: 'XsVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsVersion___ne__(self, other)

    def __lt__(self, other: 'XsVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsVersion___lt__(self, other)

    def __le__(self, other: 'XsVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsVersion___le__(self, other)

    def __gt__(self, other: 'XsVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsVersion___gt__(self, other)

    def __ge__(self, other: 'XsVersion const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsVersion___ge__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsVersion_empty(self)

    def toXsString(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsVersion_toXsString(self)

    def toSimpleString(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsVersion_toSimpleString(self)

    def toSimpleVersion(self) -> "XsSimpleVersion":
        return _xsensdeviceapi_py35_64.XsVersion_toSimpleVersion(self)

    def major(self) -> "int":
        return _xsensdeviceapi_py35_64.XsVersion_major(self)

    def minor(self) -> "int":
        return _xsensdeviceapi_py35_64.XsVersion_minor(self)

    def revision(self) -> "int":
        return _xsensdeviceapi_py35_64.XsVersion_revision(self)

    def build(self) -> "int":
        return _xsensdeviceapi_py35_64.XsVersion_build(self)

    def reposVersion(self) -> "int":
        return _xsensdeviceapi_py35_64.XsVersion_reposVersion(self)

    def extra(self) -> "XsString const &":
        return _xsensdeviceapi_py35_64.XsVersion_extra(self)

    def setMajor(self, major: 'int') -> "void":
        return _xsensdeviceapi_py35_64.XsVersion_setMajor(self, major)

    def setMinor(self, minor: 'int') -> "void":
        return _xsensdeviceapi_py35_64.XsVersion_setMinor(self, minor)

    def setRevision(self, revision: 'int') -> "void":
        return _xsensdeviceapi_py35_64.XsVersion_setRevision(self, revision)

    def setBuild(self, build: 'int') -> "void":
        return _xsensdeviceapi_py35_64.XsVersion_setBuild(self, build)

    def setReposVersion(self, reposVersion: 'int') -> "void":
        return _xsensdeviceapi_py35_64.XsVersion_setReposVersion(self, reposVersion)

    def setExtra(self, extra: 'XsString') -> "void":
        return _xsensdeviceapi_py35_64.XsVersion_setExtra(self, extra)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsVersion
    __del__ = lambda self: None
XsVersion_swigregister = _xsensdeviceapi_py35_64.XsVersion_swigregister
XsVersion_swigregister(XsVersion)

class XsUShortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsUShortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsUShortVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsUShortVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsUShortVector') -> "XsUShortVector &":
        return _xsensdeviceapi_py35_64.XsUShortVector___assign__(self, other)

    def __eq__(self, other: 'XsUShortVector') -> "bool":
        return _xsensdeviceapi_py35_64.XsUShortVector___eq__(self, other)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsUShortVector_size(self)

    def data(self) -> "unsigned short const *":
        return _xsensdeviceapi_py35_64.XsUShortVector_data(self)

    def __getitem__(self, index: 'XsSize') -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsUShortVector___getitem__(self, index)

    def get(self, index: 'XsSize') -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsUShortVector_get(self, index)

    def __setitem__(self, index: 'XsSize', val: 'uint16_t') -> "void":
        return _xsensdeviceapi_py35_64.XsUShortVector___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'uint16_t') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64.XsUShortVector_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsUShortVector___len__(self)

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsUShortVector___str__(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsUShortVector
    __del__ = lambda self: None
XsUShortVector_swigregister = _xsensdeviceapi_py35_64.XsUShortVector_swigregister
XsUShortVector_swigregister(XsUShortVector)

class XsScrData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsScrData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsScrData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_acc"] = _xsensdeviceapi_py35_64.XsScrData_m_acc_set
    __swig_getmethods__["m_acc"] = _xsensdeviceapi_py35_64.XsScrData_m_acc_get
    if _newclass:
        m_acc = _swig_property(_xsensdeviceapi_py35_64.XsScrData_m_acc_get, _xsensdeviceapi_py35_64.XsScrData_m_acc_set)
    __swig_setmethods__["m_gyr"] = _xsensdeviceapi_py35_64.XsScrData_m_gyr_set
    __swig_getmethods__["m_gyr"] = _xsensdeviceapi_py35_64.XsScrData_m_gyr_get
    if _newclass:
        m_gyr = _swig_property(_xsensdeviceapi_py35_64.XsScrData_m_gyr_get, _xsensdeviceapi_py35_64.XsScrData_m_gyr_set)
    __swig_setmethods__["m_mag"] = _xsensdeviceapi_py35_64.XsScrData_m_mag_set
    __swig_getmethods__["m_mag"] = _xsensdeviceapi_py35_64.XsScrData_m_mag_get
    if _newclass:
        m_mag = _swig_property(_xsensdeviceapi_py35_64.XsScrData_m_mag_get, _xsensdeviceapi_py35_64.XsScrData_m_mag_set)
    __swig_setmethods__["m_temp"] = _xsensdeviceapi_py35_64.XsScrData_m_temp_set
    __swig_getmethods__["m_temp"] = _xsensdeviceapi_py35_64.XsScrData_m_temp_get
    if _newclass:
        m_temp = _swig_property(_xsensdeviceapi_py35_64.XsScrData_m_temp_get, _xsensdeviceapi_py35_64.XsScrData_m_temp_set)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsScrData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsScrData
    __del__ = lambda self: None
XsScrData_swigregister = _xsensdeviceapi_py35_64.XsScrData_swigregister
XsScrData_swigregister(XsScrData)

XBC_4k8 = _xsensdeviceapi_py35_64.XBC_4k8
XBC_9k6 = _xsensdeviceapi_py35_64.XBC_9k6
XBC_19k2 = _xsensdeviceapi_py35_64.XBC_19k2
XBC_38k4 = _xsensdeviceapi_py35_64.XBC_38k4
XBC_57k6 = _xsensdeviceapi_py35_64.XBC_57k6
XBC_115k2 = _xsensdeviceapi_py35_64.XBC_115k2
XBC_230k4 = _xsensdeviceapi_py35_64.XBC_230k4
XBC_460k8 = _xsensdeviceapi_py35_64.XBC_460k8
XBC_921k6 = _xsensdeviceapi_py35_64.XBC_921k6
XBC_921k6Legacy = _xsensdeviceapi_py35_64.XBC_921k6Legacy
XBC_2MegaBaud = _xsensdeviceapi_py35_64.XBC_2MegaBaud
XBC_3_5MegaBaud = _xsensdeviceapi_py35_64.XBC_3_5MegaBaud
XBC_4MegaBaud = _xsensdeviceapi_py35_64.XBC_4MegaBaud
XBC_Invalid = _xsensdeviceapi_py35_64.XBC_Invalid
B230400 = _xsensdeviceapi_py35_64.B230400
B460800 = _xsensdeviceapi_py35_64.B460800
B921600 = _xsensdeviceapi_py35_64.B921600
XBR_Invalid = _xsensdeviceapi_py35_64.XBR_Invalid
XBR_4800 = _xsensdeviceapi_py35_64.XBR_4800
XBR_9600 = _xsensdeviceapi_py35_64.XBR_9600
XBR_19k2 = _xsensdeviceapi_py35_64.XBR_19k2
XBR_38k4 = _xsensdeviceapi_py35_64.XBR_38k4
XBR_57k6 = _xsensdeviceapi_py35_64.XBR_57k6
XBR_115k2 = _xsensdeviceapi_py35_64.XBR_115k2
XBR_230k4 = _xsensdeviceapi_py35_64.XBR_230k4
XBR_460k8 = _xsensdeviceapi_py35_64.XBR_460k8
XBR_921k6 = _xsensdeviceapi_py35_64.XBR_921k6
XBR_2000k = _xsensdeviceapi_py35_64.XBR_2000k
XBR_3500k = _xsensdeviceapi_py35_64.XBR_3500k
XBR_4000k = _xsensdeviceapi_py35_64.XBR_4000k

def codeToRate(baudcode: 'XsBaudCode') -> "XsBaudRate":
    return _xsensdeviceapi_py35_64.codeToRate(baudcode)
codeToRate = _xsensdeviceapi_py35_64.codeToRate

def rateToCode(baudrate: 'XsBaudRate') -> "XsBaudCode":
    return _xsensdeviceapi_py35_64.rateToCode(baudrate)
rateToCode = _xsensdeviceapi_py35_64.rateToCode

def rateToNumeric(baudrate: 'XsBaudRate') -> "int":
    return _xsensdeviceapi_py35_64.rateToNumeric(baudrate)
rateToNumeric = _xsensdeviceapi_py35_64.rateToNumeric

def numericToRate(numeric: 'int') -> "XsBaudRate":
    return _xsensdeviceapi_py35_64.numericToRate(numeric)
numericToRate = _xsensdeviceapi_py35_64.numericToRate
XSENS_VENDOR_ID = _xsensdeviceapi_py35_64.XSENS_VENDOR_ID
FTDI_VENDOR_ID = _xsensdeviceapi_py35_64.FTDI_VENDOR_ID
XPLO_Invalid = _xsensdeviceapi_py35_64.XPLO_Invalid
XPLO_RTS_Set = _xsensdeviceapi_py35_64.XPLO_RTS_Set
XPLO_RTS_Clear = _xsensdeviceapi_py35_64.XPLO_RTS_Clear
XPLO_RTS_Ignore = _xsensdeviceapi_py35_64.XPLO_RTS_Ignore
XPLO_DTR_Set = _xsensdeviceapi_py35_64.XPLO_DTR_Set
XPLO_DTR_Clear = _xsensdeviceapi_py35_64.XPLO_DTR_Clear
XPLO_DTR_Ignore = _xsensdeviceapi_py35_64.XPLO_DTR_Ignore
XPLO_All_Set = _xsensdeviceapi_py35_64.XPLO_All_Set
XPLO_All_Clear = _xsensdeviceapi_py35_64.XPLO_All_Clear
XPLO_All_Ignore = _xsensdeviceapi_py35_64.XPLO_All_Ignore
XPLO_RtsCtsFlowControl = _xsensdeviceapi_py35_64.XPLO_RtsCtsFlowControl
class XsPortInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsPortInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsPortInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsPortInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64.XsPortInfo_clear(self)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsPortInfo_empty(self)

    def __gt__(self, p: 'XsPortInfo') -> "bool":
        return _xsensdeviceapi_py35_64.XsPortInfo___gt__(self, p)

    def __lt__(self, p: 'XsPortInfo') -> "bool":
        return _xsensdeviceapi_py35_64.XsPortInfo___lt__(self, p)

    def __eq__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsPortInfo___eq__(self, *args)

    def portNumber(self) -> "int":
        return _xsensdeviceapi_py35_64.XsPortInfo_portNumber(self)

    def portName(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsPortInfo_portName(self)

    def setPortName(self, portName_: 'XsString') -> "void":
        return _xsensdeviceapi_py35_64.XsPortInfo_setPortName(self, portName_)

    def isUsb(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsPortInfo_isUsb(self)

    def isNetwork(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsPortInfo_isNetwork(self)

    def networkServiceName(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsPortInfo_networkServiceName(self)

    def usbBus(self) -> "int":
        return _xsensdeviceapi_py35_64.XsPortInfo_usbBus(self)

    def usbAddress(self) -> "int":
        return _xsensdeviceapi_py35_64.XsPortInfo_usbAddress(self)

    def baudrate(self) -> "XsBaudRate":
        return _xsensdeviceapi_py35_64.XsPortInfo_baudrate(self)

    def setBaudrate(self, baudrate_: 'XsBaudRate') -> "void":
        return _xsensdeviceapi_py35_64.XsPortInfo_setBaudrate(self, baudrate_)

    def deviceId(self) -> "XsDeviceId":
        return _xsensdeviceapi_py35_64.XsPortInfo_deviceId(self)

    def setDeviceId(self, deviceId_: 'XsDeviceId') -> "void":
        return _xsensdeviceapi_py35_64.XsPortInfo_setDeviceId(self, deviceId_)

    def linesOptions(self) -> "XsPortLinesOptions":
        return _xsensdeviceapi_py35_64.XsPortInfo_linesOptions(self)

    def setLinesOptions(self, linesOptions: 'XsPortLinesOptions') -> "void":
        return _xsensdeviceapi_py35_64.XsPortInfo_setLinesOptions(self, linesOptions)

    def getVidPid(self, vid: 'uint16_t &', pid: 'uint16_t &') -> "void":
        return _xsensdeviceapi_py35_64.XsPortInfo_getVidPid(self, vid, pid)

    def setVidPid(self, vid: 'uint16_t', pid: 'uint16_t') -> "void":
        return _xsensdeviceapi_py35_64.XsPortInfo_setVidPid(self, vid, pid)

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsPortInfo___str__(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsPortInfo
    __del__ = lambda self: None
XsPortInfo_swigregister = _xsensdeviceapi_py35_64.XsPortInfo_swigregister
XsPortInfo_swigregister(XsPortInfo)

class XsPortInfoArray(_XsPortInfoArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsPortInfoArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsPortInfoArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsPortInfoArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsPortInfoArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsPortInfoArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsPortInfoArray___str__(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsPortInfoArray
    __del__ = lambda self: None
XsPortInfoArray_swigregister = _xsensdeviceapi_py35_64.XsPortInfoArray_swigregister
XsPortInfoArray_swigregister(XsPortInfoArray)
g_xsPortInfoArrayDescriptor = cvar.g_xsPortInfoArrayDescriptor

class XsCalibratedData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsCalibratedData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsCalibratedData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_acc"] = _xsensdeviceapi_py35_64.XsCalibratedData_m_acc_set
    __swig_getmethods__["m_acc"] = _xsensdeviceapi_py35_64.XsCalibratedData_m_acc_get
    if _newclass:
        m_acc = _swig_property(_xsensdeviceapi_py35_64.XsCalibratedData_m_acc_get, _xsensdeviceapi_py35_64.XsCalibratedData_m_acc_set)
    __swig_setmethods__["m_gyr"] = _xsensdeviceapi_py35_64.XsCalibratedData_m_gyr_set
    __swig_getmethods__["m_gyr"] = _xsensdeviceapi_py35_64.XsCalibratedData_m_gyr_get
    if _newclass:
        m_gyr = _swig_property(_xsensdeviceapi_py35_64.XsCalibratedData_m_gyr_get, _xsensdeviceapi_py35_64.XsCalibratedData_m_gyr_set)
    __swig_setmethods__["m_mag"] = _xsensdeviceapi_py35_64.XsCalibratedData_m_mag_set
    __swig_getmethods__["m_mag"] = _xsensdeviceapi_py35_64.XsCalibratedData_m_mag_get
    if _newclass:
        m_mag = _swig_property(_xsensdeviceapi_py35_64.XsCalibratedData_m_mag_get, _xsensdeviceapi_py35_64.XsCalibratedData_m_mag_set)

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsCalibratedData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsCalibratedData
    __del__ = lambda self: None

    def __assign__(self, other: 'XsCalibratedData') -> "XsCalibratedData &":
        return _xsensdeviceapi_py35_64.XsCalibratedData___assign__(self, other)
XsCalibratedData_swigregister = _xsensdeviceapi_py35_64.XsCalibratedData_swigregister
XsCalibratedData_swigregister(XsCalibratedData)

XCFF_11Bit_Identifier = _xsensdeviceapi_py35_64.XCFF_11Bit_Identifier
XCFF_29Bit_Identifier = _xsensdeviceapi_py35_64.XCFF_29Bit_Identifier
XS_MAX_CANOUTPUTCONFIGURATIONS = _xsensdeviceapi_py35_64.XS_MAX_CANOUTPUTCONFIGURATIONS
class XsCanOutputConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsCanOutputConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsCanOutputConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_frameFormat"] = _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_frameFormat_set
    __swig_getmethods__["m_frameFormat"] = _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_frameFormat_get
    if _newclass:
        m_frameFormat = _swig_property(_xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_frameFormat_get, _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_frameFormat_set)
    __swig_setmethods__["m_dataIdentifier"] = _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_dataIdentifier_set
    __swig_getmethods__["m_dataIdentifier"] = _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_dataIdentifier_get
    if _newclass:
        m_dataIdentifier = _swig_property(_xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_dataIdentifier_get, _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_dataIdentifier_set)
    __swig_setmethods__["m_id"] = _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_id_set
    __swig_getmethods__["m_id"] = _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_id_get
    if _newclass:
        m_id = _swig_property(_xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_id_get, _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_id_set)
    __swig_setmethods__["m_frequency"] = _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_frequency_set
    __swig_getmethods__["m_frequency"] = _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_frequency_get
    if _newclass:
        m_frequency = _swig_property(_xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_frequency_get, _xsensdeviceapi_py35_64.XsCanOutputConfiguration_m_frequency_set)

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsCanOutputConfiguration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'XsCanOutputConfiguration') -> "bool":
        return _xsensdeviceapi_py35_64.XsCanOutputConfiguration___eq__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsCanOutputConfiguration
    __del__ = lambda self: None
XsCanOutputConfiguration_swigregister = _xsensdeviceapi_py35_64.XsCanOutputConfiguration_swigregister
XsCanOutputConfiguration_swigregister(XsCanOutputConfiguration)

class XsCanOutputConfigurationArray(_XsCanOutputConfigurationArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsCanOutputConfigurationArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsCanOutputConfigurationArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsCanOutputConfigurationArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsCanOutputConfigurationArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsCanOutputConfigurationArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsCanOutputConfigurationArray
    __del__ = lambda self: None
XsCanOutputConfigurationArray_swigregister = _xsensdeviceapi_py35_64.XsCanOutputConfigurationArray_swigregister
XsCanOutputConfigurationArray_swigregister(XsCanOutputConfigurationArray)
g_xsCanOutputConfigurationArrayDescriptor = cvar.g_xsCanOutputConfigurationArrayDescriptor

XDC_Invalid = _xsensdeviceapi_py35_64.XDC_Invalid
XDC_Acc = _xsensdeviceapi_py35_64.XDC_Acc
XDC_Gyr = _xsensdeviceapi_py35_64.XDC_Gyr
XDC_Mag = _xsensdeviceapi_py35_64.XDC_Mag
XDC_Baro = _xsensdeviceapi_py35_64.XDC_Baro
XDC_Gnss = _xsensdeviceapi_py35_64.XDC_Gnss
XDC_Imu = _xsensdeviceapi_py35_64.XDC_Imu
XDC_Vru = _xsensdeviceapi_py35_64.XDC_Vru
XDC_Ahrs = _xsensdeviceapi_py35_64.XDC_Ahrs
XDC_GnssIns = _xsensdeviceapi_py35_64.XDC_GnssIns
class XsDeviceCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDeviceCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsDeviceCapabilities, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDeviceCapabilities(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsDeviceCapabilities') -> "XsDeviceCapabilities const &":
        return _xsensdeviceapi_py35_64.XsDeviceCapabilities___assign__(self, other)

    def hasAccelerometer(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceCapabilities_hasAccelerometer(self)

    def hasGyroscope(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceCapabilities_hasGyroscope(self)

    def hasMagnetometer(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceCapabilities_hasMagnetometer(self)

    def hasBarometer(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceCapabilities_hasBarometer(self)

    def hasGnss(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceCapabilities_hasGnss(self)

    def isImu(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceCapabilities_isImu(self)

    def isVru(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceCapabilities_isVru(self)

    def isAhrs(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceCapabilities_isAhrs(self)

    def isGnssIns(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceCapabilities_isGnssIns(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDeviceCapabilities
    __del__ = lambda self: None
XsDeviceCapabilities_swigregister = _xsensdeviceapi_py35_64.XsDeviceCapabilities_swigregister
XsDeviceCapabilities_swigregister(XsDeviceCapabilities)

HAVE_WCSNCASECMP = _xsensdeviceapi_py35_64.HAVE_WCSNCASECMP
HAVE_WCSCASECMP = _xsensdeviceapi_py35_64.HAVE_WCSCASECMP
HAVE_STRCASECMP = _xsensdeviceapi_py35_64.HAVE_STRCASECMP
HAVE_STRNCASECMP = _xsensdeviceapi_py35_64.HAVE_STRNCASECMP
HAVE_STRDUP = _xsensdeviceapi_py35_64.HAVE_STRDUP
HAVE_WCSDUP = _xsensdeviceapi_py35_64.HAVE_WCSDUP
HAVE_REALPATH = _xsensdeviceapi_py35_64.HAVE_REALPATH
HAVE_UNLINK = _xsensdeviceapi_py35_64.HAVE_UNLINK
HAVE_ISNAN = _xsensdeviceapi_py35_64.HAVE_ISNAN
HAVE_FILENO = _xsensdeviceapi_py35_64.HAVE_FILENO
class XsMatrix3x3(XsMatrix):
    __swig_setmethods__ = {}
    for _s in [XsMatrix]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsMatrix3x3, name, value)
    __swig_getmethods__ = {}
    for _s in [XsMatrix]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsMatrix3x3, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsMatrix3x3
    __del__ = lambda self: None
XsMatrix3x3_swigregister = _xsensdeviceapi_py35_64.XsMatrix3x3_swigregister
XsMatrix3x3_swigregister(XsMatrix3x3)

class int24_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int24_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int24_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_vals"] = _xsensdeviceapi_py35_64.int24_t_m_vals_set
    __swig_getmethods__["m_vals"] = _xsensdeviceapi_py35_64.int24_t_m_vals_get
    if _newclass:
        m_vals = _swig_property(_xsensdeviceapi_py35_64.int24_t_m_vals_get, _xsensdeviceapi_py35_64.int24_t_m_vals_set)

    def toDouble(self) -> "double":
        return _xsensdeviceapi_py35_64.int24_t_toDouble(self)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_int24_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_int24_t
    __del__ = lambda self: None
int24_t_swigregister = _xsensdeviceapi_py35_64.int24_t_swigregister
int24_t_swigregister(int24_t)

class XsFingerSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsFingerSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsFingerSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_iQ"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_iQ_set
    __swig_getmethods__["m_iQ"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_iQ_get
    if _newclass:
        m_iQ = _swig_property(_xsensdeviceapi_py35_64.XsFingerSnapshot_m_iQ_get, _xsensdeviceapi_py35_64.XsFingerSnapshot_m_iQ_set)
    __swig_setmethods__["m_iV"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_iV_set
    __swig_getmethods__["m_iV"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_iV_get
    if _newclass:
        m_iV = _swig_property(_xsensdeviceapi_py35_64.XsFingerSnapshot_m_iV_get, _xsensdeviceapi_py35_64.XsFingerSnapshot_m_iV_set)
    __swig_setmethods__["m_mag"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_mag_set
    __swig_getmethods__["m_mag"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_mag_get
    if _newclass:
        m_mag = _swig_property(_xsensdeviceapi_py35_64.XsFingerSnapshot_m_mag_get, _xsensdeviceapi_py35_64.XsFingerSnapshot_m_mag_set)
    __swig_setmethods__["m_flags"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_flags_set
    __swig_getmethods__["m_flags"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_flags_get
    if _newclass:
        m_flags = _swig_property(_xsensdeviceapi_py35_64.XsFingerSnapshot_m_flags_get, _xsensdeviceapi_py35_64.XsFingerSnapshot_m_flags_set)
    __swig_setmethods__["m_ccacc"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_ccacc_set
    __swig_getmethods__["m_ccacc"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_ccacc_get
    if _newclass:
        m_ccacc = _swig_property(_xsensdeviceapi_py35_64.XsFingerSnapshot_m_ccacc_get, _xsensdeviceapi_py35_64.XsFingerSnapshot_m_ccacc_set)
    __swig_setmethods__["m_ccgyr"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_ccgyr_set
    __swig_getmethods__["m_ccgyr"] = _xsensdeviceapi_py35_64.XsFingerSnapshot_m_ccgyr_get
    if _newclass:
        m_ccgyr = _swig_property(_xsensdeviceapi_py35_64.XsFingerSnapshot_m_ccgyr_get, _xsensdeviceapi_py35_64.XsFingerSnapshot_m_ccgyr_set)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsFingerSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsFingerSnapshot
    __del__ = lambda self: None
XsFingerSnapshot_swigregister = _xsensdeviceapi_py35_64.XsFingerSnapshot_swigregister
XsFingerSnapshot_swigregister(XsFingerSnapshot)

class XsGloveSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsGloveSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsGloveSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_snapshotCounter"] = _xsensdeviceapi_py35_64.XsGloveSnapshot_m_snapshotCounter_set
    __swig_getmethods__["m_snapshotCounter"] = _xsensdeviceapi_py35_64.XsGloveSnapshot_m_snapshotCounter_get
    if _newclass:
        m_snapshotCounter = _swig_property(_xsensdeviceapi_py35_64.XsGloveSnapshot_m_snapshotCounter_get, _xsensdeviceapi_py35_64.XsGloveSnapshot_m_snapshotCounter_set)
    __swig_setmethods__["m_validSampleFlags"] = _xsensdeviceapi_py35_64.XsGloveSnapshot_m_validSampleFlags_set
    __swig_getmethods__["m_validSampleFlags"] = _xsensdeviceapi_py35_64.XsGloveSnapshot_m_validSampleFlags_get
    if _newclass:
        m_validSampleFlags = _swig_property(_xsensdeviceapi_py35_64.XsGloveSnapshot_m_validSampleFlags_get, _xsensdeviceapi_py35_64.XsGloveSnapshot_m_validSampleFlags_set)
    __swig_setmethods__["m_timestamp"] = _xsensdeviceapi_py35_64.XsGloveSnapshot_m_timestamp_set
    __swig_getmethods__["m_timestamp"] = _xsensdeviceapi_py35_64.XsGloveSnapshot_m_timestamp_get
    if _newclass:
        m_timestamp = _swig_property(_xsensdeviceapi_py35_64.XsGloveSnapshot_m_timestamp_get, _xsensdeviceapi_py35_64.XsGloveSnapshot_m_timestamp_set)
    __swig_setmethods__["m_carpusOffset"] = _xsensdeviceapi_py35_64.XsGloveSnapshot_m_carpusOffset_set
    __swig_getmethods__["m_carpusOffset"] = _xsensdeviceapi_py35_64.XsGloveSnapshot_m_carpusOffset_get
    if _newclass:
        m_carpusOffset = _swig_property(_xsensdeviceapi_py35_64.XsGloveSnapshot_m_carpusOffset_get, _xsensdeviceapi_py35_64.XsGloveSnapshot_m_carpusOffset_set)
    __swig_setmethods__["m_fingers"] = _xsensdeviceapi_py35_64.XsGloveSnapshot_m_fingers_set
    __swig_getmethods__["m_fingers"] = _xsensdeviceapi_py35_64.XsGloveSnapshot_m_fingers_get
    if _newclass:
        m_fingers = _swig_property(_xsensdeviceapi_py35_64.XsGloveSnapshot_m_fingers_get, _xsensdeviceapi_py35_64.XsGloveSnapshot_m_fingers_set)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsGloveSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsGloveSnapshot
    __del__ = lambda self: None
XsGloveSnapshot_swigregister = _xsensdeviceapi_py35_64.XsGloveSnapshot_swigregister
XsGloveSnapshot_swigregister(XsGloveSnapshot)

class XsOutputConfigurationArray(_XsOutputConfigurationArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsOutputConfigurationArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsOutputConfigurationArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsOutputConfigurationArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsOutputConfigurationArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsOutputConfigurationArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsOutputConfigurationArray
    __del__ = lambda self: None
XsOutputConfigurationArray_swigregister = _xsensdeviceapi_py35_64.XsOutputConfigurationArray_swigregister
XsOutputConfigurationArray_swigregister(XsOutputConfigurationArray)
g_xsOutputConfigurationArrayDescriptor = cvar.g_xsOutputConfigurationArrayDescriptor

XSO_None = _xsensdeviceapi_py35_64.XSO_None
XSO_Calibrate = _xsensdeviceapi_py35_64.XSO_Calibrate
XSO_Orientation = _xsensdeviceapi_py35_64.XSO_Orientation
XSO_KeepLastLiveData = _xsensdeviceapi_py35_64.XSO_KeepLastLiveData
XSO_RetainLiveData = _xsensdeviceapi_py35_64.XSO_RetainLiveData
XSO_RetainBufferedData = _xsensdeviceapi_py35_64.XSO_RetainBufferedData
XSO_OrientationInLiveStream = _xsensdeviceapi_py35_64.XSO_OrientationInLiveStream
XSO_OrientationInBufferedStream = _xsensdeviceapi_py35_64.XSO_OrientationInBufferedStream
XSO_ApplyOrientationResetToCalData = _xsensdeviceapi_py35_64.XSO_ApplyOrientationResetToCalData
XSO_InterpolateMissingData = _xsensdeviceapi_py35_64.XSO_InterpolateMissingData
XSO_SkipDataBundling = _xsensdeviceapi_py35_64.XSO_SkipDataBundling
XSO_ExpectNoRetransmissionsInFile = _xsensdeviceapi_py35_64.XSO_ExpectNoRetransmissionsInFile
XSO_Reserved = _xsensdeviceapi_py35_64.XSO_Reserved
XSO_All = _xsensdeviceapi_py35_64.XSO_All
XSF_StartRecordingIn = _xsensdeviceapi_py35_64.XSF_StartRecordingIn
XSF_StopRecordingIn = _xsensdeviceapi_py35_64.XSF_StopRecordingIn
XSF_ResetTimer = _xsensdeviceapi_py35_64.XSF_ResetTimer
XSF_TriggerIndication = _xsensdeviceapi_py35_64.XSF_TriggerIndication
XSF_IntervalTransitionMeasurement = _xsensdeviceapi_py35_64.XSF_IntervalTransitionMeasurement
XSF_IntervalTransitionRecording = _xsensdeviceapi_py35_64.XSF_IntervalTransitionRecording
XSF_GotoOperational = _xsensdeviceapi_py35_64.XSF_GotoOperational
XSF_SampleAndSend = _xsensdeviceapi_py35_64.XSF_SampleAndSend
XSF_SendLatest = _xsensdeviceapi_py35_64.XSF_SendLatest
XSF_ClockBiasEstimation = _xsensdeviceapi_py35_64.XSF_ClockBiasEstimation
XSF_PulseWithModulation = _xsensdeviceapi_py35_64.XSF_PulseWithModulation
XSF_StartSampling = _xsensdeviceapi_py35_64.XSF_StartSampling
XSF_StartRecordingOut = _xsensdeviceapi_py35_64.XSF_StartRecordingOut
XSF_StopRecordingOut = _xsensdeviceapi_py35_64.XSF_StopRecordingOut
XSF_Gnss1Pps = _xsensdeviceapi_py35_64.XSF_Gnss1Pps
XSF_BusSync = _xsensdeviceapi_py35_64.XSF_BusSync
XSF_Invalid = _xsensdeviceapi_py35_64.XSF_Invalid
XSF_Count = _xsensdeviceapi_py35_64.XSF_Count

def xsTypesVersion(*args) -> "XsVersion":
    return _xsensdeviceapi_py35_64.xsTypesVersion(*args)
xsTypesVersion = _xsensdeviceapi_py35_64.xsTypesVersion
class XsInt64Array(_XsInt64ArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsInt64ArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsInt64Array, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsInt64ArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsInt64Array, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsInt64Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsInt64Array___str__(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsInt64Array
    __del__ = lambda self: None
XsInt64Array_swigregister = _xsensdeviceapi_py35_64.XsInt64Array_swigregister
XsInt64Array_swigregister(XsInt64Array)
g_xsInt64ArrayDescriptor = cvar.g_xsInt64ArrayDescriptor

XSL_Inputs = _xsensdeviceapi_py35_64.XSL_Inputs
XSL_In1 = _xsensdeviceapi_py35_64.XSL_In1
XSL_In2 = _xsensdeviceapi_py35_64.XSL_In2
XSL_Bi1In = _xsensdeviceapi_py35_64.XSL_Bi1In
XSL_ClockIn = _xsensdeviceapi_py35_64.XSL_ClockIn
XSL_CtsIn = _xsensdeviceapi_py35_64.XSL_CtsIn
XSL_GnssClockIn = _xsensdeviceapi_py35_64.XSL_GnssClockIn
XSL_ExtTimepulseIn = _xsensdeviceapi_py35_64.XSL_ExtTimepulseIn
XSL_ReqData = _xsensdeviceapi_py35_64.XSL_ReqData
XSL_Gnss1Pps = _xsensdeviceapi_py35_64.XSL_Gnss1Pps
XSL_Outputs = _xsensdeviceapi_py35_64.XSL_Outputs
XSL_Out1 = _xsensdeviceapi_py35_64.XSL_Out1
XSL_Out2 = _xsensdeviceapi_py35_64.XSL_Out2
XSL_Bi1Out = _xsensdeviceapi_py35_64.XSL_Bi1Out
XSL_RtsOut = _xsensdeviceapi_py35_64.XSL_RtsOut
XSL_Invalid = _xsensdeviceapi_py35_64.XSL_Invalid
class XsSyncSetting(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsSyncSetting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsSyncSetting, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_line"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_line_set
    __swig_getmethods__["m_line"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_line_get
    if _newclass:
        m_line = _swig_property(_xsensdeviceapi_py35_64.XsSyncSetting_m_line_get, _xsensdeviceapi_py35_64.XsSyncSetting_m_line_set)
    __swig_setmethods__["m_function"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_function_set
    __swig_getmethods__["m_function"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_function_get
    if _newclass:
        m_function = _swig_property(_xsensdeviceapi_py35_64.XsSyncSetting_m_function_get, _xsensdeviceapi_py35_64.XsSyncSetting_m_function_set)
    __swig_setmethods__["m_polarity"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_polarity_set
    __swig_getmethods__["m_polarity"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_polarity_get
    if _newclass:
        m_polarity = _swig_property(_xsensdeviceapi_py35_64.XsSyncSetting_m_polarity_get, _xsensdeviceapi_py35_64.XsSyncSetting_m_polarity_set)
    __swig_setmethods__["m_pulseWidth"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_pulseWidth_set
    __swig_getmethods__["m_pulseWidth"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_pulseWidth_get
    if _newclass:
        m_pulseWidth = _swig_property(_xsensdeviceapi_py35_64.XsSyncSetting_m_pulseWidth_get, _xsensdeviceapi_py35_64.XsSyncSetting_m_pulseWidth_set)
    __swig_setmethods__["m_offset"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_offset_set
    __swig_getmethods__["m_offset"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_offset_get
    if _newclass:
        m_offset = _swig_property(_xsensdeviceapi_py35_64.XsSyncSetting_m_offset_get, _xsensdeviceapi_py35_64.XsSyncSetting_m_offset_set)
    __swig_setmethods__["m_skipFirst"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_skipFirst_set
    __swig_getmethods__["m_skipFirst"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_skipFirst_get
    if _newclass:
        m_skipFirst = _swig_property(_xsensdeviceapi_py35_64.XsSyncSetting_m_skipFirst_get, _xsensdeviceapi_py35_64.XsSyncSetting_m_skipFirst_set)
    __swig_setmethods__["m_skipFactor"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_skipFactor_set
    __swig_getmethods__["m_skipFactor"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_skipFactor_get
    if _newclass:
        m_skipFactor = _swig_property(_xsensdeviceapi_py35_64.XsSyncSetting_m_skipFactor_get, _xsensdeviceapi_py35_64.XsSyncSetting_m_skipFactor_set)
    __swig_setmethods__["m_clockPeriod"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_clockPeriod_set
    __swig_getmethods__["m_clockPeriod"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_clockPeriod_get
    if _newclass:
        m_clockPeriod = _swig_property(_xsensdeviceapi_py35_64.XsSyncSetting_m_clockPeriod_get, _xsensdeviceapi_py35_64.XsSyncSetting_m_clockPeriod_set)
    __swig_setmethods__["m_triggerOnce"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_triggerOnce_set
    __swig_getmethods__["m_triggerOnce"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_triggerOnce_get
    if _newclass:
        m_triggerOnce = _swig_property(_xsensdeviceapi_py35_64.XsSyncSetting_m_triggerOnce_get, _xsensdeviceapi_py35_64.XsSyncSetting_m_triggerOnce_set)
    __swig_setmethods__["m_padding"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_padding_set
    __swig_getmethods__["m_padding"] = _xsensdeviceapi_py35_64.XsSyncSetting_m_padding_get
    if _newclass:
        m_padding = _swig_property(_xsensdeviceapi_py35_64.XsSyncSetting_m_padding_get, _xsensdeviceapi_py35_64.XsSyncSetting_m_padding_set)

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsSyncSetting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsSyncSetting') -> "XsSyncSetting const &":
        return _xsensdeviceapi_py35_64.XsSyncSetting___assign__(self, other)

    def isInput(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSyncSetting_isInput(self)

    def isOutput(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSyncSetting_isOutput(self)

    def swap(self, other: 'XsSyncSetting') -> "void":
        return _xsensdeviceapi_py35_64.XsSyncSetting_swap(self, other)

    def __eq__(self, other: 'XsSyncSetting') -> "bool":
        return _xsensdeviceapi_py35_64.XsSyncSetting___eq__(self, other)

    def __ne__(self, other: 'XsSyncSetting') -> "bool":
        return _xsensdeviceapi_py35_64.XsSyncSetting___ne__(self, other)

    def __lt__(self, other: 'XsSyncSetting') -> "bool":
        return _xsensdeviceapi_py35_64.XsSyncSetting___lt__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsSyncSetting
    __del__ = lambda self: None
XsSyncSetting_swigregister = _xsensdeviceapi_py35_64.XsSyncSetting_swigregister
XsSyncSetting_swigregister(XsSyncSetting)

XDOF_DisableAutoStore = _xsensdeviceapi_py35_64.XDOF_DisableAutoStore
XDOF_DisableAutoMeasurement = _xsensdeviceapi_py35_64.XDOF_DisableAutoMeasurement
XDOF_EnableBeidou = _xsensdeviceapi_py35_64.XDOF_EnableBeidou
XDOF_DisableGps = _xsensdeviceapi_py35_64.XDOF_DisableGps
XDOF_EnableAhs = _xsensdeviceapi_py35_64.XDOF_EnableAhs
XDOF_EnableOrientationSmoother = _xsensdeviceapi_py35_64.XDOF_EnableOrientationSmoother
XDOF_EnableConfigurableBusId = _xsensdeviceapi_py35_64.XDOF_EnableConfigurableBusId
XDOF_EnableInrunCompassCalibration = _xsensdeviceapi_py35_64.XDOF_EnableInrunCompassCalibration
XDOF_DisableSleepMode = _xsensdeviceapi_py35_64.XDOF_DisableSleepMode
XDOF_EnableConfigMessageAtStartup = _xsensdeviceapi_py35_64.XDOF_EnableConfigMessageAtStartup
XDOF_EnableColdFilterResets = _xsensdeviceapi_py35_64.XDOF_EnableColdFilterResets
XDOF_None = _xsensdeviceapi_py35_64.XDOF_None
XDOF_All = _xsensdeviceapi_py35_64.XDOF_All

def getTimeOfDay(date_: 'tm *'=None, secs_: 'time_t *'=None) -> "uint32_t":
    return _xsensdeviceapi_py35_64.getTimeOfDay(date_, secs_)
getTimeOfDay = _xsensdeviceapi_py35_64.getTimeOfDay

def getDateTime(date: 'tm *'=None) -> "int64_t":
    return _xsensdeviceapi_py35_64.getDateTime(date)
getDateTime = _xsensdeviceapi_py35_64.getDateTime

def getDateAsString(*args) -> "XsString":
    return _xsensdeviceapi_py35_64.getDateAsString(*args)
getDateAsString = _xsensdeviceapi_py35_64.getDateAsString

def getTimeAsString(*args) -> "XsString":
    return _xsensdeviceapi_py35_64.getTimeAsString(*args)
getTimeAsString = _xsensdeviceapi_py35_64.getTimeAsString

def msleep(ms: 'uint32_t') -> "void":
    return _xsensdeviceapi_py35_64.msleep(ms)
msleep = _xsensdeviceapi_py35_64.msleep

def udelay(us: 'uint64_t') -> "void":
    return _xsensdeviceapi_py35_64.udelay(us)
udelay = _xsensdeviceapi_py35_64.udelay

def initializeTime() -> "void":
    return _xsensdeviceapi_py35_64.initializeTime()
initializeTime = _xsensdeviceapi_py35_64.initializeTime

def timeStampNow(now: 'XsTimeStamp'=None) -> "int64_t":
    return _xsensdeviceapi_py35_64.timeStampNow(now)
timeStampNow = _xsensdeviceapi_py35_64.timeStampNow
XS_THREAD_PRIORITY_LOWEST = _xsensdeviceapi_py35_64.XS_THREAD_PRIORITY_LOWEST
XS_THREAD_PRIORITY_LOWER = _xsensdeviceapi_py35_64.XS_THREAD_PRIORITY_LOWER
XS_THREAD_PRIORITY_LOW = _xsensdeviceapi_py35_64.XS_THREAD_PRIORITY_LOW
XS_THREAD_PRIORITY_NORMAL = _xsensdeviceapi_py35_64.XS_THREAD_PRIORITY_NORMAL
XS_THREAD_PRIORITY_HIGH = _xsensdeviceapi_py35_64.XS_THREAD_PRIORITY_HIGH
XS_THREAD_PRIORITY_HIGHER = _xsensdeviceapi_py35_64.XS_THREAD_PRIORITY_HIGHER
XS_THREAD_PRIORITY_HIGHEST = _xsensdeviceapi_py35_64.XS_THREAD_PRIORITY_HIGHEST
XSENS_INVALID_THREAD = _xsensdeviceapi_py35_64.XSENS_INVALID_THREAD

def xsNameThisThread(threadName: 'char const *') -> "void":
    return _xsensdeviceapi_py35_64.xsNameThisThread(threadName)
xsNameThisThread = _xsensdeviceapi_py35_64.xsNameThisThread

def xsStartThread(func: 'void *(*)(void *)', param: 'void *', pid: 'void *') -> "pthread_t":
    return _xsensdeviceapi_py35_64.xsStartThread(func, param, pid)
xsStartThread = _xsensdeviceapi_py35_64.xsStartThread
XSENS_USE_POSIX_LOCKING = _xsensdeviceapi_py35_64.XSENS_USE_POSIX_LOCKING
class XsFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsFile, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsFile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsFile
    __del__ = lambda self: None

    def create(self, filename: 'XsString', writeOnly: 'bool') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_create(self, filename, writeOnly)

    def createText(self, filename: 'XsString', writeOnly: 'bool') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_createText(self, filename, writeOnly)

    def open(self, fileName: 'XsString', readOnly: 'bool') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_open(self, fileName, readOnly)

    def openText(self, fileName: 'XsString', readOnly: 'bool') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_openText(self, fileName, readOnly)

    def reopen(self, fileName: 'XsString', mode: 'XsString') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_reopen(self, fileName, mode)

    def isOpen(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsFile_isOpen(self)
    if _newclass:
        exists = staticmethod(_xsensdeviceapi_py35_64.XsFile_exists)
    else:
        exists = _xsensdeviceapi_py35_64.XsFile_exists

    def close(self) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_close(self)

    def flush(self) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_flush(self)

    def truncate(self, fileSize: 'XsFilePos') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_truncate(self, fileSize)

    def resize(self, fileSize: 'XsFilePos') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_resize(self, fileSize)
    if _newclass:
        erase = staticmethod(_xsensdeviceapi_py35_64.XsFile_erase)
    else:
        erase = _xsensdeviceapi_py35_64.XsFile_erase

    def read(self, destination: 'void *', size: 'XsFilePos', count: 'XsFilePos') -> "XsFilePos":
        return _xsensdeviceapi_py35_64.XsFile_read(self, destination, size, count)

    def write(self, source: 'void const *', size: 'XsFilePos', count: 'XsFilePos') -> "XsFilePos":
        return _xsensdeviceapi_py35_64.XsFile_write(self, source, size, count)

    def getc(self) -> "int":
        return _xsensdeviceapi_py35_64.XsFile_getc(self)

    def putc(self, character: 'int') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_putc(self, character)

    def gets(self, destination: 'char *', maxCount: 'int') -> "char *":
        return _xsensdeviceapi_py35_64.XsFile_gets(self, destination, maxCount)

    def puts(self, source: 'char const *') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_puts(self, source)

    def seek(self, offset: 'XsFilePos') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_seek(self, offset)

    def seek_r(self, offset: 'XsFilePos') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_seek_r(self, offset)

    def tell(self) -> "XsFilePos":
        return _xsensdeviceapi_py35_64.XsFile_tell(self)

    def eof(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsFile_eof(self)

    def error(self) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_error(self)
    if _newclass:
        fullPath = staticmethod(_xsensdeviceapi_py35_64.XsFile_fullPath)
    else:
        fullPath = _xsensdeviceapi_py35_64.XsFile_fullPath

    def getline(self, *args) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsFile_getline(self, *args)

    def handle(self) -> "FILE *":
        return _xsensdeviceapi_py35_64.XsFile_handle(self)
XsFile_swigregister = _xsensdeviceapi_py35_64.XsFile_swigregister
XsFile_swigregister(XsFile)
XsTime_secPerDay = cvar.XsTime_secPerDay
XsTime_milliSecPerDay = cvar.XsTime_milliSecPerDay
XsTime_timeStampMax = cvar.XsTime_timeStampMax
secPerDay = cvar.secPerDay
milliSecPerDay = cvar.milliSecPerDay
timeStampMax = cvar.timeStampMax

def XsFile_exists(fileName: 'XsString') -> "bool":
    return _xsensdeviceapi_py35_64.XsFile_exists(fileName)
XsFile_exists = _xsensdeviceapi_py35_64.XsFile_exists

def XsFile_erase(filename: 'XsString') -> "XsResultValue":
    return _xsensdeviceapi_py35_64.XsFile_erase(filename)
XsFile_erase = _xsensdeviceapi_py35_64.XsFile_erase

def XsFile_fullPath(filename: 'XsString', fullPath: 'XsString') -> "XsResultValue":
    return _xsensdeviceapi_py35_64.XsFile_fullPath(filename, fullPath)
XsFile_fullPath = _xsensdeviceapi_py35_64.XsFile_fullPath

class XsException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsException
    __del__ = lambda self: None

    def __assign__(self, e: 'XsException') -> "XsException &":
        return _xsensdeviceapi_py35_64.XsException___assign__(self, e)

    def code(self) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsException_code(self)

    def what(self) -> "char const *":
        return _xsensdeviceapi_py35_64.XsException_what(self)

    def text(self) -> "XsString const &":
        return _xsensdeviceapi_py35_64.XsException_text(self)
XsException_swigregister = _xsensdeviceapi_py35_64.XsException_swigregister
XsException_swigregister(XsException)

class XsLibraryLoader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsLibraryLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsLibraryLoader, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsLibraryLoader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsLibraryLoader
    __del__ = lambda self: None

    def load(self, libraryName: 'XsString') -> "bool":
        return _xsensdeviceapi_py35_64.XsLibraryLoader_load(self, libraryName)

    def isLoaded(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsLibraryLoader_isLoaded(self)

    def resolve(self, functionName: 'char const *') -> "void *":
        return _xsensdeviceapi_py35_64.XsLibraryLoader_resolve(self, functionName)

    def unload(self) -> "void":
        return _xsensdeviceapi_py35_64.XsLibraryLoader_unload(self)
    if _newclass:
        errorString = staticmethod(_xsensdeviceapi_py35_64.XsLibraryLoader_errorString)
    else:
        errorString = _xsensdeviceapi_py35_64.XsLibraryLoader_errorString
XsLibraryLoader_swigregister = _xsensdeviceapi_py35_64.XsLibraryLoader_swigregister
XsLibraryLoader_swigregister(XsLibraryLoader)

def XsLibraryLoader_errorString() -> "XsString":
    return _xsensdeviceapi_py35_64.XsLibraryLoader_errorString()
XsLibraryLoader_errorString = _xsensdeviceapi_py35_64.XsLibraryLoader_errorString

class XsTriggerIndicationData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsTriggerIndicationData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsTriggerIndicationData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_line"] = _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_line_set
    __swig_getmethods__["m_line"] = _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_line_get
    if _newclass:
        m_line = _swig_property(_xsensdeviceapi_py35_64.XsTriggerIndicationData_m_line_get, _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_line_set)
    __swig_setmethods__["m_polarity"] = _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_polarity_set
    __swig_getmethods__["m_polarity"] = _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_polarity_get
    if _newclass:
        m_polarity = _swig_property(_xsensdeviceapi_py35_64.XsTriggerIndicationData_m_polarity_get, _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_polarity_set)
    __swig_setmethods__["m_timestamp"] = _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_timestamp_set
    __swig_getmethods__["m_timestamp"] = _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_timestamp_get
    if _newclass:
        m_timestamp = _swig_property(_xsensdeviceapi_py35_64.XsTriggerIndicationData_m_timestamp_get, _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_timestamp_set)
    __swig_setmethods__["m_frameNumber"] = _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_frameNumber_set
    __swig_getmethods__["m_frameNumber"] = _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_frameNumber_get
    if _newclass:
        m_frameNumber = _swig_property(_xsensdeviceapi_py35_64.XsTriggerIndicationData_m_frameNumber_get, _xsensdeviceapi_py35_64.XsTriggerIndicationData_m_frameNumber_set)

    def __init__(self, line: 'uint8_t'=0, polarity: 'uint8_t'=0, timestamp: 'uint32_t'=0, frameNumber: 'uint16_t'=0):
        this = _xsensdeviceapi_py35_64.new_XsTriggerIndicationData(line, polarity, timestamp, frameNumber)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64.XsTriggerIndicationData_clear(self)

    def valid(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsTriggerIndicationData_valid(self)

    def __eq__(self, other: 'XsTriggerIndicationData') -> "bool":
        return _xsensdeviceapi_py35_64.XsTriggerIndicationData___eq__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsTriggerIndicationData
    __del__ = lambda self: None
XsTriggerIndicationData_swigregister = _xsensdeviceapi_py35_64.XsTriggerIndicationData_swigregister
XsTriggerIndicationData_swigregister(XsTriggerIndicationData)

XSIF_SignalQualityIndicator_Mask = _xsensdeviceapi_py35_64.XSIF_SignalQualityIndicator_Mask
XSIF_SignalQualityIndicator_NoSignal = _xsensdeviceapi_py35_64.XSIF_SignalQualityIndicator_NoSignal
XSIF_SignalQualityIndicator_Searching = _xsensdeviceapi_py35_64.XSIF_SignalQualityIndicator_Searching
XSIF_SignalQualityIndicator_Acquired = _xsensdeviceapi_py35_64.XSIF_SignalQualityIndicator_Acquired
XSIF_SignalQualityIndicator_Unusable = _xsensdeviceapi_py35_64.XSIF_SignalQualityIndicator_Unusable
XSIF_SignalQualityIndicator_CodeTimeOk = _xsensdeviceapi_py35_64.XSIF_SignalQualityIndicator_CodeTimeOk
XSIF_SignalQualityIndicator_CodeCarrierTimeOk1 = _xsensdeviceapi_py35_64.XSIF_SignalQualityIndicator_CodeCarrierTimeOk1
XSIF_SignalQualityIndicator_CodeCarrierTimeOk2 = _xsensdeviceapi_py35_64.XSIF_SignalQualityIndicator_CodeCarrierTimeOk2
XSIF_SignalQualityIndicator_CodeCarrierTimeOk3 = _xsensdeviceapi_py35_64.XSIF_SignalQualityIndicator_CodeCarrierTimeOk3
XSIF_UsedForNavigation_Mask = _xsensdeviceapi_py35_64.XSIF_UsedForNavigation_Mask
XSIF_UsedForNavigation_Used = _xsensdeviceapi_py35_64.XSIF_UsedForNavigation_Used
XSIF_HealthFlag_Mask = _xsensdeviceapi_py35_64.XSIF_HealthFlag_Mask
XSIF_HealthFlag_Unknown = _xsensdeviceapi_py35_64.XSIF_HealthFlag_Unknown
XSIF_HealthFlag_Healthy = _xsensdeviceapi_py35_64.XSIF_HealthFlag_Healthy
XSIF_HealthFlag_Unhealthy = _xsensdeviceapi_py35_64.XSIF_HealthFlag_Unhealthy
XSIF_Differential_Mask = _xsensdeviceapi_py35_64.XSIF_Differential_Mask
XSIF_Differential_Available = _xsensdeviceapi_py35_64.XSIF_Differential_Available
class XsSatInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsSatInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsSatInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_gnssId"] = _xsensdeviceapi_py35_64.XsSatInfo_m_gnssId_set
    __swig_getmethods__["m_gnssId"] = _xsensdeviceapi_py35_64.XsSatInfo_m_gnssId_get
    if _newclass:
        m_gnssId = _swig_property(_xsensdeviceapi_py35_64.XsSatInfo_m_gnssId_get, _xsensdeviceapi_py35_64.XsSatInfo_m_gnssId_set)
    __swig_setmethods__["m_svId"] = _xsensdeviceapi_py35_64.XsSatInfo_m_svId_set
    __swig_getmethods__["m_svId"] = _xsensdeviceapi_py35_64.XsSatInfo_m_svId_get
    if _newclass:
        m_svId = _swig_property(_xsensdeviceapi_py35_64.XsSatInfo_m_svId_get, _xsensdeviceapi_py35_64.XsSatInfo_m_svId_set)
    __swig_setmethods__["m_cno"] = _xsensdeviceapi_py35_64.XsSatInfo_m_cno_set
    __swig_getmethods__["m_cno"] = _xsensdeviceapi_py35_64.XsSatInfo_m_cno_get
    if _newclass:
        m_cno = _swig_property(_xsensdeviceapi_py35_64.XsSatInfo_m_cno_get, _xsensdeviceapi_py35_64.XsSatInfo_m_cno_set)
    __swig_setmethods__["m_flags"] = _xsensdeviceapi_py35_64.XsSatInfo_m_flags_set
    __swig_getmethods__["m_flags"] = _xsensdeviceapi_py35_64.XsSatInfo_m_flags_get
    if _newclass:
        m_flags = _swig_property(_xsensdeviceapi_py35_64.XsSatInfo_m_flags_get, _xsensdeviceapi_py35_64.XsSatInfo_m_flags_set)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsSatInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsSatInfo
    __del__ = lambda self: None
XsSatInfo_swigregister = _xsensdeviceapi_py35_64.XsSatInfo_swigregister
XsSatInfo_swigregister(XsSatInfo)

class XsRawGnssSatInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsRawGnssSatInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsRawGnssSatInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_itow"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_itow_set
    __swig_getmethods__["m_itow"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_itow_get
    if _newclass:
        m_itow = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_itow_get, _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_itow_set)
    __swig_setmethods__["m_numSvs"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_numSvs_set
    __swig_getmethods__["m_numSvs"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_numSvs_get
    if _newclass:
        m_numSvs = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_numSvs_get, _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_numSvs_set)
    __swig_setmethods__["m_res1"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res1_set
    __swig_getmethods__["m_res1"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res1_get
    if _newclass:
        m_res1 = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res1_get, _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res1_set)
    __swig_setmethods__["m_res2"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res2_set
    __swig_getmethods__["m_res2"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res2_get
    if _newclass:
        m_res2 = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res2_get, _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res2_set)
    __swig_setmethods__["m_res3"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res3_set
    __swig_getmethods__["m_res3"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res3_get
    if _newclass:
        m_res3 = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res3_get, _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_res3_set)
    __swig_setmethods__["m_satInfos"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_satInfos_set
    __swig_getmethods__["m_satInfos"] = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_satInfos_get
    if _newclass:
        m_satInfos = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_satInfos_get, _xsensdeviceapi_py35_64.XsRawGnssSatInfo_m_satInfos_set)

    def __eq__(self, b: 'XsRawGnssSatInfo') -> "bool":
        return _xsensdeviceapi_py35_64.XsRawGnssSatInfo___eq__(self, b)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsRawGnssSatInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsRawGnssSatInfo
    __del__ = lambda self: None
XsRawGnssSatInfo_swigregister = _xsensdeviceapi_py35_64.XsRawGnssSatInfo_swigregister
XsRawGnssSatInfo_swigregister(XsRawGnssSatInfo)

HMT_MT = _xsensdeviceapi_py35_64.HMT_MT
HMT_None = _xsensdeviceapi_py35_64.HMT_None

def findHardwareTypeC(productCode: 'XsString', resultValue: 'XsString') -> "void":
    return _xsensdeviceapi_py35_64.findHardwareTypeC(productCode, resultValue)
findHardwareTypeC = _xsensdeviceapi_py35_64.findHardwareTypeC

def findHardwareManufacturerC(productCode: 'XsString') -> "HardwareManufacturerType":
    return _xsensdeviceapi_py35_64.findHardwareManufacturerC(productCode)
findHardwareManufacturerC = _xsensdeviceapi_py35_64.findHardwareManufacturerC

def accelerometerRangeC(productCode: 'XsString', hwVersionMajor: 'int32_t') -> "double":
    return _xsensdeviceapi_py35_64.accelerometerRangeC(productCode, hwVersionMajor)
accelerometerRangeC = _xsensdeviceapi_py35_64.accelerometerRangeC

def gyroscopeRangeC(productCode: 'XsString') -> "double":
    return _xsensdeviceapi_py35_64.gyroscopeRangeC(productCode)
gyroscopeRangeC = _xsensdeviceapi_py35_64.gyroscopeRangeC

def actualAccelerometerRangeC(productCode: 'XsString', hwVersionMajor: 'int32_t') -> "double":
    return _xsensdeviceapi_py35_64.actualAccelerometerRangeC(productCode, hwVersionMajor)
actualAccelerometerRangeC = _xsensdeviceapi_py35_64.actualAccelerometerRangeC

def actualGyroscopeRangeC(productCode: 'XsString') -> "double":
    return _xsensdeviceapi_py35_64.actualGyroscopeRangeC(productCode)
actualGyroscopeRangeC = _xsensdeviceapi_py35_64.actualGyroscopeRangeC

def findHardwareType(productCode: 'XsString') -> "XsString":
    return _xsensdeviceapi_py35_64.findHardwareType(productCode)
findHardwareType = _xsensdeviceapi_py35_64.findHardwareType

def findHardwareManufacturer(productCode: 'XsString') -> "HardwareManufacturerType":
    return _xsensdeviceapi_py35_64.findHardwareManufacturer(productCode)
findHardwareManufacturer = _xsensdeviceapi_py35_64.findHardwareManufacturer

def accelerometerRange(productCode: 'XsString', hwVersionMajor: 'int32_t') -> "double":
    return _xsensdeviceapi_py35_64.accelerometerRange(productCode, hwVersionMajor)
accelerometerRange = _xsensdeviceapi_py35_64.accelerometerRange

def gyroscopeRange(productCode: 'XsString') -> "double":
    return _xsensdeviceapi_py35_64.gyroscopeRange(productCode)
gyroscopeRange = _xsensdeviceapi_py35_64.gyroscopeRange

def actualAccelerometerRange(productCode: 'XsString', hwVersionMajor: 'int32_t') -> "double":
    return _xsensdeviceapi_py35_64.actualAccelerometerRange(productCode, hwVersionMajor)
actualAccelerometerRange = _xsensdeviceapi_py35_64.actualAccelerometerRange

def actualGyroscopeRange(productCode: 'XsString') -> "double":
    return _xsensdeviceapi_py35_64.actualGyroscopeRange(productCode)
actualGyroscopeRange = _xsensdeviceapi_py35_64.actualGyroscopeRange
class XsStringArray(_XsStringArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsStringArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsStringArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsStringArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsStringArray, name)
    __repr__ = _swig_repr

    def join(self, separator: 'XsString') -> "XsString":
        return _xsensdeviceapi_py35_64.XsStringArray_join(self, separator)

    def fromSplicedString(self, src: 'XsString', separators: 'XsString') -> "void":
        return _xsensdeviceapi_py35_64.XsStringArray_fromSplicedString(self, src, separators)

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsStringArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def find(self, needle: 'XsString', isCaseSensitive: 'bool'=True) -> "int":
        return _xsensdeviceapi_py35_64.XsStringArray_find(self, needle, isCaseSensitive)

    def __str__(self) -> "std::string":
        return _xsensdeviceapi_py35_64.XsStringArray___str__(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsStringArray
    __del__ = lambda self: None
XsStringArray_swigregister = _xsensdeviceapi_py35_64.XsStringArray_swigregister
XsStringArray_swigregister(XsStringArray)
g_xsStringArrayDescriptor = cvar.g_xsStringArrayDescriptor

class XsQuaternionArray(_XsQuaternionArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsQuaternionArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsQuaternionArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsQuaternionArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsQuaternionArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsQuaternionArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsQuaternionArray
    __del__ = lambda self: None
XsQuaternionArray_swigregister = _xsensdeviceapi_py35_64.XsQuaternionArray_swigregister
XsQuaternionArray_swigregister(XsQuaternionArray)
g_xsQuaternionArrayDescriptor = cvar.g_xsQuaternionArrayDescriptor

class XsAnalogInData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsAnalogInData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsAnalogInData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_data"] = _xsensdeviceapi_py35_64.XsAnalogInData_m_data_set
    __swig_getmethods__["m_data"] = _xsensdeviceapi_py35_64.XsAnalogInData_m_data_get
    if _newclass:
        m_data = _swig_property(_xsensdeviceapi_py35_64.XsAnalogInData_m_data_get, _xsensdeviceapi_py35_64.XsAnalogInData_m_data_set)

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsAnalogInData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'XsAnalogInData') -> "bool":
        return _xsensdeviceapi_py35_64.XsAnalogInData___eq__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsAnalogInData
    __del__ = lambda self: None
XsAnalogInData_swigregister = _xsensdeviceapi_py35_64.XsAnalogInData_swigregister
XsAnalogInData_swigregister(XsAnalogInData)


def xstypesPath(path: 'XsString') -> "void":
    return _xsensdeviceapi_py35_64.xstypesPath(path)
xstypesPath = _xsensdeviceapi_py35_64.xstypesPath
IP_UDP = _xsensdeviceapi_py35_64.IP_UDP
IP_TCP = _xsensdeviceapi_py35_64.IP_TCP
NLP_IPV4 = _xsensdeviceapi_py35_64.NLP_IPV4
NLP_IPV6 = _xsensdeviceapi_py35_64.NLP_IPV6
NLP_IPVX = _xsensdeviceapi_py35_64.NLP_IPVX
XSO_ReuseAddress = _xsensdeviceapi_py35_64.XSO_ReuseAddress
XSO_ReusePort = _xsensdeviceapi_py35_64.XSO_ReusePort
XSSOCKET_INFINITE_TIMEOUT = _xsensdeviceapi_py35_64.XSSOCKET_INFINITE_TIMEOUT
class XsSocket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsSocket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsSocket, name)
    __repr__ = _swig_repr

    def __init__(self, protocol: 'IpProtocol', ipVersion: 'NetworkLayerProtocol'=NLP_IPVX):
        this = _xsensdeviceapi_py35_64.new_XsSocket(protocol, ipVersion)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsSocket
    __del__ = lambda self: None

    def close(self) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsSocket_close(self)

    def nativeDescriptor(self) -> "XSOCKET":
        return _xsensdeviceapi_py35_64.XsSocket_nativeDescriptor(self)

    def read(self, *args) -> "int":
        return _xsensdeviceapi_py35_64.XsSocket_read(self, *args)

    def readFrom(self, *args) -> "int":
        return _xsensdeviceapi_py35_64.XsSocket_readFrom(self, *args)

    def write(self, *args) -> "int":
        return _xsensdeviceapi_py35_64.XsSocket_write(self, *args)

    def writeTo(self, *args) -> "int":
        return _xsensdeviceapi_py35_64.XsSocket_writeTo(self, *args)

    def flush(self) -> "void":
        return _xsensdeviceapi_py35_64.XsSocket_flush(self)

    def select(self, mstimeout: 'int', canRead: 'int *', canWrite: 'int *') -> "int":
        return _xsensdeviceapi_py35_64.XsSocket_select(self, mstimeout, canRead, canWrite)

    def accept(self, mstimeout: 'int'=-1) -> "XsSocket *":
        return _xsensdeviceapi_py35_64.XsSocket_accept(self, mstimeout)

    def setSocketOption(self, *args) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsSocket_setSocketOption(self, *args)

    def bind(self, *args) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsSocket_bind(self, *args)

    def listen(self, maxPending: 'int'=20) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsSocket_listen(self, maxPending)

    def connect(self, host: 'XsString', port: 'uint16_t') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsSocket_connect(self, host, port)

    def isUsable(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSocket_isUsable(self)

    def getRemoteAddress(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsSocket_getRemoteAddress(self)

    def getLastSystemError(self) -> "int":
        return _xsensdeviceapi_py35_64.XsSocket_getLastSystemError(self)

    def broadcast(self, data: 'void const *', size: 'XsSize', port: 'uint16_t') -> "int":
        return _xsensdeviceapi_py35_64.XsSocket_broadcast(self, data, size, port)

    def enableBroadcasts(self, enable: 'bool') -> "bool":
        return _xsensdeviceapi_py35_64.XsSocket_enableBroadcasts(self, enable)
XsSocket_swigregister = _xsensdeviceapi_py35_64.XsSocket_swigregister
XsSocket_swigregister(XsSocket)

ST_Awinda = _xsensdeviceapi_py35_64.ST_Awinda
ST_Full = _xsensdeviceapi_py35_64.ST_Full
class XsSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_deviceId"] = _xsensdeviceapi_py35_64.XsSnapshot_m_deviceId_set
    __swig_getmethods__["m_deviceId"] = _xsensdeviceapi_py35_64.XsSnapshot_m_deviceId_get
    if _newclass:
        m_deviceId = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_deviceId_get, _xsensdeviceapi_py35_64.XsSnapshot_m_deviceId_set)
    __swig_setmethods__["m_frameNumber"] = _xsensdeviceapi_py35_64.XsSnapshot_m_frameNumber_set
    __swig_getmethods__["m_frameNumber"] = _xsensdeviceapi_py35_64.XsSnapshot_m_frameNumber_get
    if _newclass:
        m_frameNumber = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_frameNumber_get, _xsensdeviceapi_py35_64.XsSnapshot_m_frameNumber_set)
    __swig_setmethods__["m_timestamp"] = _xsensdeviceapi_py35_64.XsSnapshot_m_timestamp_set
    __swig_getmethods__["m_timestamp"] = _xsensdeviceapi_py35_64.XsSnapshot_m_timestamp_get
    if _newclass:
        m_timestamp = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_timestamp_get, _xsensdeviceapi_py35_64.XsSnapshot_m_timestamp_set)
    __swig_setmethods__["m_iQ"] = _xsensdeviceapi_py35_64.XsSnapshot_m_iQ_set
    __swig_getmethods__["m_iQ"] = _xsensdeviceapi_py35_64.XsSnapshot_m_iQ_get
    if _newclass:
        m_iQ = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_iQ_get, _xsensdeviceapi_py35_64.XsSnapshot_m_iQ_set)
    __swig_setmethods__["m_iV"] = _xsensdeviceapi_py35_64.XsSnapshot_m_iV_set
    __swig_getmethods__["m_iV"] = _xsensdeviceapi_py35_64.XsSnapshot_m_iV_get
    if _newclass:
        m_iV = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_iV_get, _xsensdeviceapi_py35_64.XsSnapshot_m_iV_set)
    __swig_setmethods__["m_mag"] = _xsensdeviceapi_py35_64.XsSnapshot_m_mag_set
    __swig_getmethods__["m_mag"] = _xsensdeviceapi_py35_64.XsSnapshot_m_mag_get
    if _newclass:
        m_mag = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_mag_get, _xsensdeviceapi_py35_64.XsSnapshot_m_mag_set)
    __swig_setmethods__["m_baro"] = _xsensdeviceapi_py35_64.XsSnapshot_m_baro_set
    __swig_getmethods__["m_baro"] = _xsensdeviceapi_py35_64.XsSnapshot_m_baro_get
    if _newclass:
        m_baro = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_baro_get, _xsensdeviceapi_py35_64.XsSnapshot_m_baro_set)
    __swig_setmethods__["m_status"] = _xsensdeviceapi_py35_64.XsSnapshot_m_status_set
    __swig_getmethods__["m_status"] = _xsensdeviceapi_py35_64.XsSnapshot_m_status_get
    if _newclass:
        m_status = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_status_get, _xsensdeviceapi_py35_64.XsSnapshot_m_status_set)
    __swig_setmethods__["m_accClippingCounter"] = _xsensdeviceapi_py35_64.XsSnapshot_m_accClippingCounter_set
    __swig_getmethods__["m_accClippingCounter"] = _xsensdeviceapi_py35_64.XsSnapshot_m_accClippingCounter_get
    if _newclass:
        m_accClippingCounter = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_accClippingCounter_get, _xsensdeviceapi_py35_64.XsSnapshot_m_accClippingCounter_set)
    __swig_setmethods__["m_gyrClippingCounter"] = _xsensdeviceapi_py35_64.XsSnapshot_m_gyrClippingCounter_set
    __swig_getmethods__["m_gyrClippingCounter"] = _xsensdeviceapi_py35_64.XsSnapshot_m_gyrClippingCounter_get
    if _newclass:
        m_gyrClippingCounter = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_gyrClippingCounter_get, _xsensdeviceapi_py35_64.XsSnapshot_m_gyrClippingCounter_set)
    __swig_setmethods__["m_type"] = _xsensdeviceapi_py35_64.XsSnapshot_m_type_set
    __swig_getmethods__["m_type"] = _xsensdeviceapi_py35_64.XsSnapshot_m_type_get
    if _newclass:
        m_type = _swig_property(_xsensdeviceapi_py35_64.XsSnapshot_m_type_get, _xsensdeviceapi_py35_64.XsSnapshot_m_type_set)

    def __eq__(self, other: 'XsSnapshot') -> "bool":
        return _xsensdeviceapi_py35_64.XsSnapshot___eq__(self, other)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsSnapshot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsSnapshot
    __del__ = lambda self: None
XsSnapshot_swigregister = _xsensdeviceapi_py35_64.XsSnapshot_swigregister
XsSnapshot_swigregister(XsSnapshot)

FSFL_ClipAccX = _xsensdeviceapi_py35_64.FSFL_ClipAccX
FSFL_ClipAccY = _xsensdeviceapi_py35_64.FSFL_ClipAccY
FSFL_ClipAccZ = _xsensdeviceapi_py35_64.FSFL_ClipAccZ
FSFL_ClipAccMask = _xsensdeviceapi_py35_64.FSFL_ClipAccMask
FSFL_ClipGyrX = _xsensdeviceapi_py35_64.FSFL_ClipGyrX
FSFL_ClipGyrY = _xsensdeviceapi_py35_64.FSFL_ClipGyrY
FSFL_ClipGyrZ = _xsensdeviceapi_py35_64.FSFL_ClipGyrZ
FSFL_ClipGyrMask = _xsensdeviceapi_py35_64.FSFL_ClipGyrMask
FSFL_ClipMagX = _xsensdeviceapi_py35_64.FSFL_ClipMagX
FSFL_ClipMagY = _xsensdeviceapi_py35_64.FSFL_ClipMagY
FSFL_ClipMagZ = _xsensdeviceapi_py35_64.FSFL_ClipMagZ
FSFL_ClipMagMask = _xsensdeviceapi_py35_64.FSFL_ClipMagMask
FSFL_MagIsNew = _xsensdeviceapi_py35_64.FSFL_MagIsNew
FSFL_BaroIsNew = _xsensdeviceapi_py35_64.FSFL_BaroIsNew
FSFL_RotationMask = _xsensdeviceapi_py35_64.FSFL_RotationMask
FSFL_ClipAccShift = _xsensdeviceapi_py35_64.FSFL_ClipAccShift
FSFL_ClipGyrShift = _xsensdeviceapi_py35_64.FSFL_ClipGyrShift
FSFL_ClipMagshift = _xsensdeviceapi_py35_64.FSFL_ClipMagshift
FSFL_RotationShift = _xsensdeviceapi_py35_64.FSFL_RotationShift
class XsSdiData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsSdiData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsSdiData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsSdiData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsSdiData') -> "XsSdiData const &":
        return _xsensdeviceapi_py35_64.XsSdiData___assign__(self, other)

    def zero(self) -> "void":
        return _xsensdeviceapi_py35_64.XsSdiData_zero(self)

    def orientationIncrement(self) -> "XsQuaternion const &":
        return _xsensdeviceapi_py35_64.XsSdiData_orientationIncrement(self)

    def setOrientationIncrement(self, dq: 'XsQuaternion') -> "void":
        return _xsensdeviceapi_py35_64.XsSdiData_setOrientationIncrement(self, dq)

    def velocityIncrement(self) -> "XsVector3 const &":
        return _xsensdeviceapi_py35_64.XsSdiData_velocityIncrement(self)

    def setVelocityIncrement(self, dv: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsSdiData_setVelocityIncrement(self, dv)

    def __eq__(self, other: 'XsSdiData') -> "bool":
        return _xsensdeviceapi_py35_64.XsSdiData___eq__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsSdiData
    __del__ = lambda self: None
XsSdiData_swigregister = _xsensdeviceapi_py35_64.XsSdiData_swigregister
XsSdiData_swigregister(XsSdiData)

class XsSyncSettingArray(_XsSyncSettingArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsSyncSettingArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsSyncSettingArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsSyncSettingArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsSyncSettingArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsSyncSettingArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsSyncSettingArray
    __del__ = lambda self: None
XsSyncSettingArray_swigregister = _xsensdeviceapi_py35_64.XsSyncSettingArray_swigregister
XsSyncSettingArray_swigregister(XsSyncSettingArray)
g_xsSyncSettingArrayDescriptor = cvar.g_xsSyncSettingArrayDescriptor

class XsEuler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsEuler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsEuler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsEuler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsEuler') -> "XsEuler &":
        return _xsensdeviceapi_py35_64.XsEuler___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsEuler_empty(self)

    def data(self) -> "XsReal const *":
        return _xsensdeviceapi_py35_64.XsEuler_data(self)

    def fromQuaternion(self, quat: 'XsQuaternion') -> "XsEuler &":
        return _xsensdeviceapi_py35_64.XsEuler_fromQuaternion(self, quat)

    def __eq__(self, other: 'XsEuler') -> "bool":
        return _xsensdeviceapi_py35_64.XsEuler___eq__(self, other)

    def __ne__(self, other: 'XsEuler') -> "bool":
        return _xsensdeviceapi_py35_64.XsEuler___ne__(self, other)

    def roll(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsEuler_roll(self)

    def pitch(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsEuler_pitch(self)

    def yaw(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsEuler_yaw(self)

    def x(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsEuler_x(self)

    def y(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsEuler_y(self)

    def z(self) -> "XsReal":
        return _xsensdeviceapi_py35_64.XsEuler_z(self)

    def isEqual(self, other: 'XsEuler', tolerance: 'XsReal') -> "bool":
        return _xsensdeviceapi_py35_64.XsEuler_isEqual(self, other, tolerance)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsEuler
    __del__ = lambda self: None
XsEuler_swigregister = _xsensdeviceapi_py35_64.XsEuler_swigregister
XsEuler_swigregister(XsEuler)

class XsRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsRange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsRange') -> "XsRange &":
        return _xsensdeviceapi_py35_64.XsRange___assign__(self, other)

    def count(self) -> "int":
        return _xsensdeviceapi_py35_64.XsRange_count(self)

    def interval(self) -> "int":
        return _xsensdeviceapi_py35_64.XsRange_interval(self)

    def contains(self, i: 'int') -> "bool":
        return _xsensdeviceapi_py35_64.XsRange_contains(self, i)

    def setRange(self, f: 'int', l: 'int') -> "void":
        return _xsensdeviceapi_py35_64.XsRange_setRange(self, f, l)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsRange_empty(self)

    def first(self) -> "int":
        return _xsensdeviceapi_py35_64.XsRange_first(self)

    def last(self) -> "int":
        return _xsensdeviceapi_py35_64.XsRange_last(self)

    def __eq__(self, other: 'XsRange') -> "bool":
        return _xsensdeviceapi_py35_64.XsRange___eq__(self, other)

    def __lt__(self, other: 'XsRange') -> "bool":
        return _xsensdeviceapi_py35_64.XsRange___lt__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsRange
    __del__ = lambda self: None
XsRange_swigregister = _xsensdeviceapi_py35_64.XsRange_swigregister
XsRange_swigregister(XsRange)

class XsRawGnssPvtData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsRawGnssPvtData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsRawGnssPvtData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_itow"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_itow_set
    __swig_getmethods__["m_itow"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_itow_get
    if _newclass:
        m_itow = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_itow_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_itow_set)
    __swig_setmethods__["m_year"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_year_set
    __swig_getmethods__["m_year"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_year_get
    if _newclass:
        m_year = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_year_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_year_set)
    __swig_setmethods__["m_month"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_month_set
    __swig_getmethods__["m_month"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_month_get
    if _newclass:
        m_month = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_month_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_month_set)
    __swig_setmethods__["m_day"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_day_set
    __swig_getmethods__["m_day"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_day_get
    if _newclass:
        m_day = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_day_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_day_set)
    __swig_setmethods__["m_hour"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hour_set
    __swig_getmethods__["m_hour"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hour_get
    if _newclass:
        m_hour = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hour_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hour_set)
    __swig_setmethods__["m_min"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_min_set
    __swig_getmethods__["m_min"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_min_get
    if _newclass:
        m_min = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_min_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_min_set)
    __swig_setmethods__["m_sec"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_sec_set
    __swig_getmethods__["m_sec"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_sec_get
    if _newclass:
        m_sec = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_sec_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_sec_set)
    __swig_setmethods__["m_valid"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_valid_set
    __swig_getmethods__["m_valid"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_valid_get
    if _newclass:
        m_valid = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_valid_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_valid_set)
    __swig_setmethods__["m_tAcc"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_tAcc_set
    __swig_getmethods__["m_tAcc"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_tAcc_get
    if _newclass:
        m_tAcc = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_tAcc_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_tAcc_set)
    __swig_setmethods__["m_nano"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_nano_set
    __swig_getmethods__["m_nano"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_nano_get
    if _newclass:
        m_nano = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_nano_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_nano_set)
    __swig_setmethods__["m_fixType"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_fixType_set
    __swig_getmethods__["m_fixType"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_fixType_get
    if _newclass:
        m_fixType = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_fixType_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_fixType_set)
    __swig_setmethods__["m_flags"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_flags_set
    __swig_getmethods__["m_flags"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_flags_get
    if _newclass:
        m_flags = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_flags_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_flags_set)
    __swig_setmethods__["m_numSv"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_numSv_set
    __swig_getmethods__["m_numSv"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_numSv_get
    if _newclass:
        m_numSv = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_numSv_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_numSv_set)
    __swig_setmethods__["m_res1"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_res1_set
    __swig_getmethods__["m_res1"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_res1_get
    if _newclass:
        m_res1 = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_res1_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_res1_set)
    __swig_setmethods__["m_lon"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_lon_set
    __swig_getmethods__["m_lon"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_lon_get
    if _newclass:
        m_lon = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_lon_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_lon_set)
    __swig_setmethods__["m_lat"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_lat_set
    __swig_getmethods__["m_lat"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_lat_get
    if _newclass:
        m_lat = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_lat_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_lat_set)
    __swig_setmethods__["m_height"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_height_set
    __swig_getmethods__["m_height"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_height_get
    if _newclass:
        m_height = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_height_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_height_set)
    __swig_setmethods__["m_hMsl"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hMsl_set
    __swig_getmethods__["m_hMsl"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hMsl_get
    if _newclass:
        m_hMsl = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hMsl_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hMsl_set)
    __swig_setmethods__["m_hAcc"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hAcc_set
    __swig_getmethods__["m_hAcc"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hAcc_get
    if _newclass:
        m_hAcc = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hAcc_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hAcc_set)
    __swig_setmethods__["m_vAcc"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_vAcc_set
    __swig_getmethods__["m_vAcc"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_vAcc_get
    if _newclass:
        m_vAcc = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_vAcc_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_vAcc_set)
    __swig_setmethods__["m_velN"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velN_set
    __swig_getmethods__["m_velN"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velN_get
    if _newclass:
        m_velN = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velN_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velN_set)
    __swig_setmethods__["m_velE"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velE_set
    __swig_getmethods__["m_velE"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velE_get
    if _newclass:
        m_velE = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velE_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velE_set)
    __swig_setmethods__["m_velD"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velD_set
    __swig_getmethods__["m_velD"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velD_get
    if _newclass:
        m_velD = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velD_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_velD_set)
    __swig_setmethods__["m_gSpeed"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_gSpeed_set
    __swig_getmethods__["m_gSpeed"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_gSpeed_get
    if _newclass:
        m_gSpeed = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_gSpeed_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_gSpeed_set)
    __swig_setmethods__["m_headMot"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headMot_set
    __swig_getmethods__["m_headMot"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headMot_get
    if _newclass:
        m_headMot = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headMot_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headMot_set)
    __swig_setmethods__["m_sAcc"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_sAcc_set
    __swig_getmethods__["m_sAcc"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_sAcc_get
    if _newclass:
        m_sAcc = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_sAcc_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_sAcc_set)
    __swig_setmethods__["m_headAcc"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headAcc_set
    __swig_getmethods__["m_headAcc"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headAcc_get
    if _newclass:
        m_headAcc = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headAcc_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headAcc_set)
    __swig_setmethods__["m_headVeh"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headVeh_set
    __swig_getmethods__["m_headVeh"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headVeh_get
    if _newclass:
        m_headVeh = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headVeh_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_headVeh_set)
    __swig_setmethods__["m_gdop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_gdop_set
    __swig_getmethods__["m_gdop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_gdop_get
    if _newclass:
        m_gdop = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_gdop_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_gdop_set)
    __swig_setmethods__["m_pdop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_pdop_set
    __swig_getmethods__["m_pdop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_pdop_get
    if _newclass:
        m_pdop = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_pdop_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_pdop_set)
    __swig_setmethods__["m_tdop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_tdop_set
    __swig_getmethods__["m_tdop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_tdop_get
    if _newclass:
        m_tdop = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_tdop_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_tdop_set)
    __swig_setmethods__["m_vdop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_vdop_set
    __swig_getmethods__["m_vdop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_vdop_get
    if _newclass:
        m_vdop = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_vdop_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_vdop_set)
    __swig_setmethods__["m_hdop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hdop_set
    __swig_getmethods__["m_hdop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hdop_get
    if _newclass:
        m_hdop = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hdop_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_hdop_set)
    __swig_setmethods__["m_ndop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_ndop_set
    __swig_getmethods__["m_ndop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_ndop_get
    if _newclass:
        m_ndop = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_ndop_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_ndop_set)
    __swig_setmethods__["m_edop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_edop_set
    __swig_getmethods__["m_edop"] = _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_edop_get
    if _newclass:
        m_edop = _swig_property(_xsensdeviceapi_py35_64.XsRawGnssPvtData_m_edop_get, _xsensdeviceapi_py35_64.XsRawGnssPvtData_m_edop_set)

    def __eq__(self, other: 'XsRawGnssPvtData') -> "bool":
        return _xsensdeviceapi_py35_64.XsRawGnssPvtData___eq__(self, other)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsRawGnssPvtData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsRawGnssPvtData
    __del__ = lambda self: None
XsRawGnssPvtData_swigregister = _xsensdeviceapi_py35_64.XsRawGnssPvtData_swigregister
XsRawGnssPvtData_swigregister(XsRawGnssPvtData)

class XsDataPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDataPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsDataPacket, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDataPacket(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDataPacket
    __del__ = lambda self: None

    def __assign__(self, other: 'XsDataPacket') -> "XsDataPacket &":
        return _xsensdeviceapi_py35_64.XsDataPacket___assign__(self, other)

    def swap(self, other: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_swap(self, other)

    def clear(self, id: 'XsDataIdentifier'=XDI_None) -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_clear(self, id)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_empty(self)

    def deviceId(self) -> "XsDeviceId":
        return _xsensdeviceapi_py35_64.XsDataPacket_deviceId(self)

    def itemCount(self) -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_itemCount(self)

    def setMessage(self, msg: 'XsMessage') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setMessage(self, msg)

    def toMessage(self) -> "XsMessage":
        return _xsensdeviceapi_py35_64.XsDataPacket_toMessage(self)

    def setDeviceId(self, id: 'XsDeviceId') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setDeviceId(self, id)

    def dataFormat(self, id: 'XsDataIdentifier') -> "XsDataIdentifier":
        return _xsensdeviceapi_py35_64.XsDataPacket_dataFormat(self, id)

    def rawAcceleration(self) -> "XsUShortVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawAcceleration(self)

    def rawAccelerationConverted(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawAccelerationConverted(self)

    def containsRawAcceleration(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRawAcceleration(self)

    def setRawAcceleration(self, vec: 'XsUShortVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRawAcceleration(self, vec)

    def rawGyroscopeData(self) -> "XsUShortVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawGyroscopeData(self)

    def rawGyroscopeDataConverted(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawGyroscopeDataConverted(self)

    def containsRawGyroscopeData(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRawGyroscopeData(self)

    def setRawGyroscopeData(self, vec: 'XsUShortVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRawGyroscopeData(self, vec)

    def rawGyroscopeTemperatureData(self) -> "XsUShortVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawGyroscopeTemperatureData(self)

    def rawGyroscopeTemperatureDataConverted(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawGyroscopeTemperatureDataConverted(self)

    def containsRawGyroscopeTemperatureData(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRawGyroscopeTemperatureData(self)

    def setRawGyroscopeTemperatureData(self, vec: 'XsUShortVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRawGyroscopeTemperatureData(self, vec)

    def rawMagneticField(self) -> "XsUShortVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawMagneticField(self)

    def rawMagneticFieldConverted(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawMagneticFieldConverted(self)

    def containsRawMagneticField(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRawMagneticField(self)

    def setRawMagneticField(self, vec: 'XsUShortVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRawMagneticField(self, vec)

    def rawTemperature(self) -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawTemperature(self)

    def containsRawTemperature(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRawTemperature(self)

    def setRawTemperature(self, temp: 'uint16_t') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRawTemperature(self, temp)

    def rawData(self) -> "XsScrData":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawData(self)

    def containsRawData(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRawData(self)

    def setRawData(self, data: 'XsScrData') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRawData(self, data)

    def velocityIncrement(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_velocityIncrement(self)

    def containsVelocityIncrement(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsVelocityIncrement(self)

    def setVelocityIncrement(self, vec: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setVelocityIncrement(self, vec)

    def calibratedAcceleration(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_calibratedAcceleration(self)

    def containsCalibratedAcceleration(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsCalibratedAcceleration(self)

    def setCalibratedAcceleration(self, vec: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setCalibratedAcceleration(self, vec)

    def orientationIncrement(self) -> "XsQuaternion":
        return _xsensdeviceapi_py35_64.XsDataPacket_orientationIncrement(self)

    def containsOrientationIncrement(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsOrientationIncrement(self)

    def setOrientationIncrement(self, quat: 'XsQuaternion') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setOrientationIncrement(self, quat)

    def calibratedGyroscopeData(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_calibratedGyroscopeData(self)

    def containsCalibratedGyroscopeData(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsCalibratedGyroscopeData(self)

    def setCalibratedGyroscopeData(self, vec: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setCalibratedGyroscopeData(self, vec)

    def calibratedMagneticField(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_calibratedMagneticField(self)

    def containsCalibratedMagneticField(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsCalibratedMagneticField(self)

    def setCalibratedMagneticField(self, vec: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setCalibratedMagneticField(self, vec)

    def correctedMagneticField(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_correctedMagneticField(self)

    def containsCorrectedMagneticField(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsCorrectedMagneticField(self)

    def setCorrectedMagneticField(self, vec: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setCorrectedMagneticField(self, vec)

    def calibratedData(self) -> "XsCalibratedData":
        return _xsensdeviceapi_py35_64.XsDataPacket_calibratedData(self)

    def containsCalibratedData(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsCalibratedData(self)

    def setCalibratedData(self, data: 'XsCalibratedData') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setCalibratedData(self, data)

    def orientationQuaternion(self, *args) -> "XsQuaternion":
        return _xsensdeviceapi_py35_64.XsDataPacket_orientationQuaternion(self, *args)

    def setOrientationQuaternion(self, data: 'XsQuaternion', coordinateSystem: 'XsDataIdentifier') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setOrientationQuaternion(self, data, coordinateSystem)

    def orientationEuler(self, *args) -> "XsEuler":
        return _xsensdeviceapi_py35_64.XsDataPacket_orientationEuler(self, *args)

    def setOrientationEuler(self, data: 'XsEuler', coordinateSystem: 'XsDataIdentifier') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setOrientationEuler(self, data, coordinateSystem)

    def orientationMatrix(self, *args) -> "XsMatrix":
        return _xsensdeviceapi_py35_64.XsDataPacket_orientationMatrix(self, *args)

    def setOrientationMatrix(self, data: 'XsMatrix', coordinateSystem: 'XsDataIdentifier') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setOrientationMatrix(self, data, coordinateSystem)

    def containsOrientation(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsOrientation(self)

    def orientationIdentifier(self) -> "XsDataIdentifier":
        return _xsensdeviceapi_py35_64.XsDataPacket_orientationIdentifier(self)

    def coordinateSystemOrientation(self) -> "XsDataIdentifier":
        return _xsensdeviceapi_py35_64.XsDataPacket_coordinateSystemOrientation(self)

    def sdiData(self) -> "XsSdiData":
        return _xsensdeviceapi_py35_64.XsDataPacket_sdiData(self)

    def containsSdiData(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsSdiData(self)

    def setSdiData(self, data: 'XsSdiData') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setSdiData(self, data)

    def gloveData(self) -> "XsGloveData":
        return _xsensdeviceapi_py35_64.XsDataPacket_gloveData(self)

    def containsGloveData(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsGloveData(self)

    def setGloveData(self, data: 'XsGloveData') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setGloveData(self, data)

    def storedDeviceId(self) -> "XsDeviceId":
        return _xsensdeviceapi_py35_64.XsDataPacket_storedDeviceId(self)

    def containsStoredDeviceId(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsStoredDeviceId(self)

    def setStoredDeviceId(self, data: 'XsDeviceId') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setStoredDeviceId(self, data)

    def storedLocationId(self) -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_storedLocationId(self)

    def containsStoredLocationId(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsStoredLocationId(self)

    def setStoredLocationId(self, data: 'uint16_t') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setStoredLocationId(self, data)

    def status(self) -> "uint32_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_status(self)

    def containsStatus(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsStatus(self)

    def containsDetailedStatus(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsDetailedStatus(self)

    def setStatus(self, data: 'uint32_t const') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setStatus(self, data)

    def setStatusByte(self, data: 'uint8_t const') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setStatusByte(self, data)

    def packetCounter8(self) -> "uint8_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_packetCounter8(self)

    def containsPacketCounter8(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsPacketCounter8(self)

    def setPacketCounter8(self, counter: 'uint8_t') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setPacketCounter8(self, counter)

    def packetCounter(self) -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_packetCounter(self)

    def containsPacketCounter(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsPacketCounter(self)

    def setPacketCounter(self, counter: 'uint16_t') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setPacketCounter(self, counter)

    def sampleTimeFine(self) -> "uint32_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_sampleTimeFine(self)

    def containsSampleTimeFine(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsSampleTimeFine(self)

    def setSampleTimeFine(self, counter: 'uint32_t') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setSampleTimeFine(self, counter)

    def sampleTimeCoarse(self) -> "uint32_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_sampleTimeCoarse(self)

    def containsSampleTimeCoarse(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsSampleTimeCoarse(self)

    def setSampleTimeCoarse(self, counter: 'uint32_t') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setSampleTimeCoarse(self, counter)

    def sampleTime64(self) -> "uint64_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_sampleTime64(self)

    def containsSampleTime64(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsSampleTime64(self)

    def setSampleTime64(self, counter: 'uint64_t') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setSampleTime64(self, counter)

    def freeAcceleration(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_freeAcceleration(self)

    def containsFreeAcceleration(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsFreeAcceleration(self)

    def setFreeAcceleration(self, g: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setFreeAcceleration(self, g)

    def temperature(self) -> "double":
        return _xsensdeviceapi_py35_64.XsDataPacket_temperature(self)

    def containsTemperature(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsTemperature(self)

    def setTemperature(self, temperature: 'double') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setTemperature(self, temperature)

    def pressure(self) -> "XsPressure":
        return _xsensdeviceapi_py35_64.XsDataPacket_pressure(self)

    def containsPressure(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsPressure(self)

    def containsPressureAge(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsPressureAge(self)

    def setPressure(self, data: 'XsPressure') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setPressure(self, data)

    def analogIn1Data(self) -> "XsAnalogInData":
        return _xsensdeviceapi_py35_64.XsDataPacket_analogIn1Data(self)

    def containsAnalogIn1Data(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsAnalogIn1Data(self)

    def setAnalogIn1Data(self, data: 'XsAnalogInData') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setAnalogIn1Data(self, data)

    def analogIn2Data(self) -> "XsAnalogInData":
        return _xsensdeviceapi_py35_64.XsDataPacket_analogIn2Data(self)

    def containsAnalogIn2Data(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsAnalogIn2Data(self)

    def setAnalogIn2Data(self, data: 'XsAnalogInData') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setAnalogIn2Data(self, data)

    def positionLLA(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_positionLLA(self)

    def containsPositionLLA(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsPositionLLA(self)

    def setPositionLLA(self, data: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setPositionLLA(self, data)

    def latitudeLongitude(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_latitudeLongitude(self)

    def containsLatitudeLongitude(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsLatitudeLongitude(self)

    def setLatitudeLongitude(self, data: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setLatitudeLongitude(self, data)

    def altitude(self) -> "double":
        return _xsensdeviceapi_py35_64.XsDataPacket_altitude(self)

    def containsAltitude(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsAltitude(self)

    def setAltitude(self, data: 'double') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setAltitude(self, data)

    def altitudeMsl(self) -> "double":
        return _xsensdeviceapi_py35_64.XsDataPacket_altitudeMsl(self)

    def containsAltitudeMsl(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsAltitudeMsl(self)

    def setAltitudeMsl(self, data: 'double') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setAltitudeMsl(self, data)

    def velocity(self, *args) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_velocity(self, *args)

    def containsVelocity(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsVelocity(self)

    def setVelocity(self, data: 'XsVector', coordinateSystem: 'XsDataIdentifier') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setVelocity(self, data, coordinateSystem)

    def velocityIdentifier(self) -> "XsDataIdentifier":
        return _xsensdeviceapi_py35_64.XsDataPacket_velocityIdentifier(self)

    def coordinateSystemVelocity(self) -> "XsDataIdentifier":
        return _xsensdeviceapi_py35_64.XsDataPacket_coordinateSystemVelocity(self)

    def utcTime(self) -> "XsTimeInfo":
        return _xsensdeviceapi_py35_64.XsDataPacket_utcTime(self)

    def containsUtcTime(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsUtcTime(self)

    def setUtcTime(self, data: 'XsTimeInfo') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setUtcTime(self, data)

    def frameRange(self) -> "XsRange":
        return _xsensdeviceapi_py35_64.XsDataPacket_frameRange(self)

    def containsFrameRange(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsFrameRange(self)

    def setFrameRange(self, r: 'XsRange') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setFrameRange(self, r)

    def rssi(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDataPacket_rssi(self)

    def containsRssi(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRssi(self)

    def setRssi(self, r: 'int') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRssi(self, r)

    def rawGnssPvtData(self) -> "XsRawGnssPvtData":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawGnssPvtData(self)

    def containsRawGnssPvtData(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRawGnssPvtData(self)

    def setRawGnssPvtData(self, raw: 'XsRawGnssPvtData') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRawGnssPvtData(self, raw)

    def gnssAge(self) -> "uint8_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_gnssAge(self)

    def containsGnssAge(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsGnssAge(self)

    def setGnssAge(self, age: 'uint8_t') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setGnssAge(self, age)

    def rawGnssSatInfo(self) -> "XsRawGnssSatInfo":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawGnssSatInfo(self)

    def containsRawGnssSatInfo(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRawGnssSatInfo(self)

    def setRawGnssSatInfo(self, data: 'XsRawGnssSatInfo') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRawGnssSatInfo(self, data)

    def fullSnapshot(self) -> "XsSnapshot":
        return _xsensdeviceapi_py35_64.XsDataPacket_fullSnapshot(self)

    def containsFullSnapshot(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsFullSnapshot(self)

    def setFullSnapshot(self, data: 'XsSnapshot', retransmission: 'bool') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setFullSnapshot(self, data, retransmission)

    def awindaSnapshot(self) -> "XsSnapshot":
        return _xsensdeviceapi_py35_64.XsDataPacket_awindaSnapshot(self)

    def containsAwindaSnapshot(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsAwindaSnapshot(self)

    def setAwindaSnapshot(self, raw: 'XsSnapshot', retransmission: 'bool') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setAwindaSnapshot(self, raw, retransmission)

    def isAwindaSnapshotARetransmission(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_isAwindaSnapshotARetransmission(self)

    def gloveSnapshot(self) -> "XsGloveSnapshot":
        return _xsensdeviceapi_py35_64.XsDataPacket_gloveSnapshot(self)

    def containsGloveSnapshot(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsGloveSnapshot(self)

    def setGloveSnapshot(self, data: 'XsGloveSnapshot', retransmission: 'bool') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setGloveSnapshot(self, data, retransmission)

    def merge(self, other: 'XsDataPacket', overwrite: 'bool'=True) -> "XsDataPacket &":
        return _xsensdeviceapi_py35_64.XsDataPacket_merge(self, other, overwrite)

    def setTimeOfArrival(self, t: 'XsTimeStamp') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setTimeOfArrival(self, t)

    def timeOfArrival(self) -> "XsTimeStamp":
        return _xsensdeviceapi_py35_64.XsDataPacket_timeOfArrival(self)

    def setEstimatedTimeOfSampling(self, t: 'XsTimeStamp') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setEstimatedTimeOfSampling(self, t)

    def estimatedTimeOfSampling(self) -> "XsTimeStamp":
        return _xsensdeviceapi_py35_64.XsDataPacket_estimatedTimeOfSampling(self)

    def setPacketId(self, t: 'int64_t') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setPacketId(self, t)

    def packetId(self) -> "int64_t":
        return _xsensdeviceapi_py35_64.XsDataPacket_packetId(self)

    def setTriggerIndication(self, triggerId: 'XsDataIdentifier', triggerIndicationData: 'XsTriggerIndicationData') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setTriggerIndication(self, triggerId, triggerIndicationData)

    def containsTriggerIndication(self, triggerId: 'XsDataIdentifier') -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsTriggerIndication(self, triggerId)

    def triggerIndication(self, triggerId: 'XsDataIdentifier') -> "XsTriggerIndicationData":
        return _xsensdeviceapi_py35_64.XsDataPacket_triggerIndication(self, triggerId)

    def rawBlob(self) -> "XsByteArray":
        return _xsensdeviceapi_py35_64.XsDataPacket_rawBlob(self)

    def containsRawBlob(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRawBlob(self)

    def setRawBlob(self, data: 'XsByteArray') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRawBlob(self, data)

    def accelerationHR(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_accelerationHR(self)

    def containsAccelerationHR(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsAccelerationHR(self)

    def setAccelerationHR(self, vec: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setAccelerationHR(self, vec)

    def rateOfTurnHR(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDataPacket_rateOfTurnHR(self)

    def containsRateOfTurnHR(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacket_containsRateOfTurnHR(self)

    def setRateOfTurnHR(self, vec: 'XsVector') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacket_setRateOfTurnHR(self, vec)

    def simplifiedContents(self) -> "std::map< XsDataIdentifier,void *,std::less< XsDataIdentifier >,std::allocator< std::pair< XsDataIdentifier const,void * > > >":
        return _xsensdeviceapi_py35_64.XsDataPacket_simplifiedContents(self)
    __swig_setmethods__["d"] = _xsensdeviceapi_py35_64.XsDataPacket_d_set
    __swig_getmethods__["d"] = _xsensdeviceapi_py35_64.XsDataPacket_d_get
    if _newclass:
        d = _swig_property(_xsensdeviceapi_py35_64.XsDataPacket_d_get, _xsensdeviceapi_py35_64.XsDataPacket_d_set)
    __swig_setmethods__["m_deviceId"] = _xsensdeviceapi_py35_64.XsDataPacket_m_deviceId_set
    __swig_getmethods__["m_deviceId"] = _xsensdeviceapi_py35_64.XsDataPacket_m_deviceId_get
    if _newclass:
        m_deviceId = _swig_property(_xsensdeviceapi_py35_64.XsDataPacket_m_deviceId_get, _xsensdeviceapi_py35_64.XsDataPacket_m_deviceId_set)
    __swig_setmethods__["m_toa"] = _xsensdeviceapi_py35_64.XsDataPacket_m_toa_set
    __swig_getmethods__["m_toa"] = _xsensdeviceapi_py35_64.XsDataPacket_m_toa_get
    if _newclass:
        m_toa = _swig_property(_xsensdeviceapi_py35_64.XsDataPacket_m_toa_get, _xsensdeviceapi_py35_64.XsDataPacket_m_toa_set)
    __swig_setmethods__["m_packetId"] = _xsensdeviceapi_py35_64.XsDataPacket_m_packetId_set
    __swig_getmethods__["m_packetId"] = _xsensdeviceapi_py35_64.XsDataPacket_m_packetId_get
    if _newclass:
        m_packetId = _swig_property(_xsensdeviceapi_py35_64.XsDataPacket_m_packetId_get, _xsensdeviceapi_py35_64.XsDataPacket_m_packetId_set)
    __swig_setmethods__["m_etos"] = _xsensdeviceapi_py35_64.XsDataPacket_m_etos_set
    __swig_getmethods__["m_etos"] = _xsensdeviceapi_py35_64.XsDataPacket_m_etos_get
    if _newclass:
        m_etos = _swig_property(_xsensdeviceapi_py35_64.XsDataPacket_m_etos_get, _xsensdeviceapi_py35_64.XsDataPacket_m_etos_set)
XsDataPacket_swigregister = _xsensdeviceapi_py35_64.XsDataPacket_swigregister
XsDataPacket_swigregister(XsDataPacket)

class XsDataPacketPtrArray(_XsDataPacketPtrArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsDataPacketPtrArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDataPacketPtrArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsDataPacketPtrArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsDataPacketPtrArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDataPacketPtrArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDataPacketPtrArray
    __del__ = lambda self: None
XsDataPacketPtrArray_swigregister = _xsensdeviceapi_py35_64.XsDataPacketPtrArray_swigregister
XsDataPacketPtrArray_swigregister(XsDataPacketPtrArray)
g_xsDataPacketPtrArrayDescriptor = cvar.g_xsDataPacketPtrArrayDescriptor

XIR_BatteryLevel = _xsensdeviceapi_py35_64.XIR_BatteryLevel
XIR_GnssSvInfo = _xsensdeviceapi_py35_64.XIR_GnssSvInfo
class XsStringOutputTypeArray(_XsStringOutputTypeArrayImpl):
    __swig_setmethods__ = {}
    for _s in [_XsStringOutputTypeArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsStringOutputTypeArray, name, value)
    __swig_getmethods__ = {}
    for _s in [_XsStringOutputTypeArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsStringOutputTypeArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsStringOutputTypeArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsStringOutputTypeArray
    __del__ = lambda self: None
XsStringOutputTypeArray_swigregister = _xsensdeviceapi_py35_64.XsStringOutputTypeArray_swigregister
XsStringOutputTypeArray_swigregister(XsStringOutputTypeArray)
g_xsStringOutputTypeArrayDescriptor = cvar.g_xsStringOutputTypeArrayDescriptor

XCBC_1M = _xsensdeviceapi_py35_64.XCBC_1M
XCBC_800k = _xsensdeviceapi_py35_64.XCBC_800k
XCBC_500k = _xsensdeviceapi_py35_64.XCBC_500k
XCBC_250k = _xsensdeviceapi_py35_64.XCBC_250k
XCBC_125k = _xsensdeviceapi_py35_64.XCBC_125k
XCBC_100k = _xsensdeviceapi_py35_64.XCBC_100k
XCBC_83k3 = _xsensdeviceapi_py35_64.XCBC_83k3
XCBC_62k5 = _xsensdeviceapi_py35_64.XCBC_62k5
XCBC_50k = _xsensdeviceapi_py35_64.XCBC_50k
XCBC_33k3 = _xsensdeviceapi_py35_64.XCBC_33k3
XCBC_20k = _xsensdeviceapi_py35_64.XCBC_20k
XCBC_10k = _xsensdeviceapi_py35_64.XCBC_10k
XCBC_5k = _xsensdeviceapi_py35_64.XCBC_5k
XCBC_Invalid = _xsensdeviceapi_py35_64.XCBC_Invalid

def isDoubleScalar(pyObj: 'PyObject *', value: 'double *') -> "bool":
    return _xsensdeviceapi_py35_64.isDoubleScalar(pyObj, value)
isDoubleScalar = _xsensdeviceapi_py35_64.isDoubleScalar
class BooleanExit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BooleanExit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BooleanExit, name)
    __repr__ = _swig_repr

    def __init__(self, rv: 'bool'):
        this = _xsensdeviceapi_py35_64.new_BooleanExit(rv)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_getmethods__["m_returnValue"] = _xsensdeviceapi_py35_64.BooleanExit_m_returnValue_get
    if _newclass:
        m_returnValue = _swig_property(_xsensdeviceapi_py35_64.BooleanExit_m_returnValue_get)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_BooleanExit
    __del__ = lambda self: None
BooleanExit_swigregister = _xsensdeviceapi_py35_64.BooleanExit_swigregister
BooleanExit_swigregister(BooleanExit)


def xsVectorCreateGeneric(xsOrigin: 'XsVectorOrigin &', argNum: 'int'=0) -> "bool":
    return _xsensdeviceapi_py35_64.xsVectorCreateGeneric(xsOrigin, argNum)
xsVectorCreateGeneric = _xsensdeviceapi_py35_64.xsVectorCreateGeneric

def isXsVector(src: 'PyObject *', flags: 'int') -> "bool":
    return _xsensdeviceapi_py35_64.isXsVector(src, flags)
isXsVector = _xsensdeviceapi_py35_64.isXsVector

def xsMatrixCreateGeneric(xsOrigin: 'XsMatrixOrigin &', argNum: 'int'=0) -> "bool":
    return _xsensdeviceapi_py35_64.xsMatrixCreateGeneric(xsOrigin, argNum)
xsMatrixCreateGeneric = _xsensdeviceapi_py35_64.xsMatrixCreateGeneric

def isXsMatrix(src: 'PyObject *', flags: 'int') -> "bool":
    return _xsensdeviceapi_py35_64.isXsMatrix(src, flags)
isXsMatrix = _xsensdeviceapi_py35_64.isXsMatrix

def xsQuaternionCreateGeneric(xsOrigin: 'XsQuaternionOrigin &', argNum: 'int'=0) -> "bool":
    return _xsensdeviceapi_py35_64.xsQuaternionCreateGeneric(xsOrigin, argNum)
xsQuaternionCreateGeneric = _xsensdeviceapi_py35_64.xsQuaternionCreateGeneric

def isXsQuaternion(src: 'PyObject *', flags: 'int') -> "bool":
    return _xsensdeviceapi_py35_64.isXsQuaternion(src, flags)
isXsQuaternion = _xsensdeviceapi_py35_64.isXsQuaternion

def xsVector(*args) -> "PyObject *":
    return _xsensdeviceapi_py35_64.xsVector(*args)
xsVector = _xsensdeviceapi_py35_64.xsVector

def xsMatrix(*args) -> "PyObject *":
    return _xsensdeviceapi_py35_64.xsMatrix(*args)
xsMatrix = _xsensdeviceapi_py35_64.xsMatrix

def xsQuaternion(*args) -> "PyObject *":
    return _xsensdeviceapi_py35_64.xsQuaternion(*args)
xsQuaternion = _xsensdeviceapi_py35_64.xsQuaternion

_swigLib = _xsensdeviceapi_py35_64

class XsDevicePtrArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDevicePtrArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsDevicePtrArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDevicePtrArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDevicePtrArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_clear(self)

    def __eq__(self, other: 'XsArrayImpl< XsDevicePtr,g_xsDevicePtrArrayDescriptor,XsDevicePtrArray >::ArrayImpl const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___eq__(self, other)

    def __ne__(self, other: 'XsArrayImpl< XsDevicePtr,g_xsDevicePtrArrayDescriptor,XsDevicePtrArray >::ArrayImpl const &') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_descriptor(self)

    def first(self) -> "XsDevicePtr":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_first(self)

    def last(self) -> "XsDevicePtr":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_last(self)

    def insert(self, item: 'XsDevicePtr const &', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsDevicePtr const &') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsDevicePtr const &') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsDevicePtr const *') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_setSize(self, count)

    def append(self, other: 'XsArrayImpl< XsDevicePtr,g_xsDevicePtrArrayDescriptor,XsDevicePtrArray >::ArrayImpl const &') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_append(self, other)

    def __assign__(self, other: 'XsArrayImpl< XsDevicePtr,g_xsDevicePtrArrayDescriptor,XsDevicePtrArray >::ArrayImpl const &') -> "XsArrayImpl< XsDevicePtr,g_xsDevicePtrArrayDescriptor,XsDevicePtrArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_empty(self)

    def swap(self, other: 'XsArrayImpl< XsDevicePtr,g_xsDevicePtrArrayDescriptor,XsDevicePtrArray >::ArrayImpl &') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_swap(self, other)

    def find(self, needle: 'XsDevicePtr const &') -> "int":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsDevicePtr":

        index = int(index)


        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsDevicePtr') -> "void":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsDevicePtr') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsDevicePtrArray *":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsDevicePtrArray') -> "XsDevicePtrArray *":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsDevicePtrArray') -> "XsDevicePtrArray *":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsDevicePtrArray') -> "XsDevicePtrArray *":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsDevicePtrArray *":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsDevicePtrArray *":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsDevicePtrArray *":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsDevicePtr') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsDevicePtrArray *":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsDevicePtrArray *":
        return _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl___delitem__(self, index)
XsDevicePtrArrayImpl_swigregister = _xsensdeviceapi_py35_64.XsDevicePtrArrayImpl_swigregister
XsDevicePtrArrayImpl_swigregister(XsDevicePtrArrayImpl)

class XsDataPacketPtrArrayImpl(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDataPacketPtrArrayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsDataPacketPtrArrayImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDataPacketPtrArrayImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDataPacketPtrArrayImpl
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_clear(self)

    def __eq__(self, other: 'XsDataPacketPtrArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___eq__(self, other)

    def __ne__(self, other: 'XsDataPacketPtrArrayImpl') -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___ne__(self, other)

    def reserve(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_reserve(self, count)

    def reserved(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_reserved(self)

    def descriptor(self) -> "XsArrayDescriptor const &":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_descriptor(self)

    def first(self) -> "XsDataPacket *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_first(self)

    def last(self) -> "XsDataPacket *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_last(self)

    def insert(self, item: 'XsDataPacket', index: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_insert(self, item, index)

    def push_back(self, item: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_push_back(self, item)

    def pop_back(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_pop_back(self, count)

    def push_front(self, item: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_push_front(self, item)

    def pop_front(self, count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_pop_front(self, count)

    def size(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_size(self)

    def erase(self, index: 'XsSize', count: 'XsSize'=1) -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_erase(self, index, count)

    def assign(self, count: 'XsSize', src: 'XsDataPacket *const *') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_assign(self, count, src)

    def resize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_resize(self, count)

    def setSize(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_setSize(self, count)

    def append(self, other: 'XsDataPacketPtrArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_append(self, other)

    def __assign__(self, other: 'XsDataPacketPtrArrayImpl') -> "XsArrayImpl< XsDataPacket *,g_xsDataPacketPtrArrayDescriptor,XsDataPacketPtrArray >::ArrayImpl &":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___assign__(self, other)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_empty(self)

    def swap(self, other: 'XsDataPacketPtrArrayImpl') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_swap(self, other)

    def find(self, needle: 'XsDataPacket') -> "int":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_find(self, needle)

    def removeDuplicates(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_removeDuplicates(self)

    def removeDuplicatesPredicate(self, predicate: 'XsArrayItemCompareFunc') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_removeDuplicatesPredicate(self, predicate)

    def sort(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_sort(self)

    def reverse(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_reverse(self)

    def getItem(self, index: 'XsSize') -> "XsDataPacket *":

        index = int(index)


        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_getItem(self, index)


    def __setitem__(self, index: 'XsSize', val: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___setitem__(self, index, val)

    def setItem(self, index: 'XsSize', val: 'XsDataPacket') -> "void":

        index = int(index)


        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_setItem(self, index, val)


    def __len__(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___len__(self)

    def __getitem__(self, *args) -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___getitem__(self, *args)

    def __add__(self, other: 'XsDataPacketPtrArray') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___add__(self, other)

    def __iadd__(self, other: 'XsDataPacketPtrArray') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___iadd__(self, other)

    def __radd__(self, other: 'XsDataPacketPtrArray') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___radd__(self, other)

    def __mul__(self, count: 'int') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___mul__(self, count)

    def __imul__(self, count: 'int') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___imul__(self, count)

    def __rmul__(self, count: 'int') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___rmul__(self, count)

    def __contains__(self, val: 'XsDataPacket') -> "bool":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___contains__(self, val)

    def __reversed__(self) -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___reversed__(self)

    def __delitem__(self, index: 'XsSize') -> "XsDataPacketPtrArray *":
        return _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl___delitem__(self, index)
XsDataPacketPtrArrayImpl_swigregister = _xsensdeviceapi_py35_64.XsDataPacketPtrArrayImpl_swigregister
XsDataPacketPtrArrayImpl_swigregister(XsDataPacketPtrArrayImpl)


def xdaDllPath(path: 'XsString') -> "void":
    return _xsensdeviceapi_py35_64.xdaDllPath(path)
xdaDllPath = _xsensdeviceapi_py35_64.xdaDllPath

def xdaVersion(version: 'XsVersion *') -> "void":
    return _xsensdeviceapi_py35_64.xdaVersion(version)
xdaVersion = _xsensdeviceapi_py35_64.xdaVersion

def xdaSetLogPath(path: 'XsString') -> "void":
    return _xsensdeviceapi_py35_64.xdaSetLogPath(path)
xdaSetLogPath = _xsensdeviceapi_py35_64.xdaSetLogPath

def xdaTerminate() -> "void":
    return _xsensdeviceapi_py35_64.xdaTerminate()
xdaTerminate = _xsensdeviceapi_py35_64.xdaTerminate

def xdaEnableNetworkScanning() -> "void":
    return _xsensdeviceapi_py35_64.xdaEnableNetworkScanning()
xdaEnableNetworkScanning = _xsensdeviceapi_py35_64.xdaEnableNetworkScanning

def xdaDisableNetworkScanning() -> "void":
    return _xsensdeviceapi_py35_64.xdaDisableNetworkScanning()
xdaDisableNetworkScanning = _xsensdeviceapi_py35_64.xdaDisableNetworkScanning

def xdaDefaultLogFileName() -> "char const *":
    return _xsensdeviceapi_py35_64.xdaDefaultLogFileName()
xdaDefaultLogFileName = _xsensdeviceapi_py35_64.xdaDefaultLogFileName

def xdaSetThreadPoolInstance(arg1: 'void *') -> "void":
    return _xsensdeviceapi_py35_64.xdaSetThreadPoolInstance(arg1)
xdaSetThreadPoolInstance = _xsensdeviceapi_py35_64.xdaSetThreadPoolInstance

def xdaSetLogger(journaller: 'Journaller *') -> "void":
    return _xsensdeviceapi_py35_64.xdaSetLogger(journaller)
xdaSetLogger = _xsensdeviceapi_py35_64.xdaSetLogger
XDS_Initial = _xsensdeviceapi_py35_64.XDS_Initial
XDS_Config = _xsensdeviceapi_py35_64.XDS_Config
XDS_Measurement = _xsensdeviceapi_py35_64.XDS_Measurement
XDS_WaitingForRecordingStart = _xsensdeviceapi_py35_64.XDS_WaitingForRecordingStart
XDS_Recording = _xsensdeviceapi_py35_64.XDS_Recording
XDS_FlushingData = _xsensdeviceapi_py35_64.XDS_FlushingData
XDS_Destructing = _xsensdeviceapi_py35_64.XDS_Destructing
XCS_Disconnected = _xsensdeviceapi_py35_64.XCS_Disconnected
XCS_Rejected = _xsensdeviceapi_py35_64.XCS_Rejected
XCS_PluggedIn = _xsensdeviceapi_py35_64.XCS_PluggedIn
XCS_Wireless = _xsensdeviceapi_py35_64.XCS_Wireless
XCS_WirelessOutOfRange = _xsensdeviceapi_py35_64.XCS_WirelessOutOfRange
XCS_File = _xsensdeviceapi_py35_64.XCS_File
XCS_Unknown = _xsensdeviceapi_py35_64.XCS_Unknown
XPT_Xbus = _xsensdeviceapi_py35_64.XPT_Xbus
XPT_Nmea = _xsensdeviceapi_py35_64.XPT_Nmea
XPT_ImarFsas = _xsensdeviceapi_py35_64.XPT_ImarFsas
XPT_ImarIfog = _xsensdeviceapi_py35_64.XPT_ImarIfog
XSTF_X = _xsensdeviceapi_py35_64.XSTF_X
XSTF_Y = _xsensdeviceapi_py35_64.XSTF_Y
XSTF_Z = _xsensdeviceapi_py35_64.XSTF_Z
XSTF_AccShift = _xsensdeviceapi_py35_64.XSTF_AccShift
XSTF_AccX = _xsensdeviceapi_py35_64.XSTF_AccX
XSTF_AccY = _xsensdeviceapi_py35_64.XSTF_AccY
XSTF_AccZ = _xsensdeviceapi_py35_64.XSTF_AccZ
XSTF_GyrShift = _xsensdeviceapi_py35_64.XSTF_GyrShift
XSTF_GyrX = _xsensdeviceapi_py35_64.XSTF_GyrX
XSTF_GyrY = _xsensdeviceapi_py35_64.XSTF_GyrY
XSTF_GyrZ = _xsensdeviceapi_py35_64.XSTF_GyrZ
XSTF_MagShift = _xsensdeviceapi_py35_64.XSTF_MagShift
XSTF_MagX = _xsensdeviceapi_py35_64.XSTF_MagX
XSTF_MagY = _xsensdeviceapi_py35_64.XSTF_MagY
XSTF_MagZ = _xsensdeviceapi_py35_64.XSTF_MagZ
XSTF_Baro = _xsensdeviceapi_py35_64.XSTF_Baro
XSTF_Gnss = _xsensdeviceapi_py35_64.XSTF_Gnss
class XsSelfTestResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsSelfTestResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsSelfTestResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_flags"] = _xsensdeviceapi_py35_64.XsSelfTestResult_m_flags_set
    __swig_getmethods__["m_flags"] = _xsensdeviceapi_py35_64.XsSelfTestResult_m_flags_get
    if _newclass:
        m_flags = _swig_property(_xsensdeviceapi_py35_64.XsSelfTestResult_m_flags_get, _xsensdeviceapi_py35_64.XsSelfTestResult_m_flags_set)
    if _newclass:
        create = staticmethod(_xsensdeviceapi_py35_64.XsSelfTestResult_create)
    else:
        create = _xsensdeviceapi_py35_64.XsSelfTestResult_create

    def accX(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_accX(self)

    def accY(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_accY(self)

    def accZ(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_accZ(self)

    def gyrX(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_gyrX(self)

    def gyrY(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_gyrY(self)

    def gyrZ(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_gyrZ(self)

    def magX(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_magX(self)

    def magY(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_magY(self)

    def magZ(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_magZ(self)

    def baro(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_baro(self)

    def gnss(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsSelfTestResult_gnss(self)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsSelfTestResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsSelfTestResult
    __del__ = lambda self: None
XsSelfTestResult_swigregister = _xsensdeviceapi_py35_64.XsSelfTestResult_swigregister
XsSelfTestResult_swigregister(XsSelfTestResult)

def XsSelfTestResult_create(resultFlags: 'uint16_t') -> "XsSelfTestResult":
    return _xsensdeviceapi_py35_64.XsSelfTestResult_create(resultFlags)
XsSelfTestResult_create = _xsensdeviceapi_py35_64.XsSelfTestResult_create

XDPI_Unknown = _xsensdeviceapi_py35_64.XDPI_Unknown
XDPI_PacketErrorRate = _xsensdeviceapi_py35_64.XDPI_PacketErrorRate
XDPI_ExtendedBuffer = _xsensdeviceapi_py35_64.XDPI_ExtendedBuffer
XDPI_UplinkTimeout = _xsensdeviceapi_py35_64.XDPI_UplinkTimeout
XDPI_SyncLossTimeout = _xsensdeviceapi_py35_64.XDPI_SyncLossTimeout
class XsDeviceParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDeviceParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsDeviceParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDeviceParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def id(self) -> "XsDeviceParameterIdentifier":
        return _xsensdeviceapi_py35_64.XsDeviceParameter_id(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDeviceParameter
    __del__ = lambda self: None
XsDeviceParameter_swigregister = _xsensdeviceapi_py35_64.XsDeviceParameter_swigregister
XsDeviceParameter_swigregister(XsDeviceParameter)

class XsIccRepMotionResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsIccRepMotionResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsIccRepMotionResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_ddtAccuracy"] = _xsensdeviceapi_py35_64.XsIccRepMotionResult_m_ddtAccuracy_set
    __swig_getmethods__["m_ddtAccuracy"] = _xsensdeviceapi_py35_64.XsIccRepMotionResult_m_ddtAccuracy_get
    if _newclass:
        m_ddtAccuracy = _swig_property(_xsensdeviceapi_py35_64.XsIccRepMotionResult_m_ddtAccuracy_get, _xsensdeviceapi_py35_64.XsIccRepMotionResult_m_ddtAccuracy_set)
    __swig_setmethods__["m_dimension"] = _xsensdeviceapi_py35_64.XsIccRepMotionResult_m_dimension_set
    __swig_getmethods__["m_dimension"] = _xsensdeviceapi_py35_64.XsIccRepMotionResult_m_dimension_get
    if _newclass:
        m_dimension = _swig_property(_xsensdeviceapi_py35_64.XsIccRepMotionResult_m_dimension_get, _xsensdeviceapi_py35_64.XsIccRepMotionResult_m_dimension_set)
    __swig_setmethods__["m_status"] = _xsensdeviceapi_py35_64.XsIccRepMotionResult_m_status_set
    __swig_getmethods__["m_status"] = _xsensdeviceapi_py35_64.XsIccRepMotionResult_m_status_get
    if _newclass:
        m_status = _swig_property(_xsensdeviceapi_py35_64.XsIccRepMotionResult_m_status_get, _xsensdeviceapi_py35_64.XsIccRepMotionResult_m_status_set)

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsIccRepMotionResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ddtAccuracy(self) -> "float":
        return _xsensdeviceapi_py35_64.XsIccRepMotionResult_ddtAccuracy(self)

    def dimension(self) -> "uint8_t":
        return _xsensdeviceapi_py35_64.XsIccRepMotionResult_dimension(self)

    def status(self) -> "uint8_t":
        return _xsensdeviceapi_py35_64.XsIccRepMotionResult_status(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsIccRepMotionResult
    __del__ = lambda self: None
XsIccRepMotionResult_swigregister = _xsensdeviceapi_py35_64.XsIccRepMotionResult_swigregister
XsIccRepMotionResult_swigregister(XsIccRepMotionResult)

class XsDevicePtrArray(XsDevicePtrArrayImpl):
    __swig_setmethods__ = {}
    for _s in [XsDevicePtrArrayImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDevicePtrArray, name, value)
    __swig_getmethods__ = {}
    for _s in [XsDevicePtrArrayImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsDevicePtrArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDevicePtrArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDevicePtrArray
    __del__ = lambda self: None
XsDevicePtrArray_swigregister = _xsensdeviceapi_py35_64.XsDevicePtrArray_swigregister
XsDevicePtrArray_swigregister(XsDevicePtrArray)
g_xsDevicePtrArrayDescriptor = cvar.g_xsDevicePtrArrayDescriptor

XEM_Ignore = _xsensdeviceapi_py35_64.XEM_Ignore
XEM_IncreasePacketCounter = _xsensdeviceapi_py35_64.XEM_IncreasePacketCounter
XEM_IncreasePacketCounterAndSendError = _xsensdeviceapi_py35_64.XEM_IncreasePacketCounterAndSendError
XEM_SendErrorAndGoToConfig = _xsensdeviceapi_py35_64.XEM_SendErrorAndGoToConfig
XEM_Invalid = _xsensdeviceapi_py35_64.XEM_Invalid
class XsMtDeviceConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsMtDeviceConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsMtDeviceConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_deviceId"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_deviceId_set
    __swig_getmethods__["m_deviceId"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_deviceId_get
    if _newclass:
        m_deviceId = _swig_property(_xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_deviceId_get, _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_deviceId_set)
    __swig_setmethods__["m_reserved"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_reserved_set
    __swig_getmethods__["m_reserved"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_reserved_get
    if _newclass:
        m_reserved = _swig_property(_xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_reserved_get, _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_reserved_set)
    __swig_setmethods__["m_filterProfile"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterProfile_set
    __swig_getmethods__["m_filterProfile"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterProfile_get
    if _newclass:
        m_filterProfile = _swig_property(_xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterProfile_get, _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterProfile_set)
    __swig_setmethods__["m_fwRevMajor"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevMajor_set
    __swig_getmethods__["m_fwRevMajor"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevMajor_get
    if _newclass:
        m_fwRevMajor = _swig_property(_xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevMajor_get, _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevMajor_set)
    __swig_setmethods__["m_fwRevMinor"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevMinor_set
    __swig_getmethods__["m_fwRevMinor"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevMinor_get
    if _newclass:
        m_fwRevMinor = _swig_property(_xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevMinor_get, _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevMinor_set)
    __swig_setmethods__["m_fwRevRevision"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevRevision_set
    __swig_getmethods__["m_fwRevRevision"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevRevision_get
    if _newclass:
        m_fwRevRevision = _swig_property(_xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevRevision_get, _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_fwRevRevision_set)
    __swig_setmethods__["m_filterType"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterType_set
    __swig_getmethods__["m_filterType"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterType_get
    if _newclass:
        m_filterType = _swig_property(_xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterType_get, _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterType_set)
    __swig_setmethods__["m_filterMajor"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterMajor_set
    __swig_getmethods__["m_filterMajor"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterMajor_get
    if _newclass:
        m_filterMajor = _swig_property(_xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterMajor_get, _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterMajor_set)
    __swig_setmethods__["m_filterMinor"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterMinor_set
    __swig_getmethods__["m_filterMinor"] = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterMinor_get
    if _newclass:
        m_filterMinor = _swig_property(_xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterMinor_get, _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_m_filterMinor_set)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsMtDeviceConfiguration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsMtDeviceConfiguration
    __del__ = lambda self: None
XsMtDeviceConfiguration_swigregister = _xsensdeviceapi_py35_64.XsMtDeviceConfiguration_swigregister
XsMtDeviceConfiguration_swigregister(XsMtDeviceConfiguration)

class XsMasterDeviceConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsMasterDeviceConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsMasterDeviceConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_masterDeviceId"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_masterDeviceId_set
    __swig_getmethods__["m_masterDeviceId"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_masterDeviceId_get
    if _newclass:
        m_masterDeviceId = _swig_property(_xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_masterDeviceId_get, _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_masterDeviceId_set)
    __swig_setmethods__["m_samplingPeriod"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_samplingPeriod_set
    __swig_getmethods__["m_samplingPeriod"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_samplingPeriod_get
    if _newclass:
        m_samplingPeriod = _swig_property(_xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_samplingPeriod_get, _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_samplingPeriod_set)
    __swig_setmethods__["m_outputSkipFactor"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_outputSkipFactor_set
    __swig_getmethods__["m_outputSkipFactor"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_outputSkipFactor_get
    if _newclass:
        m_outputSkipFactor = _swig_property(_xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_outputSkipFactor_get, _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_outputSkipFactor_set)
    __swig_setmethods__["m_reserved1"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_reserved1_set
    __swig_getmethods__["m_reserved1"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_reserved1_get
    if _newclass:
        m_reserved1 = _swig_property(_xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_reserved1_get, _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_reserved1_set)
    __swig_setmethods__["m_date"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_date_set
    __swig_getmethods__["m_date"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_date_get
    if _newclass:
        m_date = _swig_property(_xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_date_get, _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_date_set)
    __swig_setmethods__["m_time"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_time_set
    __swig_getmethods__["m_time"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_time_get
    if _newclass:
        m_time = _swig_property(_xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_time_get, _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_time_set)
    __swig_setmethods__["m_productCode"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_productCode_set
    __swig_getmethods__["m_productCode"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_productCode_get
    if _newclass:
        m_productCode = _swig_property(_xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_productCode_get, _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_productCode_set)
    __swig_setmethods__["m_reserved2"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_reserved2_set
    __swig_getmethods__["m_reserved2"] = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_reserved2_get
    if _newclass:
        m_reserved2 = _swig_property(_xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_reserved2_get, _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_m_reserved2_set)

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsMasterDeviceConfiguration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsMasterDeviceConfiguration
    __del__ = lambda self: None
XsMasterDeviceConfiguration_swigregister = _xsensdeviceapi_py35_64.XsMasterDeviceConfiguration_swigregister
XsMasterDeviceConfiguration_swigregister(XsMasterDeviceConfiguration)

class XsDeviceConfigurationException(XsException):
    __swig_setmethods__ = {}
    for _s in [XsException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDeviceConfigurationException, name, value)
    __swig_getmethods__ = {}
    for _s in [XsException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsDeviceConfigurationException, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsDeviceConfigurationException()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDeviceConfigurationException
    __del__ = lambda self: None
XsDeviceConfigurationException_swigregister = _xsensdeviceapi_py35_64.XsDeviceConfigurationException_swigregister
XsDeviceConfigurationException_swigregister(XsDeviceConfigurationException)

class XsDeviceConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDeviceConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsDeviceConfiguration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDeviceConfiguration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsDeviceConfiguration') -> "XsDeviceConfiguration const &":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration___assign__(self, other)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDeviceConfiguration
    __del__ = lambda self: None

    def clear(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration_clear(self)

    def empty(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration_empty(self)

    def readFromMessage(self, msg: 'XsMessage') -> "void":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration_readFromMessage(self, msg)

    def writeToMessage(self, msg: 'XsMessage') -> "void":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration_writeToMessage(self, msg)

    def containsDevice(self, deviceId: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration_containsDevice(self, deviceId)

    def deviceInfo(self, *args) -> "XsMtDeviceConfiguration const &":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration_deviceInfo(self, *args)

    def masterInfo(self, *args) -> "XsMasterDeviceConfiguration const &":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration_masterInfo(self, *args)

    def setNumberOfDevices(self, count: 'XsSize') -> "void":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration_setNumberOfDevices(self, count)

    def numberOfDevices(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration_numberOfDevices(self)

    def deviceCount(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsDeviceConfiguration_deviceCount(self)
XsDeviceConfiguration_swigregister = _xsensdeviceapi_py35_64.XsDeviceConfiguration_swigregister
XsDeviceConfiguration_swigregister(XsDeviceConfiguration)

XRR_Unknown = _xsensdeviceapi_py35_64.XRR_Unknown
XRR_VersionMismatch = _xsensdeviceapi_py35_64.XRR_VersionMismatch
XRR_Blacklisted = _xsensdeviceapi_py35_64.XRR_Blacklisted
XRR_StationIsDisconnecting = _xsensdeviceapi_py35_64.XRR_StationIsDisconnecting
XRR_SystemIsOperational = _xsensdeviceapi_py35_64.XRR_SystemIsOperational

def XsRejectReason__toString(r: 'XsRejectReason') -> "char const *":
    return _xsensdeviceapi_py35_64.XsRejectReason__toString(r)
XsRejectReason__toString = _xsensdeviceapi_py35_64.XsRejectReason__toString
XAF_Sensor = _xsensdeviceapi_py35_64.XAF_Sensor
XAF_Local = _xsensdeviceapi_py35_64.XAF_Local
XOP_Unknown = _xsensdeviceapi_py35_64.XOP_Unknown
XOP_LiveStream = _xsensdeviceapi_py35_64.XOP_LiveStream
XOP_Obr = _xsensdeviceapi_py35_64.XOP_Obr
XOP_Robr = _xsensdeviceapi_py35_64.XOP_Robr
XACM_None = _xsensdeviceapi_py35_64.XACM_None
XACM_BlackList = _xsensdeviceapi_py35_64.XACM_BlackList
XACM_WhiteList = _xsensdeviceapi_py35_64.XACM_WhiteList
XGP_Portable = _xsensdeviceapi_py35_64.XGP_Portable
XGP_Stationary = _xsensdeviceapi_py35_64.XGP_Stationary
XGP_Pedestrian = _xsensdeviceapi_py35_64.XGP_Pedestrian
XGP_Automotive = _xsensdeviceapi_py35_64.XGP_Automotive
XGP_AtSea = _xsensdeviceapi_py35_64.XGP_AtSea
XGP_Airborne1g = _xsensdeviceapi_py35_64.XGP_Airborne1g
XGP_Airborne2g = _xsensdeviceapi_py35_64.XGP_Airborne2g
XGP_Airborne4g = _xsensdeviceapi_py35_64.XGP_Airborne4g
XGP_Wrist = _xsensdeviceapi_py35_64.XGP_Wrist
class XsDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsDevice, name)
    __repr__ = _swig_repr

    def addRef(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_addRef(self)

    def removeRef(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_removeRef(self)

    def refCounter(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsDevice_refCounter(self)

    def master(self) -> "XsDevice *":
        return _xsensdeviceapi_py35_64.XsDevice_master(self)

    def findDevice(self, deviceid: 'XsDeviceId') -> "XsDevice *":
        return _xsensdeviceapi_py35_64.XsDevice_findDevice(self, deviceid)

    def findDeviceConst(self, deviceid: 'XsDeviceId') -> "XsDevice const *":
        return _xsensdeviceapi_py35_64.XsDevice_findDeviceConst(self, deviceid)

    def busId(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_busId(self)

    def deviceId(self) -> "XsDeviceId":
        return _xsensdeviceapi_py35_64.XsDevice_deviceId(self)

    def firmwareVersion(self) -> "XsVersion":
        return _xsensdeviceapi_py35_64.XsDevice_firmwareVersion(self)

    def isMasterDevice(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isMasterDevice(self)

    def isContainerDevice(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isContainerDevice(self)

    def isInitialized(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isInitialized(self)

    def isStandaloneDevice(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isStandaloneDevice(self)

    def deviceAtBusIdConst(self, busid: 'int') -> "XsDevice const *":
        return _xsensdeviceapi_py35_64.XsDevice_deviceAtBusIdConst(self, busid)

    def deviceAtBusId(self, busid: 'int') -> "XsDevice *":
        return _xsensdeviceapi_py35_64.XsDevice_deviceAtBusId(self, busid)

    def setGotoConfigOnClose(self, gotoConfigOnClose: 'bool') -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_setGotoConfigOnClose(self, gotoConfigOnClose)

    def createLogFile(self, filename: 'XsString') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsDevice_createLogFile(self, filename)

    def closeLogFile(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_closeLogFile(self)

    def isMeasuring(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isMeasuring(self)

    def isRecording(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isRecording(self)

    def isReadingFromFile(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isReadingFromFile(self)

    def restartFilter(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_restartFilter(self)

    def lastResult(self) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsDevice_lastResult(self)

    def lastResultText(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsDevice_lastResultText(self)

    def recordingQueueLength(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_recordingQueueLength(self)

    def cacheSize(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_cacheSize(self)

    def deviceState(self) -> "XsDeviceState":
        return _xsensdeviceapi_py35_64.XsDevice_deviceState(self)
    if _newclass:
        supportsSyncSettings = staticmethod(_xsensdeviceapi_py35_64.XsDevice_supportsSyncSettings)
    else:
        supportsSyncSettings = _xsensdeviceapi_py35_64.XsDevice_supportsSyncSettings
    if _newclass:
        isCompatibleSyncSetting = staticmethod(_xsensdeviceapi_py35_64.XsDevice_isCompatibleSyncSetting)
    else:
        isCompatibleSyncSetting = _xsensdeviceapi_py35_64.XsDevice_isCompatibleSyncSetting
    if _newclass:
        syncSettingsTimeResolutionInMicroSeconds = staticmethod(_xsensdeviceapi_py35_64.XsDevice_syncSettingsTimeResolutionInMicroSeconds)
    else:
        syncSettingsTimeResolutionInMicroSeconds = _xsensdeviceapi_py35_64.XsDevice_syncSettingsTimeResolutionInMicroSeconds

    def clearCallbackHandlers(self, chain: 'bool'=True) -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_clearCallbackHandlers(self, chain)

    def deviceConfiguration(self) -> "XsDeviceConfiguration":
        return _xsensdeviceapi_py35_64.XsDevice_deviceConfiguration(self)

    def batteryLevel(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_batteryLevel(self)

    def updateRateForDataIdentifier(self, dataType: 'XsDataIdentifier') -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_updateRateForDataIdentifier(self, dataType)

    def updateRateForProcessedDataIdentifier(self, dataType: 'XsDataIdentifier') -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_updateRateForProcessedDataIdentifier(self, dataType)

    def supportedUpdateRates(self, dataType: 'XsDataIdentifier'=XDI_None) -> "XsIntArray":
        return _xsensdeviceapi_py35_64.XsDevice_supportedUpdateRates(self, dataType)

    def maximumUpdateRate(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_maximumUpdateRate(self)

    def hasDataEnabled(self, dataType: 'XsDataIdentifier') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_hasDataEnabled(self, dataType)

    def hasProcessedDataEnabled(self, dataType: 'XsDataIdentifier') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_hasProcessedDataEnabled(self, dataType)

    def productCode(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsDevice_productCode(self)

    def portName(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsDevice_portName(self)

    def portInfo(self) -> "XsPortInfo":
        return _xsensdeviceapi_py35_64.XsDevice_portInfo(self)

    def baudRate(self) -> "XsBaudRate":
        return _xsensdeviceapi_py35_64.XsDevice_baudRate(self)

    def serialBaudRate(self) -> "XsBaudRate":
        return _xsensdeviceapi_py35_64.XsDevice_serialBaudRate(self)

    def hardwareVersion(self) -> "XsVersion":
        return _xsensdeviceapi_py35_64.XsDevice_hardwareVersion(self)

    def startRecording(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_startRecording(self)

    def triggerStartRecording(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_triggerStartRecording(self)

    def stopRecording(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_stopRecording(self)

    def getStartRecordingPacketId(self) -> "int64_t":
        return _xsensdeviceapi_py35_64.XsDevice_getStartRecordingPacketId(self)

    def getStopRecordingPacketId(self) -> "int64_t":
        return _xsensdeviceapi_py35_64.XsDevice_getStopRecordingPacketId(self)

    def setOptions(self, enable: 'XsOption', disable: 'XsOption') -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_setOptions(self, enable, disable)

    def areOptionsEnabled(self, options: 'XsOption') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_areOptionsEnabled(self, options)

    def getOptions(self) -> "XsOption":
        return _xsensdeviceapi_py35_64.XsDevice_getOptions(self)

    def sendCustomMessage(self, messageSend: 'XsMessage', waitForResult: 'bool', messageReceive: 'XsMessage', timeout: 'int'=0) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_sendCustomMessage(self, messageSend, waitForResult, messageReceive, timeout)

    def sendRawMessage(self, message: 'XsMessage') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_sendRawMessage(self, message)

    def setSerialBaudRate(self, baudrate: 'XsBaudRate') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setSerialBaudRate(self, baudrate)

    def portConfiguration(self) -> "XsIntArray":
        return _xsensdeviceapi_py35_64.XsDevice_portConfiguration(self)

    def setPortConfiguration(self, config: 'XsIntArray') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setPortConfiguration(self, config)

    def isMotionTracker(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isMotionTracker(self)

    def operationalMode(self) -> "XsOperationalMode":
        return _xsensdeviceapi_py35_64.XsDevice_operationalMode(self)

    def setOperationalMode(self, mode: 'XsOperationalMode') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setOperationalMode(self, mode)

    def updateRate(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_updateRate(self)

    def setUpdateRate(self, rate: 'int') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setUpdateRate(self, rate)

    def deviceOptionFlags(self) -> "XsDeviceOptionFlag":
        return _xsensdeviceapi_py35_64.XsDevice_deviceOptionFlags(self)

    def setDeviceOptionFlags(self, setFlags: 'XsDeviceOptionFlag', clearFlags: 'XsDeviceOptionFlag') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setDeviceOptionFlags(self, setFlags, clearFlags)

    def outputConfiguration(self) -> "XsOutputConfigurationArray":
        return _xsensdeviceapi_py35_64.XsDevice_outputConfiguration(self)

    def processedOutputConfiguration(self) -> "XsOutputConfigurationArray":
        return _xsensdeviceapi_py35_64.XsDevice_processedOutputConfiguration(self)

    def setOutputConfiguration(self, config: 'XsOutputConfigurationArray') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setOutputConfiguration(self, config)

    def isInStringOutputMode(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isInStringOutputMode(self)

    def canOutputConfiguration(self) -> "XsCanOutputConfigurationArray":
        return _xsensdeviceapi_py35_64.XsDevice_canOutputConfiguration(self)

    def setCanOutputConfiguration(self, config: 'XsCanOutputConfigurationArray') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setCanOutputConfiguration(self, config)

    def canConfiguration(self) -> "uint32_t":
        return _xsensdeviceapi_py35_64.XsDevice_canConfiguration(self)

    def setCanConfiguration(self, config: 'uint32_t') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setCanConfiguration(self, config)

    def usesLegacyDeviceMode(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_usesLegacyDeviceMode(self)

    def stringOutputType(self) -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsDevice_stringOutputType(self)

    def stringSamplePeriod(self) -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsDevice_stringSamplePeriod(self)

    def stringSkipFactor(self) -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsDevice_stringSkipFactor(self)

    def setStringOutputMode(self, type: 'uint16_t', period: 'uint16_t', skipFactor: 'uint16_t') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setStringOutputMode(self, type, period, skipFactor)

    def supportedStringOutputTypes(self) -> "XsStringOutputTypeArray":
        return _xsensdeviceapi_py35_64.XsDevice_supportedStringOutputTypes(self)

    def dataLength(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_dataLength(self)

    def syncSettings(self) -> "XsSyncSettingArray":
        return _xsensdeviceapi_py35_64.XsDevice_syncSettings(self)

    def setSyncSettings(self, settingList: 'XsSyncSettingArray') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setSyncSettings(self, settingList)

    def isSyncMaster(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isSyncMaster(self)

    def isSyncSlave(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isSyncSlave(self)
    if _newclass:
        supportedSyncSettings = staticmethod(_xsensdeviceapi_py35_64.XsDevice_supportedSyncSettings)
    else:
        supportedSyncSettings = _xsensdeviceapi_py35_64.XsDevice_supportedSyncSettings

    def gotoMeasurement(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_gotoMeasurement(self)

    def gotoConfig(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_gotoConfig(self)

    def restoreFactoryDefaults(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_restoreFactoryDefaults(self)

    def reset(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_reset(self)

    def reopenPort(self, gotoConfig: 'bool', skipDeviceIdCheck: 'bool'=False) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_reopenPort(self, gotoConfig, skipDeviceIdCheck)

    def writeDeviceSettingsToFile(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_writeDeviceSettingsToFile(self)

    def flushInputBuffers(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_flushInputBuffers(self)

    def syncRole(self) -> "XsSyncRole":
        return _xsensdeviceapi_py35_64.XsDevice_syncRole(self)

    def loadLogFile(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_loadLogFile(self)

    def abortLoadLogFile(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_abortLoadLogFile(self)

    def logFileName(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsDevice_logFileName(self)

    def resetOrientation(self, resetmethod: 'XsResetMethod') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_resetOrientation(self, resetmethod)

    def resetLogFileReadPosition(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_resetLogFileReadPosition(self)

    def logFileSize(self) -> "XsFilePos":
        return _xsensdeviceapi_py35_64.XsDevice_logFileSize(self)

    def logFileReadPosition(self) -> "XsFilePos":
        return _xsensdeviceapi_py35_64.XsDevice_logFileReadPosition(self)

    def updateCachedDeviceInformation(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_updateCachedDeviceInformation(self)

    def enableProtocol(self, protocol: 'XsProtocolType') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_enableProtocol(self, protocol)

    def disableProtocol(self, protocol: 'XsProtocolType') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_disableProtocol(self, protocol)

    def isProtocolEnabled(self, protocol: 'XsProtocolType') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isProtocolEnabled(self, protocol)

    def deviceBufferSize(self) -> "uint32_t":
        return _xsensdeviceapi_py35_64.XsDevice_deviceBufferSize(self)

    def setDeviceBufferSize(self, frames: 'uint32_t') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setDeviceBufferSize(self, frames)

    def connectivityState(self) -> "XsConnectivityState":
        return _xsensdeviceapi_py35_64.XsDevice_connectivityState(self)

    def waitForAllDevicesInitialized(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_waitForAllDevicesInitialized(self)

    def children(self) -> "XsDevicePtrArray":
        return _xsensdeviceapi_py35_64.XsDevice_children(self)

    def childCount(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_childCount(self)

    def enableRadio(self, channel: 'int') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_enableRadio(self, channel)

    def disableRadio(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_disableRadio(self)

    def radioChannel(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_radioChannel(self)

    def isRadioEnabled(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isRadioEnabled(self)

    def makeOperational(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_makeOperational(self)

    def isOperational(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isOperational(self)

    def isInSyncStationMode(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isInSyncStationMode(self)

    def setSyncStationMode(self, enabled: 'bool') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setSyncStationMode(self, enabled)

    def stealthMode(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_stealthMode(self)

    def setStealthMode(self, enabled: 'bool') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setStealthMode(self, enabled)

    def discardRetransmissions(self, firstNewPacketId: 'int64_t') -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_discardRetransmissions(self, firstNewPacketId)

    def abortFlushing(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_abortFlushing(self)

    def setDeviceAccepted(self, deviceId: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setDeviceAccepted(self, deviceId)

    def setDeviceRejected(self, deviceId: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setDeviceRejected(self, deviceId)

    def setAccessControlMode(self, mode: 'XsAccessControlMode', initialList: 'XsDeviceIdArray') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setAccessControlMode(self, mode, initialList)

    def accessControlMode(self) -> "XsAccessControlMode":
        return _xsensdeviceapi_py35_64.XsDevice_accessControlMode(self)

    def currentAccessControlList(self) -> "XsDeviceIdArray":
        return _xsensdeviceapi_py35_64.XsDevice_currentAccessControlList(self)

    def setDeviceParameter(self, parameter: 'XsDeviceParameter') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsDevice_setDeviceParameter(self, parameter)

    def deviceParameter(self, parameter: 'XsDeviceParameter') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsDevice_deviceParameter(self, parameter)

    def gnssPlatform(self) -> "XsGnssPlatform":
        return _xsensdeviceapi_py35_64.XsDevice_gnssPlatform(self)

    def setGnssPlatform(self, gnssPlatform: 'XsGnssPlatform') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setGnssPlatform(self, gnssPlatform)

    def acceptConnection(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_acceptConnection(self)

    def rejectConnection(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_rejectConnection(self)

    def wirelessPriority(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_wirelessPriority(self)

    def setWirelessPriority(self, priority: 'int') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setWirelessPriority(self, priority)

    def rejectReason(self) -> "XsRejectReason":
        return _xsensdeviceapi_py35_64.XsDevice_rejectReason(self)

    def requestBatteryLevel(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_requestBatteryLevel(self)

    def batteryLevelTime(self) -> "XsTimeStamp":
        return _xsensdeviceapi_py35_64.XsDevice_batteryLevelTime(self)

    def setTransportMode(self, transportModeEnabled: 'bool') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setTransportMode(self, transportModeEnabled)

    def transportMode(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_transportMode(self)

    def lastKnownRssi(self) -> "int16_t":
        return _xsensdeviceapi_py35_64.XsDevice_lastKnownRssi(self)

    def packetErrorRate(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_packetErrorRate(self)

    def isBlueToothEnabled(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isBlueToothEnabled(self)

    def setBlueToothEnabled(self, enabled: 'bool') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setBlueToothEnabled(self, enabled)

    def isBusPowerEnabled(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isBusPowerEnabled(self)

    def setBusPowerEnabled(self, enabled: 'bool') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setBusPowerEnabled(self, enabled)

    def powerDown(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_powerDown(self)

    def errorMode(self) -> "XsErrorMode":
        return _xsensdeviceapi_py35_64.XsDevice_errorMode(self)

    def setErrorMode(self, errormode: 'XsErrorMode') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setErrorMode(self, errormode)

    def setHeadingOffset(self, offset: 'double') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setHeadingOffset(self, offset)

    def headingOffset(self) -> "double":
        return _xsensdeviceapi_py35_64.XsDevice_headingOffset(self)

    def setLocationId(self, id: 'int') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setLocationId(self, id)

    def locationId(self) -> "int":
        return _xsensdeviceapi_py35_64.XsDevice_locationId(self)

    def getDeviceFromLocationId(self, locId: 'uint16_t') -> "XsDevice *":
        return _xsensdeviceapi_py35_64.XsDevice_getDeviceFromLocationId(self, locId)

    def objectAlignment(self) -> "XsMatrix":
        return _xsensdeviceapi_py35_64.XsDevice_objectAlignment(self)

    def setObjectAlignment(self, matrix: 'XsMatrix') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setObjectAlignment(self, matrix)

    def gravityMagnitude(self) -> "double":
        return _xsensdeviceapi_py35_64.XsDevice_gravityMagnitude(self)

    def setGravityMagnitude(self, mag: 'double') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setGravityMagnitude(self, mag)

    def initialPositionLLA(self) -> "XsVector":
        return _xsensdeviceapi_py35_64.XsDevice_initialPositionLLA(self)

    def setInitialPositionLLA(self, lla: 'XsVector') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setInitialPositionLLA(self, lla)

    def utcTime(self) -> "XsTimeInfo":
        return _xsensdeviceapi_py35_64.XsDevice_utcTime(self)

    def setUtcTime(self, time: 'XsTimeInfo') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setUtcTime(self, time)

    def reinitialize(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_reinitialize(self)

    def xdaFilterProfile(self) -> "XsFilterProfile":
        return _xsensdeviceapi_py35_64.XsDevice_xdaFilterProfile(self)

    def setXdaFilterProfile(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setXdaFilterProfile(self, *args)

    def onboardFilterProfile(self) -> "XsFilterProfile":
        return _xsensdeviceapi_py35_64.XsDevice_onboardFilterProfile(self)

    def setOnboardFilterProfile(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setOnboardFilterProfile(self, *args)

    def replaceFilterProfile(self, profileCurrent: 'XsFilterProfile', profileNew: 'XsFilterProfile') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_replaceFilterProfile(self, profileCurrent, profileNew)

    def availableOnboardFilterProfiles(self) -> "XsFilterProfileArray":
        return _xsensdeviceapi_py35_64.XsDevice_availableOnboardFilterProfiles(self)

    def availableXdaFilterProfiles(self) -> "XsFilterProfileArray":
        return _xsensdeviceapi_py35_64.XsDevice_availableXdaFilterProfiles(self)

    def accelerometerRange(self) -> "double":
        return _xsensdeviceapi_py35_64.XsDevice_accelerometerRange(self)

    def gyroscopeRange(self) -> "double":
        return _xsensdeviceapi_py35_64.XsDevice_gyroscopeRange(self)

    def setNoRotation(self, duration: 'uint16_t') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setNoRotation(self, duration)

    def startRepresentativeMotion(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_startRepresentativeMotion(self)

    def representativeMotionState(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_representativeMotionState(self)

    def stopRepresentativeMotion(self) -> "XsIccRepMotionResult":
        return _xsensdeviceapi_py35_64.XsDevice_stopRepresentativeMotion(self)

    def storeIccResults(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_storeIccResults(self)

    def rs485TransmissionDelay(self) -> "uint16_t":
        return _xsensdeviceapi_py35_64.XsDevice_rs485TransmissionDelay(self)

    def setRs485TransmissionDelay(self, delay: 'uint16_t') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setRs485TransmissionDelay(self, delay)

    def runSelfTest(self) -> "XsSelfTestResult":
        return _xsensdeviceapi_py35_64.XsDevice_runSelfTest(self)

    def requestData(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_requestData(self)

    def storeFilterState(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_storeFilterState(self)

    def getDataPacketByIndex(self, index: 'XsSize') -> "XsDataPacket":
        return _xsensdeviceapi_py35_64.XsDevice_getDataPacketByIndex(self, index)

    def getDataPacketCount(self) -> "XsSize":
        return _xsensdeviceapi_py35_64.XsDevice_getDataPacketCount(self)

    def lastAvailableLiveData(self) -> "XsDataPacket":
        return _xsensdeviceapi_py35_64.XsDevice_lastAvailableLiveData(self)

    def takeFirstDataPacketInQueue(self) -> "XsDataPacket":
        return _xsensdeviceapi_py35_64.XsDevice_takeFirstDataPacketInQueue(self)

    def isInitialBiasUpdateEnabled(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isInitialBiasUpdateEnabled(self)

    def setInitialBiasUpdateEnabled(self, enable: 'bool') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setInitialBiasUpdateEnabled(self, enable)

    def isFixedGravityEnabled(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isFixedGravityEnabled(self)

    def setFixedGravityEnabled(self, enable: 'bool') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setFixedGravityEnabled(self, enable)

    def createConfigFile(self, filename: 'XsString') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsDevice_createConfigFile(self, filename)

    def applyConfigFile(self, filename: 'XsString') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsDevice_applyConfigFile(self, filename)

    def setAlignmentRotationMatrix(self, frame: 'XsAlignmentFrame', matrix: 'XsMatrix') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setAlignmentRotationMatrix(self, frame, matrix)

    def alignmentRotationMatrix(self, frame: 'XsAlignmentFrame') -> "XsMatrix":
        return _xsensdeviceapi_py35_64.XsDevice_alignmentRotationMatrix(self, frame)

    def setAlignmentRotationQuaternion(self, frame: 'XsAlignmentFrame', quat: 'XsQuaternion') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_setAlignmentRotationQuaternion(self, frame, quat)

    def alignmentRotationQuaternion(self, frame: 'XsAlignmentFrame') -> "XsQuaternion":
        return _xsensdeviceapi_py35_64.XsDevice_alignmentRotationQuaternion(self, frame)

    def deviceIsDocked(self, dev: 'XsDevice *') -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_deviceIsDocked(self, dev)

    def isLoadLogFileInProgress(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDevice_isLoadLogFileInProgress(self)

    def waitForLoadLogFileDone(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_waitForLoadLogFileDone(self)

    def supportedStatusFlags(self) -> "uint32_t":
        return _xsensdeviceapi_py35_64.XsDevice_supportedStatusFlags(self)

    def __init__(self, p: 'XsDevice *'):
        this = _xsensdeviceapi_py35_64.new_XsDevice(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addCallbackHandler(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_addCallbackHandler(self, *args)

    def removeCallbackHandler(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsDevice_removeCallbackHandler(self, *args)
XsDevice_swigregister = _xsensdeviceapi_py35_64.XsDevice_swigregister
XsDevice_swigregister(XsDevice)

def XsDevice_supportsSyncSettings(deviceId: 'XsDeviceId') -> "bool":
    return _xsensdeviceapi_py35_64.XsDevice_supportsSyncSettings(deviceId)
XsDevice_supportsSyncSettings = _xsensdeviceapi_py35_64.XsDevice_supportsSyncSettings

def XsDevice_isCompatibleSyncSetting(deviceId: 'XsDeviceId', setting1: 'XsSyncSetting', setting2: 'XsSyncSetting') -> "bool":
    return _xsensdeviceapi_py35_64.XsDevice_isCompatibleSyncSetting(deviceId, setting1, setting2)
XsDevice_isCompatibleSyncSetting = _xsensdeviceapi_py35_64.XsDevice_isCompatibleSyncSetting

def XsDevice_syncSettingsTimeResolutionInMicroSeconds(deviceId: 'XsDeviceId') -> "unsigned int":
    return _xsensdeviceapi_py35_64.XsDevice_syncSettingsTimeResolutionInMicroSeconds(deviceId)
XsDevice_syncSettingsTimeResolutionInMicroSeconds = _xsensdeviceapi_py35_64.XsDevice_syncSettingsTimeResolutionInMicroSeconds

def XsDevice_supportedSyncSettings(*args) -> "XsSyncSettingArray":
    return _xsensdeviceapi_py35_64.XsDevice_supportedSyncSettings(*args)
XsDevice_supportedSyncSettings = _xsensdeviceapi_py35_64.XsDevice_supportedSyncSettings

class XsDeviceRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsDeviceRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsDeviceRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsDeviceRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsDeviceRef
    __del__ = lambda self: None

    def __deref__(self) -> "XsDevice *":
        return _xsensdeviceapi_py35_64.XsDeviceRef___deref__(self)

    def __eq__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceRef___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceRef___ne__(self, *args)

    def ptr(self) -> "XsDevice *":
        return _xsensdeviceapi_py35_64.XsDeviceRef_ptr(self)

    def __not__(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsDeviceRef___not__(self)

    def addRef(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDeviceRef_addRef(self)

    def removeRef(self) -> "void":
        return _xsensdeviceapi_py35_64.XsDeviceRef_removeRef(self)
XsDeviceRef_swigregister = _xsensdeviceapi_py35_64.XsDeviceRef_swigregister
XsDeviceRef_swigregister(XsDeviceRef)

XCDM_None = _xsensdeviceapi_py35_64.XCDM_None
XCDM_Acceleration = _xsensdeviceapi_py35_64.XCDM_Acceleration
XCDM_GyroscopeData = _xsensdeviceapi_py35_64.XCDM_GyroscopeData
XCDM_MagneticField = _xsensdeviceapi_py35_64.XCDM_MagneticField
XCDM_AccGyr = _xsensdeviceapi_py35_64.XCDM_AccGyr
XCDM_AccMag = _xsensdeviceapi_py35_64.XCDM_AccMag
XCDM_GyrMag = _xsensdeviceapi_py35_64.XCDM_GyrMag
XCDM_All = _xsensdeviceapi_py35_64.XCDM_All
class XsCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsCallback, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == XsCallback:
            _self = None
        else:
            _self = self
        this = _xsensdeviceapi_py35_64.new_XsCallback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsCallback
    __del__ = lambda self: None

    def onDeviceStateChanged(self, dev: 'XsDevice *', newState: 'XsDeviceState', oldState: 'XsDeviceState') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onDeviceStateChanged(self, dev, newState, oldState)

    def onLiveDataAvailable(self, dev: 'XsDevice *', packet: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onLiveDataAvailable(self, dev, packet)

    def onMissedPackets(self, dev: 'XsDevice *', count: 'int', first: 'int', last: 'int') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onMissedPackets(self, dev, count, first, last)

    def onWakeupReceived(self, dev: 'XsDevice *') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onWakeupReceived(self, dev)

    def onProgressUpdated(self, dev: 'XsDevice *', current: 'int', total: 'int', identifier: 'XsString') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onProgressUpdated(self, dev, current, total, identifier)

    def onWriteMessageToLogFile(self, dev: 'XsDevice *', message: 'XsMessage') -> "int":
        return _xsensdeviceapi_py35_64.XsCallback_onWriteMessageToLogFile(self, dev, message)

    def onBufferedDataAvailable(self, dev: 'XsDevice *', packet: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onBufferedDataAvailable(self, dev, packet)

    def onConnectivityChanged(self, dev: 'XsDevice *', newState: 'XsConnectivityState') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onConnectivityChanged(self, dev, newState)

    def onInfoResponse(self, dev: 'XsDevice *', request: 'XsInfoRequest') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onInfoResponse(self, dev, request)

    def onError(self, dev: 'XsDevice *', error: 'XsResultValue') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onError(self, dev, error)

    def onNonDataMessage(self, dev: 'XsDevice *', message: 'XsMessage') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onNonDataMessage(self, dev, message)

    def onMessageDetected(self, dev: 'XsDevice *', type: 'XsProtocolType', rawMessage: 'XsByteArray') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onMessageDetected(self, dev, type, rawMessage)

    def onMessageReceivedFromDevice(self, dev: 'XsDevice *', message: 'XsMessage') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onMessageReceivedFromDevice(self, dev, message)

    def onMessageSentToDevice(self, dev: 'XsDevice *', message: 'XsMessage') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onMessageSentToDevice(self, dev, message)

    def onAllLiveDataAvailable(self, devs: 'XsDevicePtrArray', packets: 'XsDataPacketPtrArray') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onAllLiveDataAvailable(self, devs, packets)

    def onAllBufferedDataAvailable(self, devs: 'XsDevicePtrArray', packets: 'XsDataPacketPtrArray') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onAllBufferedDataAvailable(self, devs, packets)

    def onDataUnavailable(self, dev: 'XsDevice *', packetId: 'int64_t') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onDataUnavailable(self, dev, packetId)

    def onDataAvailable(self, dev: 'XsDevice *', packet: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onDataAvailable(self, dev, packet)

    def onAllDataAvailable(self, devs: 'XsDevicePtrArray', packets: 'XsDataPacketPtrArray') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onAllDataAvailable(self, devs, packets)

    def onRecordedDataAvailable(self, dev: 'XsDevice *', packet: 'XsDataPacket') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onRecordedDataAvailable(self, dev, packet)

    def onAllRecordedDataAvailable(self, devs: 'XsDevicePtrArray', packets: 'XsDataPacketPtrArray') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onAllRecordedDataAvailable(self, devs, packets)

    def onTransmissionRequest(self, channelId: 'int', data: 'XsByteArray') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onTransmissionRequest(self, channelId, data)

    def onRestoreCommunication(self, portName: 'XsString', result: 'XsResultValue') -> "void":
        return _xsensdeviceapi_py35_64.XsCallback_onRestoreCommunication(self, portName, result)
    def __disown__(self):
        self.this.disown()
        _xsensdeviceapi_py35_64.disown_XsCallback(self)
        return weakref_proxy(self)
XsCallback_swigregister = _xsensdeviceapi_py35_64.XsCallback_swigregister
XsCallback_swigregister(XsCallback)

CS_NorthWestUp = _xsensdeviceapi_py35_64.CS_NorthWestUp
CS_NorthEastDown = _xsensdeviceapi_py35_64.CS_NorthEastDown
XS_IND_PREAMBLE = _xsensdeviceapi_py35_64.XS_IND_PREAMBLE
XS_IND_BID = _xsensdeviceapi_py35_64.XS_IND_BID
XS_IND_MID = _xsensdeviceapi_py35_64.XS_IND_MID
XS_IND_LEN = _xsensdeviceapi_py35_64.XS_IND_LEN
XS_IND_DATA0 = _xsensdeviceapi_py35_64.XS_IND_DATA0
XS_IND_LENEXTH = _xsensdeviceapi_py35_64.XS_IND_LENEXTH
XS_IND_LENEXTL = _xsensdeviceapi_py35_64.XS_IND_LENEXTL
XS_IND_DATAEXT0 = _xsensdeviceapi_py35_64.XS_IND_DATAEXT0
XS_SELFTEST_OK = _xsensdeviceapi_py35_64.XS_SELFTEST_OK
XS_LEN_TRANSPORTMODE = _xsensdeviceapi_py35_64.XS_LEN_TRANSPORTMODE
XS_LEN_DEVICEID = _xsensdeviceapi_py35_64.XS_LEN_DEVICEID
XS_LEN_INITBUSRESULTS = _xsensdeviceapi_py35_64.XS_LEN_INITBUSRESULTS
XS_LEN_PERIOD = _xsensdeviceapi_py35_64.XS_LEN_PERIOD
XS_LEN_BUSPWR = _xsensdeviceapi_py35_64.XS_LEN_BUSPWR
XS_LEN_DATALENGTH = _xsensdeviceapi_py35_64.XS_LEN_DATALENGTH
XS_LEN_CONFIGURATION = _xsensdeviceapi_py35_64.XS_LEN_CONFIGURATION
XS_LEN_FIRMWAREREV = _xsensdeviceapi_py35_64.XS_LEN_FIRMWAREREV
XS_LEN_BTDISABLE = _xsensdeviceapi_py35_64.XS_LEN_BTDISABLE
XS_LEN_OPMODE = _xsensdeviceapi_py35_64.XS_LEN_OPMODE
XS_LEN_BAUDRATE = _xsensdeviceapi_py35_64.XS_LEN_BAUDRATE
XS_LEN_SYNCMODE = _xsensdeviceapi_py35_64.XS_LEN_SYNCMODE
XS_LEN_PRODUCTCODE = _xsensdeviceapi_py35_64.XS_LEN_PRODUCTCODE
XS_LEN_PROCESSINGFLAGS = _xsensdeviceapi_py35_64.XS_LEN_PROCESSINGFLAGS
XS_LEN_XMPWROFF = _xsensdeviceapi_py35_64.XS_LEN_XMPWROFF
XS_LEN_OUTPUTMODE = _xsensdeviceapi_py35_64.XS_LEN_OUTPUTMODE
XS_LEN_OUTPUTSETTINGS = _xsensdeviceapi_py35_64.XS_LEN_OUTPUTSETTINGS
XS_LEN_OUTPUTSKIPFACTOR = _xsensdeviceapi_py35_64.XS_LEN_OUTPUTSKIPFACTOR
XS_LEN_SYNCINMODE = _xsensdeviceapi_py35_64.XS_LEN_SYNCINMODE
XS_LEN_SYNCINSKIPFACTOR = _xsensdeviceapi_py35_64.XS_LEN_SYNCINSKIPFACTOR
XS_LEN_SYNCINOFFSET = _xsensdeviceapi_py35_64.XS_LEN_SYNCINOFFSET
XS_LEN_SYNCOUTMODE = _xsensdeviceapi_py35_64.XS_LEN_SYNCOUTMODE
XS_LEN_SYNCOUTSKIPFACTOR = _xsensdeviceapi_py35_64.XS_LEN_SYNCOUTSKIPFACTOR
XS_LEN_SYNCOUTOFFSET = _xsensdeviceapi_py35_64.XS_LEN_SYNCOUTOFFSET
XS_LEN_SYNCOUTPULSEWIDTH = _xsensdeviceapi_py35_64.XS_LEN_SYNCOUTPULSEWIDTH
XS_LEN_ERRORMODE = _xsensdeviceapi_py35_64.XS_LEN_ERRORMODE
XS_LEN_TRANSMITDELAY = _xsensdeviceapi_py35_64.XS_LEN_TRANSMITDELAY
XS_LEN_OBJECTALIGNMENT = _xsensdeviceapi_py35_64.XS_LEN_OBJECTALIGNMENT
XS_LEN_ALIGNMENTROTATION = _xsensdeviceapi_py35_64.XS_LEN_ALIGNMENTROTATION
XS_LEN_XMERRORMODE = _xsensdeviceapi_py35_64.XS_LEN_XMERRORMODE
XS_LEN_BUFFERSIZE = _xsensdeviceapi_py35_64.XS_LEN_BUFFERSIZE
XS_LEN_HEADING = _xsensdeviceapi_py35_64.XS_LEN_HEADING
XS_LEN_MAGNETICFIELD = _xsensdeviceapi_py35_64.XS_LEN_MAGNETICFIELD
XS_LEN_LOCATIONID = _xsensdeviceapi_py35_64.XS_LEN_LOCATIONID
XS_LEN_EXTOUTPUTMODE = _xsensdeviceapi_py35_64.XS_LEN_EXTOUTPUTMODE
XS_LEN_INITTRACKMODE = _xsensdeviceapi_py35_64.XS_LEN_INITTRACKMODE
XS_LEN_STOREFILTERSTATE = _xsensdeviceapi_py35_64.XS_LEN_STOREFILTERSTATE
XS_LEN_UTCTIME = _xsensdeviceapi_py35_64.XS_LEN_UTCTIME
XS_LEN_FILTERPROFILELABEL = _xsensdeviceapi_py35_64.XS_LEN_FILTERPROFILELABEL
XS_LEN_FILTERPROFILEFULL = _xsensdeviceapi_py35_64.XS_LEN_FILTERPROFILEFULL
XS_LEN_AVAILABLEFILTERPROFILES = _xsensdeviceapi_py35_64.XS_LEN_AVAILABLEFILTERPROFILES
XS_LEN_REQFILTERPROFILEACK = _xsensdeviceapi_py35_64.XS_LEN_REQFILTERPROFILEACK
XS_LEN_SETFILTERPROFILE = _xsensdeviceapi_py35_64.XS_LEN_SETFILTERPROFILE
XS_LEN_GRAVITYMAGNITUDE = _xsensdeviceapi_py35_64.XS_LEN_GRAVITYMAGNITUDE
XS_LEN_GPSLEVERARM = _xsensdeviceapi_py35_64.XS_LEN_GPSLEVERARM
XS_LEN_LATLONALT = _xsensdeviceapi_py35_64.XS_LEN_LATLONALT
XS_LEN_SETNOROTATION = _xsensdeviceapi_py35_64.XS_LEN_SETNOROTATION
XS_LEN_FILTERSETTINGS = _xsensdeviceapi_py35_64.XS_LEN_FILTERSETTINGS
XS_LEN_AMD = _xsensdeviceapi_py35_64.XS_LEN_AMD
XS_LEN_RESETORIENTATION = _xsensdeviceapi_py35_64.XS_LEN_RESETORIENTATION
XS_LEN_GPSSTATUS = _xsensdeviceapi_py35_64.XS_LEN_GPSSTATUS
XS_LEN_CLIENTUSAGE = _xsensdeviceapi_py35_64.XS_LEN_CLIENTUSAGE
XS_LEN_CLIENTPRIORITY = _xsensdeviceapi_py35_64.XS_LEN_CLIENTPRIORITY
XS_LEN_WIRELESSCONFIG = _xsensdeviceapi_py35_64.XS_LEN_WIRELESSCONFIG
XS_LEN_INFOREQUEST = _xsensdeviceapi_py35_64.XS_LEN_INFOREQUEST
XS_LEN_SETOUTPUTTRIGGER = _xsensdeviceapi_py35_64.XS_LEN_SETOUTPUTTRIGGER
XS_LEN_SETINPUTTRIGGER = _xsensdeviceapi_py35_64.XS_LEN_SETINPUTTRIGGER
XS_LEN_RAWDATA = _xsensdeviceapi_py35_64.XS_LEN_RAWDATA
XS_LEN_CALIBDATA = _xsensdeviceapi_py35_64.XS_LEN_CALIBDATA
XS_LEN_CALIB_ACCDATA = _xsensdeviceapi_py35_64.XS_LEN_CALIB_ACCDATA
XS_LEN_CALIB_GYRDATA = _xsensdeviceapi_py35_64.XS_LEN_CALIB_GYRDATA
XS_LEN_CALIB_MAGDATA = _xsensdeviceapi_py35_64.XS_LEN_CALIB_MAGDATA
XS_LEN_ORIENT_QUATDATA = _xsensdeviceapi_py35_64.XS_LEN_ORIENT_QUATDATA
XS_LEN_ORIENT_EULERDATA = _xsensdeviceapi_py35_64.XS_LEN_ORIENT_EULERDATA
XS_LEN_ORIENT_MATRIXSTA = _xsensdeviceapi_py35_64.XS_LEN_ORIENT_MATRIXSTA
XS_LEN_SAMPLECNT = _xsensdeviceapi_py35_64.XS_LEN_SAMPLECNT
XS_LEN_TEMPDATA = _xsensdeviceapi_py35_64.XS_LEN_TEMPDATA
XS_LEN_CALIBDATA_FLT = _xsensdeviceapi_py35_64.XS_LEN_CALIBDATA_FLT
XS_LEN_TEMPDATA_FLT = _xsensdeviceapi_py35_64.XS_LEN_TEMPDATA_FLT
XS_LEN_ORIENT_QUATDATA_FLT = _xsensdeviceapi_py35_64.XS_LEN_ORIENT_QUATDATA_FLT
XS_LEN_ORIENT_EULERDATA_FLT = _xsensdeviceapi_py35_64.XS_LEN_ORIENT_EULERDATA_FLT
XS_LEN_ORIENT_MATRIXSTA_FLT = _xsensdeviceapi_py35_64.XS_LEN_ORIENT_MATRIXSTA_FLT
XS_INVALIDSETTINGVALUE = _xsensdeviceapi_py35_64.XS_INVALIDSETTINGVALUE
XS_CONF_MASTERDID = _xsensdeviceapi_py35_64.XS_CONF_MASTERDID
XS_CONF_PERIOD = _xsensdeviceapi_py35_64.XS_CONF_PERIOD
XS_CONF_OUTPUTSKIPFACTOR = _xsensdeviceapi_py35_64.XS_CONF_OUTPUTSKIPFACTOR
XS_CONF_SYNCIN_MODE = _xsensdeviceapi_py35_64.XS_CONF_SYNCIN_MODE
XS_CONF_SYNCIN_SKIPFACTOR = _xsensdeviceapi_py35_64.XS_CONF_SYNCIN_SKIPFACTOR
XS_CONF_SYNCIN_OFFSET = _xsensdeviceapi_py35_64.XS_CONF_SYNCIN_OFFSET
XS_CONF_DATE = _xsensdeviceapi_py35_64.XS_CONF_DATE
XS_CONF_TIME = _xsensdeviceapi_py35_64.XS_CONF_TIME
XS_CONF_NUMDEVICES = _xsensdeviceapi_py35_64.XS_CONF_NUMDEVICES
XS_CONF_DID = _xsensdeviceapi_py35_64.XS_CONF_DID
XS_CONF_DATALENGTH = _xsensdeviceapi_py35_64.XS_CONF_DATALENGTH
XS_CONF_OUTPUTMODE = _xsensdeviceapi_py35_64.XS_CONF_OUTPUTMODE
XS_CONF_OUTPUTSETTINGS = _xsensdeviceapi_py35_64.XS_CONF_OUTPUTSETTINGS
XS_CONF_BLOCKLEN = _xsensdeviceapi_py35_64.XS_CONF_BLOCKLEN
XS_CONF_MASTERDIDLEN = _xsensdeviceapi_py35_64.XS_CONF_MASTERDIDLEN
XS_CONF_PERIODLEN = _xsensdeviceapi_py35_64.XS_CONF_PERIODLEN
XS_CONF_OUTPUTSKIPFACTORLEN = _xsensdeviceapi_py35_64.XS_CONF_OUTPUTSKIPFACTORLEN
XS_CONF_SYNCIN_MODELEN = _xsensdeviceapi_py35_64.XS_CONF_SYNCIN_MODELEN
XS_CONF_SYNCIN_SKIPFACTORLEN = _xsensdeviceapi_py35_64.XS_CONF_SYNCIN_SKIPFACTORLEN
XS_CONF_SYNCIN_OFFSETLEN = _xsensdeviceapi_py35_64.XS_CONF_SYNCIN_OFFSETLEN
XS_CONF_DATELEN = _xsensdeviceapi_py35_64.XS_CONF_DATELEN
XS_CONF_TIMELEN = _xsensdeviceapi_py35_64.XS_CONF_TIMELEN
XS_CONF_RESERVED_CLIENTLEN = _xsensdeviceapi_py35_64.XS_CONF_RESERVED_CLIENTLEN
XS_CONF_RESERVED_HOSTLEN = _xsensdeviceapi_py35_64.XS_CONF_RESERVED_HOSTLEN
XS_CONF_NUMDEVICESLEN = _xsensdeviceapi_py35_64.XS_CONF_NUMDEVICESLEN
XS_CONF_DIDLEN = _xsensdeviceapi_py35_64.XS_CONF_DIDLEN
XS_CONF_DATALENGTHLEN = _xsensdeviceapi_py35_64.XS_CONF_DATALENGTHLEN
XS_CONF_OUTPUTMODELEN = _xsensdeviceapi_py35_64.XS_CONF_OUTPUTMODELEN
XS_CONF_OUTPUTSETTINGSLEN = _xsensdeviceapi_py35_64.XS_CONF_OUTPUTSETTINGSLEN
XS_SYNC_CLOCKFREQMHZ = _xsensdeviceapi_py35_64.XS_SYNC_CLOCKFREQMHZ
XS_SYNC_CLOCK_NS_TO_TICKS = _xsensdeviceapi_py35_64.XS_SYNC_CLOCK_NS_TO_TICKS
XS_SYNC_CLOCK_TICKS_TO_NS = _xsensdeviceapi_py35_64.XS_SYNC_CLOCK_TICKS_TO_NS
XS_SYNC_CLOCK_US_TO_TICKS = _xsensdeviceapi_py35_64.XS_SYNC_CLOCK_US_TO_TICKS
XS_SYNC_CLOCK_TICKS_TO_US = _xsensdeviceapi_py35_64.XS_SYNC_CLOCK_TICKS_TO_US
XS_PARAM_SYNCIN_MODE = _xsensdeviceapi_py35_64.XS_PARAM_SYNCIN_MODE
XS_PARAM_SYNCIN_SKIPFACTOR = _xsensdeviceapi_py35_64.XS_PARAM_SYNCIN_SKIPFACTOR
XS_PARAM_SYNCIN_OFFSET = _xsensdeviceapi_py35_64.XS_PARAM_SYNCIN_OFFSET
XS_SYNCIN_DISABLED = _xsensdeviceapi_py35_64.XS_SYNCIN_DISABLED
XS_SYNCIN_EDGE_RISING = _xsensdeviceapi_py35_64.XS_SYNCIN_EDGE_RISING
XS_SYNCIN_EDGE_FALLING = _xsensdeviceapi_py35_64.XS_SYNCIN_EDGE_FALLING
XS_SYNCIN_EDGE_BOTH = _xsensdeviceapi_py35_64.XS_SYNCIN_EDGE_BOTH
XS_SYNCIN_EDGE_MASK = _xsensdeviceapi_py35_64.XS_SYNCIN_EDGE_MASK
XS_SYNCIN_TYPE_DOSAMPLING = _xsensdeviceapi_py35_64.XS_SYNCIN_TYPE_DOSAMPLING
XS_SYNCIN_TYPE_SENDLASTDATA = _xsensdeviceapi_py35_64.XS_SYNCIN_TYPE_SENDLASTDATA
XS_SYNCIN_TYPE_CLOCK = _xsensdeviceapi_py35_64.XS_SYNCIN_TYPE_CLOCK
XS_SYNCIN_TYPE_MASK = _xsensdeviceapi_py35_64.XS_SYNCIN_TYPE_MASK
XS_PARAM_SYNCOUT_MODE = _xsensdeviceapi_py35_64.XS_PARAM_SYNCOUT_MODE
XS_PARAM_SYNCOUT_SKIPFACTOR = _xsensdeviceapi_py35_64.XS_PARAM_SYNCOUT_SKIPFACTOR
XS_PARAM_SYNCOUT_OFFSET = _xsensdeviceapi_py35_64.XS_PARAM_SYNCOUT_OFFSET
XS_PARAM_SYNCOUT_PULSEWIDTH = _xsensdeviceapi_py35_64.XS_PARAM_SYNCOUT_PULSEWIDTH
XS_SYNCOUT_DISABLED = _xsensdeviceapi_py35_64.XS_SYNCOUT_DISABLED
XS_SYNCOUT_TYPE_TOGGLE = _xsensdeviceapi_py35_64.XS_SYNCOUT_TYPE_TOGGLE
XS_SYNCOUT_TYPE_PULSE = _xsensdeviceapi_py35_64.XS_SYNCOUT_TYPE_PULSE
XS_SYNCOUT_POL_NEG = _xsensdeviceapi_py35_64.XS_SYNCOUT_POL_NEG
XS_SYNCOUT_POL_POS = _xsensdeviceapi_py35_64.XS_SYNCOUT_POL_POS
XS_SYNCOUT_TYPE_MASK = _xsensdeviceapi_py35_64.XS_SYNCOUT_TYPE_MASK
XS_SYNCOUT_POL_MASK = _xsensdeviceapi_py35_64.XS_SYNCOUT_POL_MASK
XS_INITTRACKMODE_DISABLED = _xsensdeviceapi_py35_64.XS_INITTRACKMODE_DISABLED
XS_INITTRACKMODE_ENABLED = _xsensdeviceapi_py35_64.XS_INITTRACKMODE_ENABLED
XS_PARAM_FILTER_GAIN = _xsensdeviceapi_py35_64.XS_PARAM_FILTER_GAIN
XS_PARAM_FILTER_RHO = _xsensdeviceapi_py35_64.XS_PARAM_FILTER_RHO
XS_DONOTSTORE = _xsensdeviceapi_py35_64.XS_DONOTSTORE
XS_STORE = _xsensdeviceapi_py35_64.XS_STORE
XS_AMDSETTING_DISABLED = _xsensdeviceapi_py35_64.XS_AMDSETTING_DISABLED
XS_AMDSETTING_ENABLED = _xsensdeviceapi_py35_64.XS_AMDSETTING_ENABLED
XS_PARAM_ROTSENSOR = _xsensdeviceapi_py35_64.XS_PARAM_ROTSENSOR
XS_PARAM_ROTLOCAL = _xsensdeviceapi_py35_64.XS_PARAM_ROTLOCAL
XS_SENDRAWSTRING_INIT = _xsensdeviceapi_py35_64.XS_SENDRAWSTRING_INIT
XS_SENDRAWSTRING_DEFAULT = _xsensdeviceapi_py35_64.XS_SENDRAWSTRING_DEFAULT
XS_SENDRAWSTRING_SEND = _xsensdeviceapi_py35_64.XS_SENDRAWSTRING_SEND
XS_TO_DEFAULT = _xsensdeviceapi_py35_64.XS_TO_DEFAULT
XS_TO_INIT = _xsensdeviceapi_py35_64.XS_TO_INIT
XS_TO_RETRY = _xsensdeviceapi_py35_64.XS_TO_RETRY
XS_PERIOD_10HZ = _xsensdeviceapi_py35_64.XS_PERIOD_10HZ
XS_PERIOD_12HZ = _xsensdeviceapi_py35_64.XS_PERIOD_12HZ
XS_PERIOD_15HZ = _xsensdeviceapi_py35_64.XS_PERIOD_15HZ
XS_PERIOD_16HZ = _xsensdeviceapi_py35_64.XS_PERIOD_16HZ
XS_PERIOD_18HZ = _xsensdeviceapi_py35_64.XS_PERIOD_18HZ
XS_PERIOD_20HZ = _xsensdeviceapi_py35_64.XS_PERIOD_20HZ
XS_PERIOD_24HZ = _xsensdeviceapi_py35_64.XS_PERIOD_24HZ
XS_PERIOD_25HZ = _xsensdeviceapi_py35_64.XS_PERIOD_25HZ
XS_PERIOD_30HZ = _xsensdeviceapi_py35_64.XS_PERIOD_30HZ
XS_PERIOD_32HZ = _xsensdeviceapi_py35_64.XS_PERIOD_32HZ
XS_PERIOD_36HZ = _xsensdeviceapi_py35_64.XS_PERIOD_36HZ
XS_PERIOD_40HZ = _xsensdeviceapi_py35_64.XS_PERIOD_40HZ
XS_PERIOD_45HZ = _xsensdeviceapi_py35_64.XS_PERIOD_45HZ
XS_PERIOD_48HZ = _xsensdeviceapi_py35_64.XS_PERIOD_48HZ
XS_PERIOD_50HZ = _xsensdeviceapi_py35_64.XS_PERIOD_50HZ
XS_PERIOD_60HZ = _xsensdeviceapi_py35_64.XS_PERIOD_60HZ
XS_PERIOD_64HZ = _xsensdeviceapi_py35_64.XS_PERIOD_64HZ
XS_PERIOD_72HZ = _xsensdeviceapi_py35_64.XS_PERIOD_72HZ
XS_PERIOD_75HZ = _xsensdeviceapi_py35_64.XS_PERIOD_75HZ
XS_PERIOD_80HZ = _xsensdeviceapi_py35_64.XS_PERIOD_80HZ
XS_PERIOD_90HZ = _xsensdeviceapi_py35_64.XS_PERIOD_90HZ
XS_PERIOD_96HZ = _xsensdeviceapi_py35_64.XS_PERIOD_96HZ
XS_PERIOD_100HZ = _xsensdeviceapi_py35_64.XS_PERIOD_100HZ
XS_PERIOD_120HZ = _xsensdeviceapi_py35_64.XS_PERIOD_120HZ
XS_PERIOD_128HZ = _xsensdeviceapi_py35_64.XS_PERIOD_128HZ
XS_PERIOD_144HZ = _xsensdeviceapi_py35_64.XS_PERIOD_144HZ
XS_PERIOD_150HZ = _xsensdeviceapi_py35_64.XS_PERIOD_150HZ
XS_PERIOD_160HZ = _xsensdeviceapi_py35_64.XS_PERIOD_160HZ
XS_PERIOD_180HZ = _xsensdeviceapi_py35_64.XS_PERIOD_180HZ
XS_PERIOD_192HZ = _xsensdeviceapi_py35_64.XS_PERIOD_192HZ
XS_PERIOD_200HZ = _xsensdeviceapi_py35_64.XS_PERIOD_200HZ
XS_PERIOD_225HZ = _xsensdeviceapi_py35_64.XS_PERIOD_225HZ
XS_PERIOD_240HZ = _xsensdeviceapi_py35_64.XS_PERIOD_240HZ
XS_PERIOD_256HZ = _xsensdeviceapi_py35_64.XS_PERIOD_256HZ
XS_PERIOD_288HZ = _xsensdeviceapi_py35_64.XS_PERIOD_288HZ
XS_PERIOD_300HZ = _xsensdeviceapi_py35_64.XS_PERIOD_300HZ
XS_PERIOD_320HZ = _xsensdeviceapi_py35_64.XS_PERIOD_320HZ
XS_PERIOD_360HZ = _xsensdeviceapi_py35_64.XS_PERIOD_360HZ
XS_PERIOD_384HZ = _xsensdeviceapi_py35_64.XS_PERIOD_384HZ
XS_PERIOD_400HZ = _xsensdeviceapi_py35_64.XS_PERIOD_400HZ
XS_PERIOD_450HZ = _xsensdeviceapi_py35_64.XS_PERIOD_450HZ
XS_PERIOD_480HZ = _xsensdeviceapi_py35_64.XS_PERIOD_480HZ
XS_PERIOD_512HZ = _xsensdeviceapi_py35_64.XS_PERIOD_512HZ
XS_PERIOD_576HZ = _xsensdeviceapi_py35_64.XS_PERIOD_576HZ
XS_PERIOD_600HZ = _xsensdeviceapi_py35_64.XS_PERIOD_600HZ
XS_PERIOD_640HZ = _xsensdeviceapi_py35_64.XS_PERIOD_640HZ
XS_PERIOD_720HZ = _xsensdeviceapi_py35_64.XS_PERIOD_720HZ
XS_PERIOD_768HZ = _xsensdeviceapi_py35_64.XS_PERIOD_768HZ
XS_PERIOD_800HZ = _xsensdeviceapi_py35_64.XS_PERIOD_800HZ
XS_PERIOD_900HZ = _xsensdeviceapi_py35_64.XS_PERIOD_900HZ
XS_PERIOD_960HZ = _xsensdeviceapi_py35_64.XS_PERIOD_960HZ
XS_PERIOD_1152HZ = _xsensdeviceapi_py35_64.XS_PERIOD_1152HZ
XS_PERIOD_1200HZ = _xsensdeviceapi_py35_64.XS_PERIOD_1200HZ
XS_PERIOD_1280HZ = _xsensdeviceapi_py35_64.XS_PERIOD_1280HZ
XS_PERIOD_1440HZ = _xsensdeviceapi_py35_64.XS_PERIOD_1440HZ
XS_PERIOD_1536HZ = _xsensdeviceapi_py35_64.XS_PERIOD_1536HZ
XS_PERIOD_1600HZ = _xsensdeviceapi_py35_64.XS_PERIOD_1600HZ
XS_PERIOD_1800HZ = _xsensdeviceapi_py35_64.XS_PERIOD_1800HZ
XS_PERIOD_1920HZ = _xsensdeviceapi_py35_64.XS_PERIOD_1920HZ
XS_PERIOD_2304HZ = _xsensdeviceapi_py35_64.XS_PERIOD_2304HZ
XS_PERIOD_2400HZ = _xsensdeviceapi_py35_64.XS_PERIOD_2400HZ
XS_PERIOD_2560HZ = _xsensdeviceapi_py35_64.XS_PERIOD_2560HZ
XS_PERIOD_2880HZ = _xsensdeviceapi_py35_64.XS_PERIOD_2880HZ
XS_PERIOD_3200HZ = _xsensdeviceapi_py35_64.XS_PERIOD_3200HZ
XS_PERIOD_3600HZ = _xsensdeviceapi_py35_64.XS_PERIOD_3600HZ
XS_PERIOD_3840HZ = _xsensdeviceapi_py35_64.XS_PERIOD_3840HZ
XS_PERIOD_4608HZ = _xsensdeviceapi_py35_64.XS_PERIOD_4608HZ
XS_PERIOD_4800HZ = _xsensdeviceapi_py35_64.XS_PERIOD_4800HZ
XS_PERIOD_5760HZ = _xsensdeviceapi_py35_64.XS_PERIOD_5760HZ
XS_PERIOD_6400HZ = _xsensdeviceapi_py35_64.XS_PERIOD_6400HZ
XS_PERIOD_7200HZ = _xsensdeviceapi_py35_64.XS_PERIOD_7200HZ
XS_PERIOD_7680HZ = _xsensdeviceapi_py35_64.XS_PERIOD_7680HZ
XS_PERIOD_9600HZ = _xsensdeviceapi_py35_64.XS_PERIOD_9600HZ
XS_PERIOD_11520HZ = _xsensdeviceapi_py35_64.XS_PERIOD_11520HZ

def xsScaleBatteryLevel(batteryLevel: 'int') -> "int":
    return _xsensdeviceapi_py35_64.xsScaleBatteryLevel(batteryLevel)
xsScaleBatteryLevel = _xsensdeviceapi_py35_64.xsScaleBatteryLevel
XS_AUTO_SAVE_FRAMES = _xsensdeviceapi_py35_64.XS_AUTO_SAVE_FRAMES
XS_FILE_LAST_FRAME = _xsensdeviceapi_py35_64.XS_FILE_LAST_FRAME
XEMTS_SIZE = _xsensdeviceapi_py35_64.XEMTS_SIZE
XS_MAX_VPORTNAME_LEN = _xsensdeviceapi_py35_64.XS_MAX_VPORTNAME_LEN
FF_IEEE754Float = _xsensdeviceapi_py35_64.FF_IEEE754Float
FF_FixedPoint1220 = _xsensdeviceapi_py35_64.FF_FixedPoint1220
FF_FixedPoint1632 = _xsensdeviceapi_py35_64.FF_FixedPoint1632
XIC_StartRepMotion = _xsensdeviceapi_py35_64.XIC_StartRepMotion
XIC_StopRepMotion = _xsensdeviceapi_py35_64.XIC_StopRepMotion
XIC_StoreResults = _xsensdeviceapi_py35_64.XIC_StoreResults
XIC_RepMotionState = _xsensdeviceapi_py35_64.XIC_RepMotionState
XIC_Status = _xsensdeviceapi_py35_64.XIC_Status
XISF_ddtWarning = _xsensdeviceapi_py35_64.XISF_ddtWarning
XISF_notEnoughData = _xsensdeviceapi_py35_64.XISF_notEnoughData
XISF_OutputStable = _xsensdeviceapi_py35_64.XISF_OutputStable
XISF_RepMoActive = _xsensdeviceapi_py35_64.XISF_RepMoActive
OM_None = _xsensdeviceapi_py35_64.OM_None
OM_Euler = _xsensdeviceapi_py35_64.OM_Euler
OM_Quaternion = _xsensdeviceapi_py35_64.OM_Quaternion
OM_Matrix = _xsensdeviceapi_py35_64.OM_Matrix
XPF_EnableInitialGyroBiasUpdate = _xsensdeviceapi_py35_64.XPF_EnableInitialGyroBiasUpdate
XPF_FixedGravity = _xsensdeviceapi_py35_64.XPF_FixedGravity
class XsUsbHubInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsUsbHubInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsUsbHubInfo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsUsbHubInfo
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _xsensdeviceapi_py35_64.new_XsUsbHubInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, other: 'XsUsbHubInfo') -> "XsUsbHubInfo const &":
        return _xsensdeviceapi_py35_64.XsUsbHubInfo___assign__(self, other)

    def parentPathMatches(self, other: 'XsUsbHubInfo') -> "bool":
        return _xsensdeviceapi_py35_64.XsUsbHubInfo_parentPathMatches(self, other)

    def isValid(self) -> "bool":
        return _xsensdeviceapi_py35_64.XsUsbHubInfo_isValid(self)

    def hub(self) -> "XsHubIdentifier":
        return _xsensdeviceapi_py35_64.XsUsbHubInfo_hub(self)
XsUsbHubInfo_swigregister = _xsensdeviceapi_py35_64.XsUsbHubInfo_swigregister
XsUsbHubInfo_swigregister(XsUsbHubInfo)

class XsScanner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsScanner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsScanner, name)
    __repr__ = _swig_repr
    if _newclass:
        scanPorts = staticmethod(_xsensdeviceapi_py35_64.XsScanner_scanPorts)
    else:
        scanPorts = _xsensdeviceapi_py35_64.XsScanner_scanPorts
    if _newclass:
        scanPort = staticmethod(_xsensdeviceapi_py35_64.XsScanner_scanPort)
    else:
        scanPort = _xsensdeviceapi_py35_64.XsScanner_scanPort
    if _newclass:
        scanComPortList = staticmethod(_xsensdeviceapi_py35_64.XsScanner_scanComPortList)
    else:
        scanComPortList = _xsensdeviceapi_py35_64.XsScanner_scanComPortList
    if _newclass:
        enumerateSerialPorts = staticmethod(_xsensdeviceapi_py35_64.XsScanner_enumerateSerialPorts)
    else:
        enumerateSerialPorts = _xsensdeviceapi_py35_64.XsScanner_enumerateSerialPorts
    if _newclass:
        filterResponsiveDevices = staticmethod(_xsensdeviceapi_py35_64.XsScanner_filterResponsiveDevices)
    else:
        filterResponsiveDevices = _xsensdeviceapi_py35_64.XsScanner_filterResponsiveDevices
    if _newclass:
        enumerateUsbDevices = staticmethod(_xsensdeviceapi_py35_64.XsScanner_enumerateUsbDevices)
    else:
        enumerateUsbDevices = _xsensdeviceapi_py35_64.XsScanner_enumerateUsbDevices
    if _newclass:
        scanUsbHub = staticmethod(_xsensdeviceapi_py35_64.XsScanner_scanUsbHub)
    else:
        scanUsbHub = _xsensdeviceapi_py35_64.XsScanner_scanUsbHub
    if _newclass:
        enumerateNetworkDevices = staticmethod(_xsensdeviceapi_py35_64.XsScanner_enumerateNetworkDevices)
    else:
        enumerateNetworkDevices = _xsensdeviceapi_py35_64.XsScanner_enumerateNetworkDevices
    if _newclass:
        abortScan = staticmethod(_xsensdeviceapi_py35_64.XsScanner_abortScan)
    else:
        abortScan = _xsensdeviceapi_py35_64.XsScanner_abortScan
    if _newclass:
        setScanLogCallback = staticmethod(_xsensdeviceapi_py35_64.XsScanner_setScanLogCallback)
    else:
        setScanLogCallback = _xsensdeviceapi_py35_64.XsScanner_setScanLogCallback

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsScanner()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsScanner
    __del__ = lambda self: None
XsScanner_swigregister = _xsensdeviceapi_py35_64.XsScanner_swigregister
XsScanner_swigregister(XsScanner)

def XsScanner_scanPorts(baudrate: 'XsBaudRate'=XBR_Invalid, singleScanTimeout: 'int'=100, ignoreNonXsensDevices: 'bool'=True, detectRs485: 'bool'=False) -> "XsPortInfoArray":
    return _xsensdeviceapi_py35_64.XsScanner_scanPorts(baudrate, singleScanTimeout, ignoreNonXsensDevices, detectRs485)
XsScanner_scanPorts = _xsensdeviceapi_py35_64.XsScanner_scanPorts

def XsScanner_scanPort(*args) -> "XsPortInfo":
    return _xsensdeviceapi_py35_64.XsScanner_scanPort(*args)
XsScanner_scanPort = _xsensdeviceapi_py35_64.XsScanner_scanPort

def XsScanner_scanComPortList(*args) -> "XsPortInfoArray":
    return _xsensdeviceapi_py35_64.XsScanner_scanComPortList(*args)
XsScanner_scanComPortList = _xsensdeviceapi_py35_64.XsScanner_scanComPortList

def XsScanner_enumerateSerialPorts(ignoreNonXsensDevices: 'bool'=True) -> "XsPortInfoArray":
    return _xsensdeviceapi_py35_64.XsScanner_enumerateSerialPorts(ignoreNonXsensDevices)
XsScanner_enumerateSerialPorts = _xsensdeviceapi_py35_64.XsScanner_enumerateSerialPorts

def XsScanner_filterResponsiveDevices(ports: 'XsPortInfoArray', baudrate: 'XsBaudRate'=XBR_Invalid, singleScanTimeout: 'int'=100, detectRs485: 'bool'=False) -> "XsPortInfoArray":
    return _xsensdeviceapi_py35_64.XsScanner_filterResponsiveDevices(ports, baudrate, singleScanTimeout, detectRs485)
XsScanner_filterResponsiveDevices = _xsensdeviceapi_py35_64.XsScanner_filterResponsiveDevices

def XsScanner_enumerateUsbDevices() -> "XsPortInfoArray":
    return _xsensdeviceapi_py35_64.XsScanner_enumerateUsbDevices()
XsScanner_enumerateUsbDevices = _xsensdeviceapi_py35_64.XsScanner_enumerateUsbDevices

def XsScanner_scanUsbHub(port: 'XsPortInfo') -> "XsUsbHubInfo":
    return _xsensdeviceapi_py35_64.XsScanner_scanUsbHub(port)
XsScanner_scanUsbHub = _xsensdeviceapi_py35_64.XsScanner_scanUsbHub

def XsScanner_enumerateNetworkDevices() -> "XsPortInfoArray":
    return _xsensdeviceapi_py35_64.XsScanner_enumerateNetworkDevices()
XsScanner_enumerateNetworkDevices = _xsensdeviceapi_py35_64.XsScanner_enumerateNetworkDevices

def XsScanner_abortScan() -> "void":
    return _xsensdeviceapi_py35_64.XsScanner_abortScan()
XsScanner_abortScan = _xsensdeviceapi_py35_64.XsScanner_abortScan

def XsScanner_setScanLogCallback(cb: 'XsScanLogCallbackFunc') -> "void":
    return _xsensdeviceapi_py35_64.XsScanner_setScanLogCallback(cb)
XsScanner_setScanLogCallback = _xsensdeviceapi_py35_64.XsScanner_setScanLogCallback

class XsControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsControl, name)
    __repr__ = _swig_repr
    if _newclass:
        construct = staticmethod(_xsensdeviceapi_py35_64.XsControl_construct)
    else:
        construct = _xsensdeviceapi_py35_64.XsControl_construct

    def destruct(self) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_destruct(self)

    def flushInputBuffers(self) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_flushInputBuffers(self)
    if _newclass:
        resultText = staticmethod(_xsensdeviceapi_py35_64.XsControl_resultText)
    else:
        resultText = _xsensdeviceapi_py35_64.XsControl_resultText

    def clearHardwareError(self) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_clearHardwareError(self)

    def close(self) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_close(self)

    def openPort(self, *args) -> "bool":
        return _xsensdeviceapi_py35_64.XsControl_openPort(self, *args)

    def openPortWithCredentials(self, portinfo: 'XsPortInfo', id: 'XsString', key: 'XsString', timeout: 'uint32_t'=0) -> "bool":
        return _xsensdeviceapi_py35_64.XsControl_openPortWithCredentials(self, portinfo, id, key, timeout)

    def openCustomPort(self, channelId: 'int', channelLatency: 'uint32_t', detectRs485: 'bool'=False) -> "bool":
        return _xsensdeviceapi_py35_64.XsControl_openCustomPort(self, channelId, channelLatency, detectRs485)

    def openImarPort_internal(self, portname: 'XsString', baudrate: 'XsBaudRate', imarType: 'int', timeout: 'uint32_t'=0) -> "bool":
        return _xsensdeviceapi_py35_64.XsControl_openImarPort_internal(self, portname, baudrate, imarType, timeout)

    def closeCustomPort(self, channelId: 'int') -> "void":
        return _xsensdeviceapi_py35_64.XsControl_closeCustomPort(self, channelId)

    def closePort(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_closePort(self, *args)

    def customPortInfo(self, channelId: 'int') -> "XsPortInfo":
        return _xsensdeviceapi_py35_64.XsControl_customPortInfo(self, channelId)

    def openLogFile(self, filename: 'XsString') -> "bool":
        return _xsensdeviceapi_py35_64.XsControl_openLogFile(self, filename)

    def lastResult(self) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsControl_lastResult(self)

    def lastResultText(self) -> "XsString":
        return _xsensdeviceapi_py35_64.XsControl_lastResultText(self)

    def lastHardwareError(self) -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsControl_lastHardwareError(self)

    def lastHardwareErrorDeviceId(self) -> "XsDeviceId":
        return _xsensdeviceapi_py35_64.XsControl_lastHardwareErrorDeviceId(self)

    def deviceCount(self) -> "int":
        return _xsensdeviceapi_py35_64.XsControl_deviceCount(self)

    def mainDeviceCount(self) -> "int":
        return _xsensdeviceapi_py35_64.XsControl_mainDeviceCount(self)

    def mainDeviceIds(self) -> "XsDeviceIdArray":
        return _xsensdeviceapi_py35_64.XsControl_mainDeviceIds(self)

    def mtCount(self) -> "int":
        return _xsensdeviceapi_py35_64.XsControl_mtCount(self)

    def mtDeviceIds(self) -> "XsDeviceIdArray":
        return _xsensdeviceapi_py35_64.XsControl_mtDeviceIds(self)

    def deviceIds(self) -> "XsDeviceIdArray":
        return _xsensdeviceapi_py35_64.XsControl_deviceIds(self)

    def getDeviceFromLocationId(self, locationId: 'uint16_t') -> "XsDevice *":
        return _xsensdeviceapi_py35_64.XsControl_getDeviceFromLocationId(self, locationId)

    def dockDeviceId(self, deviceId: 'XsDeviceId') -> "XsDeviceId":
        return _xsensdeviceapi_py35_64.XsControl_dockDeviceId(self, deviceId)

    def isDeviceWireless(self, deviceId: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsControl_isDeviceWireless(self, deviceId)

    def isDeviceDocked(self, deviceId: 'XsDeviceId') -> "bool":
        return _xsensdeviceapi_py35_64.XsControl_isDeviceDocked(self, deviceId)

    def loadFilterProfiles(self, filename: 'XsString') -> "bool":
        return _xsensdeviceapi_py35_64.XsControl_loadFilterProfiles(self, filename)

    def enabledOptions(self) -> "XsOption":
        return _xsensdeviceapi_py35_64.XsControl_enabledOptions(self)

    def disabledOptions(self) -> "XsOption":
        return _xsensdeviceapi_py35_64.XsControl_disabledOptions(self)

    def setOptions(self, enable: 'XsOption', disable: 'XsOption') -> "void":
        return _xsensdeviceapi_py35_64.XsControl_setOptions(self, enable, disable)

    def setOptionsForce(self, enabled: 'XsOption') -> "void":
        return _xsensdeviceapi_py35_64.XsControl_setOptionsForce(self, enabled)

    def setInitialPositionLLA(self, lla: 'XsVector') -> "bool":
        return _xsensdeviceapi_py35_64.XsControl_setInitialPositionLLA(self, lla)

    def device(self, deviceId: 'XsDeviceId') -> "XsDevice *":
        return _xsensdeviceapi_py35_64.XsControl_device(self, deviceId)

    def mainDevices(self) -> "XsDevicePtrArray":
        return _xsensdeviceapi_py35_64.XsControl_mainDevices(self)

    def broadcast(self) -> "XsDevice *":
        return _xsensdeviceapi_py35_64.XsControl_broadcast(self)

    def transmissionReceived(self, channelId: 'int', data: 'XsByteArray') -> "void":
        return _xsensdeviceapi_py35_64.XsControl_transmissionReceived(self, channelId, data)

    def clearCallbackHandlers(self, chain: 'bool'=True) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_clearCallbackHandlers(self, chain)

    def gotoConfig(self) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_gotoConfig(self)

    def gotoMeasurement(self) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_gotoMeasurement(self)

    def startRestoreCommunication(self, portName: 'XsString') -> "XsResultValue":
        return _xsensdeviceapi_py35_64.XsControl_startRestoreCommunication(self, portName)

    def stopRestoreCommunication(self) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_stopRestoreCommunication(self)
    __swig_destroy__ = _xsensdeviceapi_py35_64.delete_XsControl
    __del__ = lambda self: None

    def __init__(self):
        this = _xsensdeviceapi_py35_64.new_XsControl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addCallbackHandler(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_addCallbackHandler(self, *args)

    def removeCallbackHandler(self, *args) -> "void":
        return _xsensdeviceapi_py35_64.XsControl_removeCallbackHandler(self, *args)
XsControl_swigregister = _xsensdeviceapi_py35_64.XsControl_swigregister
XsControl_swigregister(XsControl)

def XsControl_construct() -> "XsControl *":
    return _xsensdeviceapi_py35_64.XsControl_construct()
XsControl_construct = _xsensdeviceapi_py35_64.XsControl_construct

def XsControl_resultText(resultCode: 'XsResultValue') -> "XsString":
    return _xsensdeviceapi_py35_64.XsControl_resultText(resultCode)
XsControl_resultText = _xsensdeviceapi_py35_64.XsControl_resultText

# This file is compatible with both classic and new-style classes.


